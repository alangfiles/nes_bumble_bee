;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.import		_pad_poll_4score_1_3
	.import		_pad_poll_4score_2_4
	.export		_Bee1
	.export		_Bee2
	.export		_Bee3
	.export		_Bee4
	.export		_SmallBee1
	.export		_SmallBee2
	.export		_SmallBee3
	.export		_SmallBee4
	.export		_doublepad
	.export		_generic_pad
	.export		_pad1
	.export		_pad2
	.export		_pad3
	.export		_pad4
	.export		_game_mode
	.export		_winner
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_hero_velocity_x
	.export		_hero_velocity_y
	.export		_old_x
	.export		_old_y
	.export		_temp
	.export		_temp_x
	.export		_temp_y
	.export		_temp_x2
	.export		_temp_y2
	.export		_largeindex
	.export		_bit_index
	.export		_bit_offset
	.export		_frame_counter
	.export		_ai_counter
	.export		_tinyhoney
	.export		_Generic
	.export		_GenericBoxGuy
	.export		_BoxGuy1
	.export		_BoxGuy2
	.export		_BoxGuy3
	.export		_BoxGuy4
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles1
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_check_tile_and_collect
	.export		_debug_extras
	.export		_read_controllers
	.export		_seeker_ai
	.export		_chaser_ai
	.export		_game_loop
	.export		_title_loop
	.export		_gameover_loop
	.export		_init_game_loop
	.export		_init_gameover_loop
	.export		_init_title_loop
	.export		_init_system
	.export		_bg_collision_sub
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_sprite_collision
	.export		_main
	.export		_pellet_tiles
	.export		_blank_tiles

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$2800
_BoxGuy2:
	.word	$8000
	.word	$3000
_BoxGuy3:
	.word	$A000
	.word	$3000
_BoxGuy4:
	.word	$C000
	.word	$3000

.segment	"RODATA"

_Bee1:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$80
_Bee2:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$01
	.byte	$80
_Bee3:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$02
	.byte	$80
_Bee4:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$03
	.byte	$80
_SmallBee1:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$80
_SmallBee2:
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$80
_SmallBee3:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$02
	.byte	$80
_SmallBee4:
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$02
	.byte	$80
_tinyhoney:
	.byte	$A7
	.byte	$B6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$EE
	.byte	$EF
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$AB
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$B6
	.byte	$5D
	.byte	$31
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A8
	.byte	$5E
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5B
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$EE
	.byte	$EF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EE
	.byte	$EF
	.byte	$EE
	.byte	$EF
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$82
	.byte	$83
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$DE
	.byte	$DF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$82
	.byte	$83
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$92
	.byte	$93
	.byte	$CA
	.byte	$C8
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C8
	.byte	$C8
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C9
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C9
	.byte	$92
	.byte	$93
	.byte	$FB
	.byte	$A7
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$9F
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$9E
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C9
	.byte	$BE
	.byte	$BF
	.byte	$EB
	.byte	$B6
	.byte	$CC
	.byte	$CB
	.byte	$DD
	.byte	$DF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C8
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$FB
	.byte	$B6
	.byte	$CC
	.byte	$DB
	.byte	$C6
	.byte	$8C
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$8D
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EB
	.byte	$CA
	.byte	$C6
	.byte	$EB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$8C
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$8D
	.byte	$C6
	.byte	$EA
	.byte	$B6
	.byte	$CB
	.byte	$DF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8E
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$8F
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FA
	.byte	$B8
	.byte	$DF
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$9C
	.byte	$CA
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$8F
	.byte	$CA
	.byte	$C8
	.byte	$8E
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C7
	.byte	$EB
	.byte	$B9
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$8F
	.byte	$C6
	.byte	$C9
	.byte	$8E
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$ED
	.byte	$BF
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FD
	.byte	$DF
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$FB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C8
	.byte	$C8
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$A7
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FB
	.byte	$B6
	.byte	$BE
	.byte	$EC
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C7
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$DE
	.byte	$DF
	.byte	$C8
	.byte	$EB
	.byte	$B6
	.byte	$DE
	.byte	$FC
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$9C
	.byte	$9C
	.byte	$F8
	.byte	$F9
	.byte	$C7
	.byte	$EA
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$8C
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8D
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FA
	.byte	$B6
	.byte	$B6
	.byte	$EA
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$E8
	.byte	$E9
	.byte	$C6
	.byte	$EB
	.byte	$99
	.byte	$A7
	.byte	$FA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EA
	.byte	$C6
	.byte	$EB
	.byte	$CE
	.byte	$CF
	.byte	$EB
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$CE
	.byte	$CF
	.byte	$EB
	.byte	$C9
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FB
	.byte	$C6
	.byte	$FA
	.byte	$C6
	.byte	$FB
	.byte	$CE
	.byte	$DB
	.byte	$FB
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FB
	.byte	$CE
	.byte	$CF
	.byte	$FB
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$9E
	.byte	$FB
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$A7
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$AB
	.byte	$B6
	.byte	$EB
	.byte	$82
	.byte	$83
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$82
	.byte	$83
	.byte	$EB
	.byte	$A7
	.byte	$A7
	.byte	$FB
	.byte	$92
	.byte	$93
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$CD
	.byte	$BC
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$92
	.byte	$93
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$A8
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$DB
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$AF
	.byte	$B6
	.byte	$A7
	.byte	$B9
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B7
	.byte	$A8
	.byte	$DE
	.byte	$DD
	.byte	$DD
	.byte	$DF
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$35
	.byte	$26
	.byte	$07
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$21
	.byte	$16
	.byte	$30
_palette_sp:
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$0A
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$20
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$14
	.byte	$38
_metatiles1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_pellet_tiles:
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
_blank_tiles:
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
L0794:
	.byte	$42,$52,$49,$41,$4E,$20,$41,$4E,$44,$20,$41,$4C,$41,$4E,$20,$47
	.byte	$41,$4D,$45,$53,$00
L07D5:
	.byte	$50,$4C,$41,$59,$45,$52,$20,$33,$20,$41,$4E,$44,$20,$34,$20,$57
	.byte	$49,$4E,$00
L07C8:
	.byte	$50,$4C,$41,$59,$45,$52,$20,$31,$20,$41,$4E,$44,$20,$32,$20,$57
	.byte	$49,$4E,$00
L07DF:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00
L079E:
	.byte	$48,$4F,$4E,$45,$59,$20,$48,$45,$49,$53,$54,$00
L07A8	:=	L07DF+0
L07BC:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_doublepad:
	.res	2,$00
_generic_pad:
	.res	1,$00
_pad1:
	.res	1,$00
_pad2:
	.res	1,$00
_pad3:
	.res	1,$00
_pad4:
	.res	1,$00
_game_mode:
	.res	1,$00
_winner:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_hero_velocity_x:
	.res	2,$00
_hero_velocity_y:
	.res	2,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp_x2:
	.res	1,$00
_temp_y2:
	.res	1,$00
_largeindex:
	.res	2,$00
_bit_index:
	.res	1,$00
_bit_offset:
	.res	1,$00
_frame_counter:
	.res	1,$00
_ai_counter:
	.res	1,$00
.segment	"BSS"
_Generic:
	.res	4,$00
_GenericBoxGuy:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	lda     #$00
	sta     _largeindex
	sta     _largeindex+1
L04B1:	ldx     _largeindex+1
	cpx     #$04
	bcs     L04B2
;
; vram_put(tinyhoney[largeindex]);
;
	lda     #<(_tinyhoney)
	sta     ptr1
	lda     #>(_tinyhoney)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	inc     _largeindex
	bne     L04B1
	inc     _largeindex+1
	jmp     L04B1
;
; ppu_on_all();
;
L04B2:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L07F2
;
; temp_x = 1;
;
	lda     #$01
	sta     _temp_x
;
; if (temp_y == 0)
;
L07F2:	lda     _temp_y
	bne     L04C9
;
; temp_y = 1;
;
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, SmallBee1);
;
L04C9:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_SmallBee1)
	ldx     #>(_SmallBee1)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L07F3
;
; temp_x = 1;
;
	lda     #$01
	sta     _temp_x
;
; if (temp_y == 0)
;
L07F3:	lda     _temp_y
	bne     L04D9
;
; temp_y = 1;
;
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, SmallBee2);
;
L04D9:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_SmallBee2)
	ldx     #>(_SmallBee2)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L07F4
;
; temp_x = 1;
;
	lda     #$01
	sta     _temp_x
;
; if (temp_y == 0)
;
L07F4:	lda     _temp_y
	bne     L04E9
;
; temp_y = 1;
;
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, SmallBee3);
;
L04E9:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_SmallBee3)
	ldx     #>(_SmallBee3)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L07F5
;
; temp_x = 1;
;
	lda     #$01
	sta     _temp_x
;
; if (temp_y == 0)
;
L07F5:	lda     _temp_y
	bne     L04F9
;
; temp_y = 1;
;
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, SmallBee4);
;
L04F9:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_SmallBee4)
	ldx     #>(_SmallBee4)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _old_x+1
	lda     _GenericBoxGuy
	sta     _old_x
;
; if (generic_pad & PAD_LEFT)
;
	lda     _generic_pad
	and     #$02
	beq     L07FC
;
; hero_velocity_x = -SPEED;
;
	ldx     #$FF
	lda     #$60
;
; else if (generic_pad & PAD_RIGHT)
;
	jmp     L07FE
L07FC:	lda     _generic_pad
	ldx     #$00
	and     #$01
	beq     L07FE
;
; hero_velocity_x = SPEED;
;
	lda     #$A0
;
; hero_velocity_x = 0;
;
L07FE:	sta     _hero_velocity_x
	stx     _hero_velocity_x+1
;
; GenericBoxGuy.x += hero_velocity_x;
;
	lda     _hero_velocity_x
	clc
	adc     _GenericBoxGuy
	sta     _GenericBoxGuy
	lda     _hero_velocity_x+1
	adc     _GenericBoxGuy+1
	sta     _GenericBoxGuy+1
;
; if (GenericBoxGuy.x > 0xf000)
;
	lda     _GenericBoxGuy
	cmp     #$01
	lda     _GenericBoxGuy+1
	sbc     #$F0
	bcc     L0801
;
; if (old_x >= 0x8000)
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L0800
;
; GenericBoxGuy.x = 0xf000; // max right
;
	ldx     #$F0
;
; GenericBoxGuy.x = 0x0000; // max left
;
L0800:	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L0801:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$06
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; if (hero_velocity_x < 0)
;
	ldx     _hero_velocity_x+1
	cpx     #$80
	bcc     L0523
;
; if (bg_coll_L())
;
	jsr     _bg_coll_L
	tax
	beq     L052F
;
; high_byte(GenericBoxGuy.x) = high_byte(GenericBoxGuy.x) - eject_L;
;
	lda     _GenericBoxGuy+1
	sec
	sbc     _eject_L
;
; else if (hero_velocity_x > 0)
;
	jmp     L080A
L0523:	lda     _hero_velocity_x
	cmp     #$01
	lda     _hero_velocity_x+1
	sbc     #$00
	bvs     L052E
	eor     #$80
L052E:	bpl     L052F
;
; if (bg_coll_R())
;
	jsr     _bg_coll_R
	tax
	beq     L052F
;
; high_byte(GenericBoxGuy.x) = high_byte(GenericBoxGuy.x) - eject_R;
;
	lda     _GenericBoxGuy+1
	sec
	sbc     _eject_R
L080A:	sta     _GenericBoxGuy+1
;
; old_y = GenericBoxGuy.y;
;
L052F:	lda     _GenericBoxGuy+2+1
	sta     _old_y+1
	lda     _GenericBoxGuy+2
	sta     _old_y
;
; if (generic_pad & PAD_UP)
;
	lda     _generic_pad
	and     #$08
	beq     L0802
;
; hero_velocity_y = -SPEED;
;
	ldx     #$FF
	lda     #$60
;
; else if (generic_pad & PAD_DOWN)
;
	jmp     L0804
L0802:	lda     _generic_pad
	ldx     #$00
	and     #$04
	beq     L0804
;
; hero_velocity_y = SPEED;
;
	lda     #$A0
;
; hero_velocity_y = 0;
;
L0804:	sta     _hero_velocity_y
	stx     _hero_velocity_y+1
;
; GenericBoxGuy.y += hero_velocity_y;
;
	lda     _hero_velocity_y
	clc
	adc     _GenericBoxGuy+2
	sta     _GenericBoxGuy+2
	lda     _hero_velocity_y+1
	adc     _GenericBoxGuy+2+1
	sta     _GenericBoxGuy+2+1
;
; if (GenericBoxGuy.y > 0xe000)
;
	lda     _GenericBoxGuy+2
	cmp     #$01
	lda     _GenericBoxGuy+2+1
	sbc     #$E0
	bcc     L0807
;
; if (old_y >= 0x8000)
;
	lda     _old_y
	cmp     #$00
	lda     _old_y+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L0806
;
; GenericBoxGuy.y = 0xe000; // max down
;
	ldx     #$E0
;
; GenericBoxGuy.y = 0x0000; // max up
;
L0806:	sta     _GenericBoxGuy+2
	stx     _GenericBoxGuy+2+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L0807:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; if (hero_velocity_y < 0)
;
	ldx     _hero_velocity_y+1
	cpx     #$80
	bcc     L0552
;
; if (bg_coll_U())
;
	jsr     _bg_coll_U
	tax
	beq     L055E
;
; high_byte(GenericBoxGuy.y) = high_byte(GenericBoxGuy.y) - eject_U;
;
	lda     _GenericBoxGuy+3
	sec
	sbc     _eject_U
;
; else if (hero_velocity_y > 0)
;
	jmp     L080B
L0552:	lda     _hero_velocity_y
	cmp     #$01
	lda     _hero_velocity_y+1
	sbc     #$00
	bvs     L055D
	eor     #$80
L055D:	bpl     L055E
;
; if (bg_coll_D())
;
	jsr     _bg_coll_D
	tax
	beq     L055E
;
; high_byte(GenericBoxGuy.y) = high_byte(GenericBoxGuy.y) - eject_D;
;
	lda     _GenericBoxGuy+3
	sec
	sbc     _eject_D
L080B:	sta     _GenericBoxGuy+3
;
; check_tile_and_collect();
;
L055E:	jmp     _check_tile_and_collect

.endproc

; ---------------------------------------------------------------
; void __near__ check_tile_and_collect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tile_and_collect: near

.segment	"CODE"

;
; temp_x = (Generic.x + 4) >> 3; // get this between 0-30
;
	ldx     #$00
	lda     _Generic
	clc
	adc     #$04
	bcc     L05D9
	inx
L05D9:	jsr     shrax3
	sta     _temp_x
;
; temp_y = (Generic.y + 2) >> 3; // get this between 0-32
;
	ldx     #$00
	lda     _Generic+1
	clc
	adc     #$02
	bcc     L05DD
	inx
L05DD:	jsr     shrax3
	sta     _temp_y
;
; largeindex = (temp_y << 5) + temp_x;
;
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_x
	bcc     L080C
	inx
L080C:	sta     _largeindex
	stx     _largeindex+1
;
; temp = tinyhoney[largeindex];
;
	lda     #<(_tinyhoney)
	sta     ptr1
	lda     #>(_tinyhoney)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	sta     _temp
;
; for (index = 0; index < 5; index++)
;
	lda     #$00
	sta     _index
L080F:	lda     _index
	cmp     #$05
	bcs     L05E5
;
; if (temp == pellet_tiles[index])
;
	ldy     _index
	lda     _pellet_tiles,y
	cmp     _temp
	bne     L05EC
;
; one_vram_buffer(blank_tiles[frame_counter % 5], NTADR_A(temp_x, temp_y));
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_blank_tiles)
	sta     ptr1+1
	ldy     #<(_blank_tiles)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _temp_x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; else if (temp == blank_tiles[index])
;
L05EC:	ldy     _index
	lda     _blank_tiles,y
	cmp     _temp
;
; break;
;
	beq     L05E5
;
; for (index = 0; index < 5; index++)
;
	inc     _index
	jmp     L080F
;
; }
;
L05E5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ debug_extras (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug_extras: near

.segment	"CODE"

;
; one_vram_buffer(0x58, NTADR_A(6, 1));
;
	lda     #$58
	jsr     pusha
	ldx     #$20
	lda     #$26
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.x >> 8 & 0xff) >> 4;
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(7, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$27
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.x >> 8 & 0x0f);
;
	lda     _BoxGuy1+1
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(8, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$28
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x59, NTADR_A(10, 1));
;
	lda     #$59
	jsr     pusha
	ldx     #$20
	lda     #$2A
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.y >> 8 & 0xff) >> 4;
;
	lda     _BoxGuy1+3
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(11, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$2B
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.y >> 8 & 0x0f);
;
	lda     _BoxGuy1+3
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(12, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$2C
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x54, NTADR_A(14, 1));
;
	lda     #$54
	jsr     pusha
	ldx     #$20
	lda     #$2E
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.x >> 8 >> 3 & 0xff) >> 4;
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(15, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$2F
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.x >> 8 >> 3 & 0x0f);
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(16, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$30
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x55, NTADR_A(18, 1));
;
	lda     #$55
	jsr     pusha
	ldx     #$20
	lda     #$32
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.y >> 8 >> 3 & 0xff) >> 4;
;
	lda     _BoxGuy1+3
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(19, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$33
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.y >> 8 >> 3 & 0x0f);
;
	lda     _BoxGuy1+3
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(20, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$34
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x57, NTADR_A(22, 1));
;
	lda     #$57
	jsr     pusha
	ldx     #$20
	lda     #$36
	jsr     _one_vram_buffer
;
; largeindex = ((BoxGuy1.y >> 8 >> 3) << 5) + (BoxGuy1.x >> 8 >> 3);
;
	ldx     #$00
	lda     _BoxGuy1+3
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _largeindex
	lda     #$00
	adc     ptr1+1
	sta     _largeindex+1
;
; temp = tinyhoney[largeindex];
;
	lda     #<(_tinyhoney)
	sta     ptr1
	lda     #>(_tinyhoney)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	sta     _temp
;
; temp1 = (temp & 0xff) >> 4;
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(23, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$37
	jsr     _one_vram_buffer
;
; temp1 = (temp & 0x0f);
;
	lda     _temp
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(24, 1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$38
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ read_controllers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_controllers: near

.segment	"CODE"

;
; doublepad = pad_poll_4score_1_3();
;
	jsr     _pad_poll_4score_1_3
	sta     _doublepad
	stx     _doublepad+1
;
; pad1 = high_byte(doublepad); // the high byte is the first controller's input
;
	lda     _doublepad+1
	sta     _pad1
;
; pad3 = low_byte(doublepad);  // low byte is the third controller's input
;
	lda     _doublepad
	sta     _pad3
;
; doublepad = pad_poll_4score_2_4();
;
	jsr     _pad_poll_4score_2_4
	sta     _doublepad
	stx     _doublepad+1
;
; pad2 = high_byte(doublepad);
;
	lda     _doublepad+1
	sta     _pad2
;
; pad4 = low_byte(doublepad);
;
	lda     _doublepad
	sta     _pad4
;
; seeker_ai();
;
	jsr     _seeker_ai
;
; chaser_ai();
;
	jmp     _chaser_ai

.endproc

; ---------------------------------------------------------------
; void __near__ seeker_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_seeker_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ chaser_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_chaser_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; debug_extras();
;
	jsr     _debug_extras
;
; frame_counter++;
;
	inc     _frame_counter
;
; ai_counter++;
;
	inc     _ai_counter
;
; read_controllers();
;
	jsr     _read_controllers
;
; GenericBoxGuy = BoxGuy1;
;
	lda     _BoxGuy1+3
	sta     sreg+1
	lda     _BoxGuy1+2
	sta     sreg
	ldx     _BoxGuy1+1
	lda     _BoxGuy1
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad1;
;
	lda     _pad1
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision()) //1 and 3, both seekers
;
	jsr     _sprite_collision
	tax
;
; } else {
;
	bne     L06DE
;
; BoxGuy1.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy1+1
	lda     _GenericBoxGuy
	sta     _BoxGuy1
;
; BoxGuy1.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy1+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy1+2
;
; GenericBoxGuy = BoxGuy2;
;
L06DE:	lda     _BoxGuy2+3
	sta     sreg+1
	lda     _BoxGuy2+2
	sta     sreg
	ldx     _BoxGuy2+1
	lda     _BoxGuy2
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad2;
;
	lda     _pad2
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) //player 2 blocks player 4 (chasers)
;
	jsr     _sprite_collision
	tax
;
; } else {
;
	bne     L06F2
;
; BoxGuy2.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy2+1
	lda     _GenericBoxGuy
	sta     _BoxGuy2
;
; BoxGuy2.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy2+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy2+2
;
; GenericBoxGuy = BoxGuy3;
;
L06F2:	lda     _BoxGuy3+3
	sta     sreg+1
	lda     _BoxGuy3+2
	sta     sreg
	ldx     _BoxGuy3+1
	lda     _BoxGuy3
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad3;
;
	lda     _pad3
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision()) // 1 blocks 3 (seekers)
;
	jsr     _sprite_collision
	tax
;
; } else {
;
	bne     L0706
;
; BoxGuy3.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy3+1
	lda     _GenericBoxGuy
	sta     _BoxGuy3
;
; BoxGuy3.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy3+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy3+2
;
; GenericBoxGuy = BoxGuy4;
;
L0706:	lda     _BoxGuy4+3
	sta     sreg+1
	lda     _BoxGuy4+2
	sta     sreg
	ldx     _BoxGuy4+1
	lda     _BoxGuy4
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad4;
;
	lda     _pad4
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) // 2 blocks 4 (seekers)
;
	jsr     _sprite_collision
	tax
;
; } else {
;
	bne     L071A
;
; BoxGuy4.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy4+1
	lda     _GenericBoxGuy
	sta     _BoxGuy4
;
; BoxGuy4.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy4+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy4+2
;
; temp_x = BoxGuy1.x >> 8;
;
L071A:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L0810
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; init_gameover_loop();
;
	jsr     _init_gameover_loop
;
; temp_x = BoxGuy3.x >> 8;
;
L0810:	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L0811
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; init_gameover_loop();
;
	jsr     _init_gameover_loop
;
; temp_x = BoxGuy1.x >> 8;
;
L0811:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L0812
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; init_gameover_loop();
;
	jsr     _init_gameover_loop
;
; temp_x = BoxGuy2.x >> 8;
;
L0812:	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L074E
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; init_gameover_loop();
;
	jsr     _init_gameover_loop
;
; draw_sprites();
;
L074E:	jmp     _draw_sprites

.endproc

; ---------------------------------------------------------------
; void __near__ title_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L0755:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_START)
;
	and     #$10
	beq     L0755
;
; init_game_loop();
;
	jmp     _init_game_loop

.endproc

; ---------------------------------------------------------------
; void __near__ gameover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gameover_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L0761:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_START)
;
	and     #$10
	beq     L0761
;
; init_title_loop();
;
	jmp     _init_title_loop

.endproc

; ---------------------------------------------------------------
; void __near__ init_game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_game_loop: near

.segment	"CODE"

;
; game_mode = MODE_GAME;  
;
	lda     #$01
	sta     _game_mode
;
; BoxGuy1.x = 0x4000;
;
	ldx     #$40
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.y = 0x2800;
;
	ldx     #$28
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x8000;
;
	ldx     #$80
	sta     _BoxGuy2
	stx     _BoxGuy2+1
;
; BoxGuy2.y = 0x3000;
;
	ldx     #$30
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xA000;
;
	ldx     #$A0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
;
; BoxGuy3.y = 0x3000;
;
	ldx     #$30
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0xC000;
;
	ldx     #$C0
	sta     _BoxGuy4
	stx     _BoxGuy4+1
;
; BoxGuy4.y = 0x3000;
;
	ldx     #$30
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; ppu_off(); // screen off 
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; load_room();
;
	jsr     _load_room
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_gameover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_gameover_loop: near

.segment	"CODE"

;
; game_mode = MODE_GAMEOVER;   
;
	lda     #$02
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; multi_vram_buffer_horz("GAME OVER", 9, NTADR_A(11, 8));
;
	jsr     decsp3
	lda     #<(L07BC)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L07BC)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$0B
	jsr     _multi_vram_buffer_horz
;
; if( winner == ONETWO_WINNER)
;
	lda     _winner
	bne     L0814
;
; multi_vram_buffer_horz("PLAYER 1 AND 2 WIN", 18, NTADR_A(6, 12));
;
	jsr     decsp3
	lda     #<(L07C8)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L07C8)
;
; else if (winner == THREEFOUR_WINNER)
;
	jmp     L081A
L0814:	lda     _winner
	cmp     #$01
	bne     L07D2
;
; multi_vram_buffer_horz("PLAYER 3 AND 4 WIN", 18, NTADR_A(6, 12));
;
	jsr     decsp3
	lda     #<(L07D5)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L07D5)
L081A:	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$86
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("PRESS START", 11, NTADR_A(10, 24));
;
L07D2:	jsr     decsp3
	lda     #<(L07DF)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L07DF)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$23
	lda     #$0A
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_title_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_title_loop: near

.segment	"CODE"

;
; delay(30);
;
	lda     #$1E
	jsr     _delay
;
; game_mode = MODE_TITLE;   
;
	lda     #$00
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; multi_vram_buffer_horz("BRIAN AND ALAN GAMES", 20, NTADR_A(6, 6));
;
	jsr     decsp3
	lda     #<(L0794)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0794)
	sta     (sp),y
	lda     #$14
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$C6
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("HONEY HEIST", 11, NTADR_A(10, 8));
;
	jsr     decsp3
	lda     #<(L079E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L079E)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$0A
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("PRESS START", 11, NTADR_A(10, 24));
;
	jsr     decsp3
	lda     #<(L07A8)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L07A8)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$23
	lda     #$0A
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_system (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_system: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); //shift the bg down one pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; return 0; //debug: turn off collision
;
	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp_x = Generic.x;
;
	lda     _Generic
	sta     _temp_x
;
; eject_L = temp_x | 0xf0;
;
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L081D
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L081D:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L081F
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L081F:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp_x = Generic.x + Generic.width;
;
	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; eject_R = (temp_x + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L0822
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L0822:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L0824
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L0824:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L0826
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L0826:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L0828
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L0828:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; eject_D = (temp_y + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L082B
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L082B:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L082D
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L082D:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ sprite_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collision: near

.segment	"CODE"

;
; if (temp_x < temp_x2 + 8 && temp_x + 8 > temp_x2 &&
;
	lda     _temp_x
	jsr     pusha0
	lda     _temp_x2
	clc
	adc     #$08
	bcc     L0602
	ldx     #$01
L0602:	jsr     tosicmp
	bcs     L0603
	ldx     #$00
	lda     _temp_x
	clc
	adc     #$08
	bcc     L0604
	inx
L0604:	sec
	sbc     _temp_x2
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L0603
	beq     L0603
;
; temp_y < temp_y2 + 8 && temp_y + 8 > temp_y2)
;
	lda     _temp_y
	jsr     pusha0
	lda     _temp_y2
	clc
	adc     #$08
	bcc     L0605
	ldx     #$01
L0605:	jsr     tosicmp
	bcs     L0603
	ldx     #$00
	lda     _temp_y
	clc
	adc     #$08
	bcc     L0606
	inx
L0606:	sec
	sbc     _temp_y2
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	beq     L0603
	bcs     L0601
L0603:	ldx     #$00
	txa
	rts
;
; return 1;
;
L0601:	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init_system();
;
	jsr     _init_system
;
; init_title_loop();
;
	jsr     _init_title_loop
;
; if (game_mode == MODE_TITLE)
;
L0830:	lda     _game_mode
	bne     L0831
;
; title_loop();
;
	jsr     _title_loop
;
; if (game_mode == MODE_GAME)
;
L0831:	lda     _game_mode
	cmp     #$01
	bne     L0832
;
; game_loop();
;
	jsr     _game_loop
;
; if (game_mode == MODE_GAMEOVER)
;
L0832:	lda     _game_mode
	cmp     #$02
	bne     L0830
;
; gameover_loop();
;
	jsr     _gameover_loop
;
; while (1)
;
	jmp     L0830

.endproc

