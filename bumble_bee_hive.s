;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.import		_pad_poll_4score_1_3
	.import		_pad_poll_4score_2_4
	.export		_gamesprites_win
	.export		_gamesprites_empty
	.export		_gamesprites_smallbee1left0_data
	.export		_gamesprites_smallbee2left0_data
	.export		_gamesprites_smallbeeleft1_data
	.export		_gamesprites_smallbee2left1_data
	.export		_gamesprites_smallbeeleft2_data
	.export		_gamesprites_smallbee2left2_data
	.export		_gamesprites_smallbeeright0_data
	.export		_gamesprites_smallbeeright1_data
	.export		_gamesprites_smallbeeright2_data
	.export		_gamesprites_smallbee2right0_data
	.export		_gamesprites_smallbee2right1_data
	.export		_gamesprites_smallbee2right2_data
	.export		_gamesprites_bigbeeleft0_data
	.export		_gamesprites_bigbeeleft1_data
	.export		_gamesprites_bigbeeleft2_data
	.export		_gamesprites_bigbeeright0_data
	.export		_gamesprites_bigbeeright1_data
	.export		_gamesprites_bigbeeright2_data
	.export		_gamesprites_bigbee2left0_data
	.export		_gamesprites_bigbee2left1_data
	.export		_gamesprites_bigbee2left2_data
	.export		_gamesprites_bigbee2right0_data
	.export		_gamesprites_bigbee2right1_data
	.export		_gamesprites_bigbee2right2_data
	.export		_gamesprites_smallduck1left0_data
	.export		_gamesprites_smallduckleft1_data
	.export		_gamesprites_smallduckleft2_data
	.export		_gamesprites_smallduck2left0_data
	.export		_gamesprites_smallduck2left1_data
	.export		_gamesprites_smallduck2left2_data
	.export		_gamesprites_smallduck1right0_data
	.export		_gamesprites_smallduckright1_data
	.export		_gamesprites_smallduckright2_data
	.export		_gamesprites_smallduck2right0_data
	.export		_gamesprites_smallduck2right1_data
	.export		_gamesprites_smallduck2right2_data
	.export		_gamesprites_powerup_data
	.export		_gamesprites_big3_data
	.export		_gamesprites_big2_data
	.export		_gamesprites_big1_data
	.export		_gamesprites_blank_data
	.export		_doublepad
	.export		_generic_pad
	.export		_turbo_p1
	.export		_turbo_p2
	.export		_turbo_p3
	.export		_turbo_p4
	.export		_prev_pad1
	.export		_prev_pad2
	.export		_prev_pad3
	.export		_prev_pad4
	.export		_pad1
	.export		_pad2
	.export		_pad3
	.export		_pad4
	.export		_game_mode
	.export		_winner
	.export		_game_frame_timer
	.export		_game_timer
	.export		_speed_option
	.export		_current_speed
	.export		_force_redraw
	.export		_use_turbo
	.export		_turbo_amount
	.export		_ducks_go_faster_over_time
	.export		_map_positions
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_tempint
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_hero_velocity_x
	.export		_hero_velocity_y
	.export		_old_x
	.export		_old_y
	.export		_temp
	.export		_temp_x
	.export		_temp_y
	.export		_temp_x2
	.export		_temp_y2
	.export		_largeindex
	.export		_song
	.export		_bit_index
	.export		_bit_offset
	.export		_frame_counter
	.export		_ai_counter
	.export		_current_player
	.export		_team1_score
	.export		_team2_score
	.export		_team1_wins
	.export		_team2_wins
	.export		_win_reason
	.export		_powerup1
	.export		_powerup2
	.export		_powerup3
	.export		_powerup4
	.export		_bee1_bigbee_timer
	.export		_bee3_bigbee_timer
	.export		_sprite_rotation
	.export		_anim_frame_1
	.export		_anim_frame_2
	.export		_anim_frame_3
	.export		_anim_frame_4
	.export		_consumed_dots
	.export		_start_hold_timer
	.export		_start_held
	.export		_combmapwoflowers
	.export		_settings
	.export		_title
	.export		_Generic
	.export		_GenericBoxGuy
	.export		_BoxGuy1
	.export		_BoxGuy2
	.export		_BoxGuy3
	.export		_BoxGuy4
	.export		_palette_bg
	.export		_palette_sp
	.export		_palette_title_bg
	.export		_palette_options_bg
	.export		_palette_combsandplants_bg
	.export		_palette_bg_combmap
	.export		_palette_outdoors_bg
	.export		_metatiles1
	.export		_load_room
	.export		_draw_sprites
	.export		_draw_player_1
	.export		_draw_player_2
	.export		_draw_player_3
	.export		_draw_player_4
	.export		_movement
	.export		_check_tile_and_collect
	.export		_debug_extras
	.export		_read_controllers
	.export		_seeker_ai
	.export		_chaser_ai
	.export		_game_loop
	.export		_title_loop
	.export		_options_loop
	.export		_gameover_loop
	.export		_init_game_loop
	.export		_init_options_loop
	.export		_init_gameover_loop
	.export		_init_title_loop
	.export		_init_system
	.export		_clear_background
	.export		_update_hud
	.export		_init_roundover
	.export		_start_round
	.export		_roundover_loop
	.export		_bg_collision_sub
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_sprite_collision
	.export		_check_powerup_collision
	.export		_main
	.export		_pellet_tiles
	.export		_blank_tiles
	.export		_is_dot_consumed
	.export		_mark_dot_consumed

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$2800
	.res	2,$00
_BoxGuy2:
	.word	$8000
	.word	$3000
	.res	2,$00
_BoxGuy3:
	.word	$A000
	.word	$3000
	.res	2,$00
_BoxGuy4:
	.word	$C000
	.word	$4000
	.res	2,$00

.segment	"RODATA"

_gamesprites_win:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$00
	.byte	$80
_gamesprites_empty:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$00
	.byte	$80
_gamesprites_smallbee1left0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$01
	.byte	$80
_gamesprites_smallbeeleft1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$01
	.byte	$80
_gamesprites_smallbeeleft2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$01
	.byte	$80
_gamesprites_smallbeeright0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$28
	.byte	$40
	.byte	$80
_gamesprites_smallbeeright1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$2A
	.byte	$40
	.byte	$80
_gamesprites_smallbeeright2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$2C
	.byte	$40
	.byte	$80
_gamesprites_smallbee2right0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$28
	.byte	$41
	.byte	$80
_gamesprites_smallbee2right1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$2A
	.byte	$41
	.byte	$80
_gamesprites_smallbee2right2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$2C
	.byte	$41
	.byte	$80
_gamesprites_bigbeeleft0_data:
	.byte	$FE
	.byte	$FE
	.byte	$47
	.byte	$00
	.byte	$FE
	.byte	$FA
	.byte	$37
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$48
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$38
	.byte	$00
	.byte	$80
_gamesprites_bigbeeleft1_data:
	.byte	$FE
	.byte	$FE
	.byte	$49
	.byte	$00
	.byte	$02
	.byte	$FA
	.byte	$39
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$3A
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$4A
	.byte	$00
	.byte	$80
_gamesprites_bigbeeleft2_data:
	.byte	$FE
	.byte	$FE
	.byte	$4B
	.byte	$00
	.byte	$FE
	.byte	$FA
	.byte	$3B
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$3C
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$4C
	.byte	$00
	.byte	$80
_gamesprites_bigbeeright0_data:
	.byte	$06
	.byte	$FE
	.byte	$47
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$37
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$48
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$38
	.byte	$40
	.byte	$80
_gamesprites_bigbeeright1_data:
	.byte	$06
	.byte	$FE
	.byte	$49
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$39
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$3A
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$4A
	.byte	$40
	.byte	$80
_gamesprites_bigbeeright2_data:
	.byte	$06
	.byte	$FE
	.byte	$4B
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$3B
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$3C
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$4C
	.byte	$40
	.byte	$80
_gamesprites_bigbee2left0_data:
	.byte	$FE
	.byte	$FE
	.byte	$47
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$37
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$48
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$38
	.byte	$01
	.byte	$80
_gamesprites_bigbee2left1_data:
	.byte	$FE
	.byte	$FE
	.byte	$49
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$39
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$3A
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$4A
	.byte	$01
	.byte	$80
_gamesprites_bigbee2left2_data:
	.byte	$FE
	.byte	$FE
	.byte	$4B
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$3B
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$3C
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$4C
	.byte	$01
	.byte	$80
_gamesprites_bigbee2right0_data:
	.byte	$06
	.byte	$FE
	.byte	$47
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$37
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$48
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$38
	.byte	$41
	.byte	$80
_gamesprites_bigbee2right1_data:
	.byte	$06
	.byte	$FE
	.byte	$49
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$39
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$3A
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$4A
	.byte	$41
	.byte	$80
_gamesprites_bigbee2right2_data:
	.byte	$06
	.byte	$FE
	.byte	$4B
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$3B
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$3C
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$4C
	.byte	$41
	.byte	$80
_gamesprites_smallduck1left0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$02
	.byte	$80
_gamesprites_smallduckleft1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$02
	.byte	$80
_gamesprites_smallduckleft2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$42
	.byte	$80
_gamesprites_smallduck2left0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$03
	.byte	$80
_gamesprites_smallduck2left1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$03
	.byte	$80
_gamesprites_smallduck2left2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$43
	.byte	$80
_gamesprites_smallduck1right0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$02
	.byte	$80
_gamesprites_smallduckright1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$02
	.byte	$80
_gamesprites_smallduckright2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$42
	.byte	$80
_gamesprites_smallduck2right0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$03
	.byte	$80
_gamesprites_smallduck2right1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$03
	.byte	$80
_gamesprites_smallduck2right2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$43
	.byte	$80
_gamesprites_powerup_data:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$80
_gamesprites_big3_data:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$15
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$07
	.byte	$83
	.byte	$10
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_big2_data:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$07
	.byte	$83
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$07
	.byte	$43
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$07
	.byte	$C3
	.byte	$08
	.byte	$20
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$05
	.byte	$43
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_big1_data:
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$05
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$05
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$17
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_blank_data:
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$03
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$43
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$43
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$C3
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_combmapwoflowers:
	.byte	$A7
	.byte	$B6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$EE
	.byte	$EF
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$AB
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$B6
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A8
	.byte	$5E
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5B
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$EE
	.byte	$EF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EE
	.byte	$EF
	.byte	$EE
	.byte	$EF
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$B6
	.byte	$B8
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$DE
	.byte	$DF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B8
	.byte	$CA
	.byte	$C8
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C8
	.byte	$C8
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C9
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C9
	.byte	$B8
	.byte	$B8
	.byte	$FB
	.byte	$A7
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C9
	.byte	$BE
	.byte	$BF
	.byte	$EB
	.byte	$B6
	.byte	$CC
	.byte	$CB
	.byte	$DD
	.byte	$DF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C8
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$FB
	.byte	$B6
	.byte	$CC
	.byte	$CF
	.byte	$C6
	.byte	$8C
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$8D
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EB
	.byte	$CA
	.byte	$C6
	.byte	$EB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$A7
	.byte	$C6
	.byte	$EA
	.byte	$B6
	.byte	$CB
	.byte	$DF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$8F
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FA
	.byte	$B8
	.byte	$DF
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$9C
	.byte	$CA
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$CA
	.byte	$C8
	.byte	$A7
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C7
	.byte	$EB
	.byte	$B9
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$8F
	.byte	$C6
	.byte	$C9
	.byte	$8E
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$ED
	.byte	$BF
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FD
	.byte	$DF
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$FB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C8
	.byte	$C8
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$A7
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FB
	.byte	$B6
	.byte	$BE
	.byte	$EC
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C7
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$DE
	.byte	$DF
	.byte	$C8
	.byte	$EB
	.byte	$B6
	.byte	$DE
	.byte	$FC
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$BE
	.byte	$BF
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$9C
	.byte	$9C
	.byte	$F8
	.byte	$F9
	.byte	$C7
	.byte	$EA
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FA
	.byte	$B6
	.byte	$B6
	.byte	$EA
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$E8
	.byte	$E9
	.byte	$C6
	.byte	$EB
	.byte	$99
	.byte	$A7
	.byte	$FA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EA
	.byte	$C6
	.byte	$ED
	.byte	$BC
	.byte	$DC
	.byte	$EC
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$ED
	.byte	$BC
	.byte	$DC
	.byte	$EC
	.byte	$C9
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FB
	.byte	$C6
	.byte	$FA
	.byte	$C6
	.byte	$FD
	.byte	$BB
	.byte	$CB
	.byte	$FC
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FD
	.byte	$BB
	.byte	$CB
	.byte	$FC
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$9E
	.byte	$FB
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$A7
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$AB
	.byte	$B6
	.byte	$EB
	.byte	$B8
	.byte	$B8
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$EB
	.byte	$A7
	.byte	$A7
	.byte	$FB
	.byte	$B8
	.byte	$B8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$CD
	.byte	$BC
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$A8
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$DB
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$AF
	.byte	$B6
	.byte	$A7
	.byte	$B9
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B7
	.byte	$A8
	.byte	$DE
	.byte	$DD
	.byte	$DD
	.byte	$DF
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$00
	.byte	$0C
	.byte	$0F
	.byte	$07
	.byte	$0D
	.byte	$0F
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_settings:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$C1
	.byte	$C2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C5
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C2
	.byte	$C5
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$F2
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$B5
	.byte	$53
	.byte	$45
	.byte	$54
	.byte	$54
	.byte	$49
	.byte	$4E
	.byte	$47
	.byte	$53
	.byte	$B5
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D3
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$A0
	.byte	$A1
	.byte	$C2
	.byte	$C1
	.byte	$F2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$A0
	.byte	$A1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$0A
	.byte	$8A
	.byte	$AA
	.byte	$AA
	.byte	$29
	.byte	$0B
	.byte	$8A
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C8
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$06
	.byte	$0A
	.byte	$0A
_title:
	.byte	$BE
	.byte	$BF
	.byte	$8C
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A9
	.byte	$A7
	.byte	$BE
	.byte	$CD
	.byte	$BF
	.byte	$CE
	.byte	$CF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$BB
	.byte	$CF
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$8D
	.byte	$B6
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$A7
	.byte	$9C
	.byte	$A7
	.byte	$B6
	.byte	$BE
	.byte	$E7
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$99
	.byte	$DE
	.byte	$D8
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$8D
	.byte	$B6
	.byte	$DE
	.byte	$D8
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$DE
	.byte	$DB
	.byte	$D7
	.byte	$8D
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DD
	.byte	$D8
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$8D
	.byte	$D9
	.byte	$DB
	.byte	$BF
	.byte	$B6
	.byte	$A7
	.byte	$9C
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$9E
	.byte	$B6
	.byte	$B6
	.byte	$9D
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$DA
	.byte	$BF
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B4
	.byte	$D9
	.byte	$DF
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$8E
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$9F
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$B6
	.byte	$D2
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$D1
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$AB
	.byte	$A7
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$A7
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A8
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A9
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$A9
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$99
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$A7
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$B4
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A4
	.byte	$D2
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$D1
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B8
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$99
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B5
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$53
	.byte	$B6
	.byte	$B6
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$B5
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A9
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$3B
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$35
	.byte	$B6
	.byte	$42
	.byte	$52
	.byte	$49
	.byte	$41
	.byte	$4E
	.byte	$B6
	.byte	$3C
	.byte	$B6
	.byte	$41
	.byte	$4C
	.byte	$41
	.byte	$4E
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$CE
	.byte	$CF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$A7
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$BF
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$CE
	.byte	$CF
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$35
	.byte	$26
	.byte	$07
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$21
	.byte	$16
	.byte	$30
_palette_sp:
	.byte	$0F
	.byte	$17
	.byte	$26
	.byte	$38
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$38
	.byte	$0F
	.byte	$17
	.byte	$20
	.byte	$26
	.byte	$0F
	.byte	$0C
	.byte	$20
	.byte	$2C
_palette_title_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$07
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$21
	.byte	$11
_palette_options_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$24
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$27
	.byte	$2A
	.byte	$1B
_palette_combsandplants_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$1A
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$21
	.byte	$15
	.byte	$30
_palette_bg_combmap:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$21
	.byte	$16
	.byte	$30
_palette_outdoors_bg:
	.byte	$0F
	.byte	$30
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$35
	.byte	$26
	.byte	$07
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$21
	.byte	$11
_metatiles1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_pellet_tiles:
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
_blank_tiles:
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
L1A3B:
	.byte	$54,$45,$41,$4D,$20,$32,$20,$57,$49,$4E,$53,$20,$54,$48,$45,$20
	.byte	$4D,$41,$54,$43,$48,$21,$00
L1A2E:
	.byte	$54,$45,$41,$4D,$20,$31,$20,$57,$49,$4E,$53,$20,$54,$48,$45,$20
	.byte	$4D,$41,$54,$43,$48,$21,$00
L19E4:
	.byte	$43,$4F,$4C,$4C,$45,$43,$54,$45,$44,$20,$31,$30,$30,$20,$44,$4F
	.byte	$54,$53,$00
L19F1:
	.byte	$46,$52,$49,$45,$4E,$44,$4C,$59,$20,$42,$45,$45,$20,$45,$41,$54
	.byte	$45,$4E,$00
L1A0B:
	.byte	$42,$49,$47,$42,$45,$45,$20,$41,$54,$45,$20,$44,$55,$43,$4B,$21
	.byte	$00
L19FE:
	.byte	$45,$4E,$45,$4D,$59,$20,$42,$45,$45,$20,$45,$41,$54,$45,$4E,$00
L19CB:
	.byte	$54,$45,$41,$4D,$20,$31,$20,$57,$49,$4E,$53,$21,$00
L19D8:
	.byte	$54,$45,$41,$4D,$20,$32,$20,$57,$49,$4E,$53,$21,$00
L1A45:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00
L1A16:
	.byte	$54,$49,$4D,$45,$20,$55,$50,$21,$00
L1986:
	.byte	$20,$20,$46,$41,$53,$54,$20,$00
L196D:
	.byte	$20,$20,$53,$4C,$4F,$57,$20,$00
L197B:
	.byte	$52,$45,$47,$55,$4C,$41,$52,$00
L19AE:
	.byte	$46,$52,$45,$4E,$5A,$59,$00
L19A4:
	.byte	$4D,$55,$53,$49,$43,$3A,$00
L1960:
	.byte	$53,$50,$45,$45,$44,$3A,$00
L1990:
	.byte	$4D,$41,$50,$3A,$00
L199A:
	.byte	$48,$49,$56,$45,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_doublepad:
	.res	2,$00
_generic_pad:
	.res	1,$00
_turbo_p1:
	.res	1,$00
_turbo_p2:
	.res	1,$00
_turbo_p3:
	.res	1,$00
_turbo_p4:
	.res	1,$00
_prev_pad1:
	.res	1,$00
_prev_pad2:
	.res	1,$00
_prev_pad3:
	.res	1,$00
_prev_pad4:
	.res	1,$00
_pad1:
	.res	1,$00
_pad2:
	.res	1,$00
_pad3:
	.res	1,$00
_pad4:
	.res	1,$00
_game_mode:
	.res	1,$00
_winner:
	.res	1,$00
_game_frame_timer:
	.res	1,$00
_game_timer:
	.res	1,$00
_speed_option:
	.res	2,$00
_current_speed:
	.res	2,$00
_force_redraw:
	.res	1,$00
_use_turbo:
	.res	1,$00
_turbo_amount:
	.res	1,$00
_ducks_go_faster_over_time:
	.res	1,$00
_map_positions:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_tempint:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_hero_velocity_x:
	.res	2,$00
_hero_velocity_y:
	.res	2,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp_x2:
	.res	1,$00
_temp_y2:
	.res	1,$00
_largeindex:
	.res	2,$00
_song:
	.res	1,$00
_bit_index:
	.res	1,$00
_bit_offset:
	.res	1,$00
_frame_counter:
	.res	1,$00
_ai_counter:
	.res	1,$00
_current_player:
	.res	1,$00
_team1_score:
	.res	1,$00
_team2_score:
	.res	1,$00
_team1_wins:
	.res	1,$00
_team2_wins:
	.res	1,$00
_win_reason:
	.res	1,$00
_powerup1:
	.res	1,$00
_powerup2:
	.res	1,$00
_powerup3:
	.res	1,$00
_powerup4:
	.res	1,$00
_bee1_bigbee_timer:
	.res	1,$00
_bee3_bigbee_timer:
	.res	1,$00
_sprite_rotation:
	.res	1,$00
_anim_frame_1:
	.res	1,$00
_anim_frame_2:
	.res	1,$00
_anim_frame_3:
	.res	1,$00
_anim_frame_4:
	.res	1,$00
.segment	"BSS"
_consumed_dots:
	.res	128,$00
_start_hold_timer:
	.res	1,$00
_start_held:
	.res	1,$00
_Generic:
	.res	4,$00
_GenericBoxGuy:
	.res	6,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	lda     #$00
	sta     _largeindex
	sta     _largeindex+1
L1185:	ldx     _largeindex+1
	cpx     #$04
	bcs     L1186
;
; if(game_mode == MODE_TITLE){
;
	lda     _game_mode
	bne     L1A93
;
; vram_put(title[largeindex]);
;
	lda     #<(_title)
	sta     ptr1
	lda     #>(_title)
;
; } else if (game_mode == MODE_OPTIONS){
;
	jmp     L1A98
L1A93:	lda     _game_mode
	cmp     #$01
	bne     L1194
;
; vram_put(settings[largeindex]);
;
	lda     #<(_settings)
	sta     ptr1
	lda     #>(_settings)
;
; } else{
;
	jmp     L1A98
;
; vram_put(combmapwoflowers[largeindex]);
;
L1194:	lda     #<(_combmapwoflowers)
	sta     ptr1
	lda     #>(_combmapwoflowers)
L1A98:	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	inc     _largeindex
	bne     L1185
	inc     _largeindex+1
	jmp     L1185
;
; ppu_on_all();
;
L1186:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; if(powerup1 == 1)
;
	lda     _powerup1
	cmp     #$01
	bne     L1A99
;
; oam_meta_spr(16, 32, gamesprites_powerup_data);
;
	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup2 == 1)
;
L1A99:	lda     _powerup2
	cmp     #$01
	bne     L1A9A
;
; oam_meta_spr(226, 32, gamesprites_powerup_data);
;
	jsr     decsp2
	lda     #$E2
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup3 == 1)
;
L1A9A:	lda     _powerup3
	cmp     #$01
	bne     L1A9B
;
; oam_meta_spr(16, 208, gamesprites_powerup_data);
;
	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup4 == 1)
;
L1A9B:	lda     _powerup4
	cmp     #$01
	bne     L1A9C
;
; oam_meta_spr(226, 208, gamesprites_powerup_data);
;
	jsr     decsp2
	lda     #$E2
	ldy     #$01
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; switch(sprite_rotation & 0x03) { // Use only bottom 2 bits for 4 different orders
;
L1A9C:	lda     _sprite_rotation
	and     #$03
;
; }
;
	beq     L11BD
	cmp     #$01
	beq     L11C3
	cmp     #$02
	beq     L11C9
	cmp     #$03
	beq     L11CF
	rts
;
; draw_player_1();
;
L11BD:	jsr     _draw_player_1
;
; draw_player_2();
;
	jsr     _draw_player_2
;
; draw_player_3();
;
	jsr     _draw_player_3
;
; draw_player_4();
;
	jmp     _draw_player_4
;
; draw_player_2();
;
L11C3:	jsr     _draw_player_2
;
; draw_player_1();
;
	jsr     _draw_player_1
;
; draw_player_4();
;
	jsr     _draw_player_4
;
; draw_player_3();
;
	jmp     _draw_player_3
;
; draw_player_3();
;
L11C9:	jsr     _draw_player_3
;
; draw_player_4();
;
	jsr     _draw_player_4
;
; draw_player_1();
;
	jsr     _draw_player_1
;
; draw_player_2();
;
	jmp     _draw_player_2
;
; draw_player_4();
;
L11CF:	jsr     _draw_player_4
;
; draw_player_3();
;
	jsr     _draw_player_3
;
; draw_player_2();
;
	jsr     _draw_player_2
;
; draw_player_1();
;
	jmp     _draw_player_1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_1 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_1: near

.segment	"CODE"

;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if ((frame_counter % 10) == 0) {
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L11D9
	cmp     #$00
	bne     L11D9
;
; anim_frame_1 = (anim_frame_1 + 1) % 3;
;
	lda     _anim_frame_1
	clc
	adc     #$01
	bcc     L11E0
	inx
L11E0:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_1
;
; if (bee1_bigbee_timer > 0) {
;
L11D9:	lda     _bee1_bigbee_timer
	jeq     L1AA0
;
; if(bee1_bigbee_timer < 5){
;
	cmp     #$05
	bcs     L1A9D
;
; if ((frame_counter % 4) < 2) {
;
	lda     _frame_counter
	and     #$03
	cmp     #$02
;
; return; // Skip drawing this frame
;
	bcs     L1A9D
;
; }
;
	rts
;
; if (BoxGuy1.direction == DIR_LEFT) {
;
L1A9D:	lda     _BoxGuy1+4
	cmp     #$02
	bne     L1A9E
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L11EF
	cmp     #$01
	beq     L11F5
	cmp     #$02
	beq     L11FB
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft0_data); break;
;
L11EF:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft0_data)
	ldx     #>(_gamesprites_bigbeeleft0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft1_data); break;
;
L11F5:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft1_data)
	ldx     #>(_gamesprites_bigbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft2_data); break;
;
L11FB:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft2_data)
	ldx     #>(_gamesprites_bigbeeleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy1.direction == DIR_RIGHT) {
;
L1A9E:	lda     _BoxGuy1+4
	cmp     #$03
	bne     L1A9F
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L1207
	cmp     #$01
	beq     L120D
	cmp     #$02
	beq     L1213
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright0_data); break;
;
L1207:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright0_data)
	ldx     #>(_gamesprites_bigbeeright0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright1_data); break;
;
L120D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright1_data)
	ldx     #>(_gamesprites_bigbeeright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright2_data); break;
;
L1213:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright2_data)
	ldx     #>(_gamesprites_bigbeeright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_1) {
;
L1A9F:	lda     _anim_frame_1
;
; }
;
	beq     L121D
	cmp     #$01
	beq     L1223
	cmp     #$02
	beq     L1229
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft0_data); break;
;
L121D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft0_data)
	ldx     #>(_gamesprites_bigbeeleft0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft1_data); break;
;
L1223:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft1_data)
	ldx     #>(_gamesprites_bigbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft2_data); break;
;
L1229:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft2_data)
	ldx     #>(_gamesprites_bigbeeleft2_data)
	jmp     _oam_meta_spr
;
; if (BoxGuy1.direction == DIR_LEFT) {
;
L1AA0:	lda     _BoxGuy1+4
	cmp     #$02
	bne     L1AA1
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L1235
	cmp     #$01
	beq     L123B
	cmp     #$02
	beq     L1241
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee1left0_data); break;
;
L1235:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee1left0_data)
	ldx     #>(_gamesprites_smallbee1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft1_data); break;
;
L123B:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft1_data)
	ldx     #>(_gamesprites_smallbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft2_data); break;
;
L1241:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft2_data)
	ldx     #>(_gamesprites_smallbeeleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy1.direction == DIR_RIGHT) {
;
L1AA1:	lda     _BoxGuy1+4
	cmp     #$03
	bne     L1AA2
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L124D
	cmp     #$01
	beq     L1253
	cmp     #$02
	beq     L1259
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright0_data); break;
;
L124D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright0_data)
	ldx     #>(_gamesprites_smallbeeright0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright1_data); break;
;
L1253:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright1_data)
	ldx     #>(_gamesprites_smallbeeright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright2_data); break;
;
L1259:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright2_data)
	ldx     #>(_gamesprites_smallbeeright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_1) {
;
L1AA2:	lda     _anim_frame_1
;
; }
;
	beq     L1263
	cmp     #$01
	beq     L1269
	cmp     #$02
	beq     L126F
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee1left0_data); break;
;
L1263:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee1left0_data)
	ldx     #>(_gamesprites_smallbee1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft1_data); break;
;
L1269:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft1_data)
	ldx     #>(_gamesprites_smallbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft2_data); break;
;
L126F:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft2_data)
	ldx     #>(_gamesprites_smallbeeleft2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_2: near

.segment	"CODE"

;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if ((frame_counter % 10) == 0 && BoxGuy2.moving) {
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L1AA3
	cmp     #$00
	bne     L1AA3
	lda     _BoxGuy2+5
	beq     L1AA3
;
; anim_frame_2 = (anim_frame_2 + 1) % 3;
;
	lda     _anim_frame_2
	clc
	adc     #$01
	bcc     L1282
	inx
L1282:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_2
;
; if (BoxGuy2.direction == DIR_LEFT) {
;
L1AA3:	lda     _BoxGuy2+4
	cmp     #$02
	bne     L1AA4
;
; switch(anim_frame_2) { 
;
	lda     _anim_frame_2
;
; }
;
	beq     L1289
	cmp     #$01
	beq     L128F
	cmp     #$02
	beq     L1295
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1left0_data); break;
;
L1289:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1left0_data)
	ldx     #>(_gamesprites_smallduck1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft1_data); break;
;
L128F:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft1_data)
	ldx     #>(_gamesprites_smallduckleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft2_data); break;
;
L1295:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft2_data)
	ldx     #>(_gamesprites_smallduckleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy2.direction == DIR_RIGHT) {
;
L1AA4:	lda     _BoxGuy2+4
	cmp     #$03
	bne     L1AA5
;
; switch(anim_frame_2) {
;
	lda     _anim_frame_2
;
; }
;
	beq     L12A1
	cmp     #$01
	beq     L12A7
	cmp     #$02
	beq     L12AD
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1right0_data); break;
;
L12A1:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1right0_data)
	ldx     #>(_gamesprites_smallduck1right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckright1_data); break;
;
L12A7:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckright1_data)
	ldx     #>(_gamesprites_smallduckright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckright2_data); break;
;
L12AD:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckright2_data)
	ldx     #>(_gamesprites_smallduckright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_2) {
;
L1AA5:	lda     _anim_frame_2
;
; }
;
	beq     L12B7
	cmp     #$01
	beq     L12BD
	cmp     #$02
	beq     L12C3
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1left0_data); break;
;
L12B7:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1left0_data)
	ldx     #>(_gamesprites_smallduck1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft1_data); break;
;
L12BD:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft1_data)
	ldx     #>(_gamesprites_smallduckleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft2_data); break;
;
L12C3:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft2_data)
	ldx     #>(_gamesprites_smallduckleft2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_3 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_3: near

.segment	"CODE"

;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if ((frame_counter % 10) == 0) {
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L12CD
	cmp     #$00
	bne     L12CD
;
; anim_frame_3 = (anim_frame_3 + 1) % 3;
;
	lda     _anim_frame_3
	clc
	adc     #$01
	bcc     L12D4
	inx
L12D4:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_3
;
; if (bee3_bigbee_timer > 0) {
;
L12CD:	lda     _bee3_bigbee_timer
	jeq     L1AAA
;
; if(bee3_bigbee_timer < 5){
;
	cmp     #$05
	bcs     L1AA7
;
; if ((frame_counter % 4) < 2) {
;
	lda     _frame_counter
	and     #$03
	cmp     #$02
;
; return; // Skip drawing this frame
;
	bcs     L1AA7
;
; }
;
	rts
;
; if (BoxGuy3.direction == DIR_LEFT) {
;
L1AA7:	lda     _BoxGuy3+4
	cmp     #$02
	bne     L1AA8
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L12E3
	cmp     #$01
	beq     L12E9
	cmp     #$02
	beq     L12EF
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left0_data); break;
;
L12E3:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left0_data)
	ldx     #>(_gamesprites_bigbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left1_data); break;
;
L12E9:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left1_data)
	ldx     #>(_gamesprites_bigbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left2_data); break;
;
L12EF:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left2_data)
	ldx     #>(_gamesprites_bigbee2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy3.direction == DIR_RIGHT) {
;
L1AA8:	lda     _BoxGuy3+4
	cmp     #$03
	bne     L1AA9
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L12FB
	cmp     #$01
	beq     L1301
	cmp     #$02
	beq     L1307
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right0_data); break;
;
L12FB:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right0_data)
	ldx     #>(_gamesprites_bigbee2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right1_data); break;
;
L1301:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right1_data)
	ldx     #>(_gamesprites_bigbee2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right2_data); break;
;
L1307:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right2_data)
	ldx     #>(_gamesprites_bigbee2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_3) {
;
L1AA9:	lda     _anim_frame_3
;
; }
;
	beq     L1311
	cmp     #$01
	beq     L1317
	cmp     #$02
	beq     L131D
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left0_data); break;
;
L1311:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left0_data)
	ldx     #>(_gamesprites_bigbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left1_data); break;
;
L1317:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left1_data)
	ldx     #>(_gamesprites_bigbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left2_data); break;
;
L131D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left2_data)
	ldx     #>(_gamesprites_bigbee2left2_data)
	jmp     _oam_meta_spr
;
; if (BoxGuy3.direction == DIR_LEFT) {
;
L1AAA:	lda     _BoxGuy3+4
	cmp     #$02
	bne     L1AAB
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L1329
	cmp     #$01
	beq     L132F
	cmp     #$02
	beq     L1335
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left0_data); break;
;
L1329:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left0_data)
	ldx     #>(_gamesprites_smallbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left1_data); break;
;
L132F:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left1_data)
	ldx     #>(_gamesprites_smallbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left2_data); break;
;
L1335:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left2_data)
	ldx     #>(_gamesprites_smallbee2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy3.direction == DIR_RIGHT) {
;
L1AAB:	lda     _BoxGuy3+4
	cmp     #$03
	bne     L1AAC
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L1341
	cmp     #$01
	beq     L1347
	cmp     #$02
	beq     L134D
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right0_data); break;
;
L1341:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right0_data)
	ldx     #>(_gamesprites_smallbee2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right1_data); break;
;
L1347:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right1_data)
	ldx     #>(_gamesprites_smallbee2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right2_data); break;
;
L134D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right2_data)
	ldx     #>(_gamesprites_smallbee2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_3) {
;
L1AAC:	lda     _anim_frame_3
;
; }
;
	beq     L1357
	cmp     #$01
	beq     L135D
	cmp     #$02
	beq     L1363
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left0_data); break;
;
L1357:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left0_data)
	ldx     #>(_gamesprites_smallbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left1_data); break;
;
L135D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left1_data)
	ldx     #>(_gamesprites_smallbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left2_data); break;
;
L1363:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left2_data)
	ldx     #>(_gamesprites_smallbee2left2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_4 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_4: near

.segment	"CODE"

;
; temp_x = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if ((frame_counter % 10) == 0 && BoxGuy4.moving) {
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L1AAD
	cmp     #$00
	bne     L1AAD
	lda     _BoxGuy4+5
	beq     L1AAD
;
; anim_frame_4 = (anim_frame_4 + 1) % 3;
;
	lda     _anim_frame_4
	clc
	adc     #$01
	bcc     L1376
	inx
L1376:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_4
;
; if (BoxGuy4.direction == DIR_LEFT) {
;
L1AAD:	lda     _BoxGuy4+4
	cmp     #$02
	bne     L1AAE
;
; switch(anim_frame_4) {
;
	lda     _anim_frame_4
;
; }
;
	beq     L137D
	cmp     #$01
	beq     L1383
	cmp     #$02
	beq     L1389
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left0_data); break;
;
L137D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left0_data)
	ldx     #>(_gamesprites_smallduck2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left1_data); break;
;
L1383:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left1_data)
	ldx     #>(_gamesprites_smallduck2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left2_data); break;
;
L1389:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left2_data)
	ldx     #>(_gamesprites_smallduck2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy4.direction == DIR_RIGHT) {
;
L1AAE:	lda     _BoxGuy4+4
	cmp     #$03
	bne     L1AAF
;
; switch(anim_frame_4) {
;
	lda     _anim_frame_4
;
; }
;
	beq     L1395
	cmp     #$01
	beq     L139B
	cmp     #$02
	beq     L13A1
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right0_data); break;
;
L1395:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right0_data)
	ldx     #>(_gamesprites_smallduck2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right1_data); break;
;
L139B:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right1_data)
	ldx     #>(_gamesprites_smallduck2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right2_data); break;
;
L13A1:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right2_data)
	ldx     #>(_gamesprites_smallduck2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_4) {
;
L1AAF:	lda     _anim_frame_4
;
; }
;
	beq     L13AB
	cmp     #$01
	beq     L13B1
	cmp     #$02
	beq     L13B7
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left0_data); break;
;
L13AB:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left0_data)
	ldx     #>(_gamesprites_smallduck2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left1_data); break;
;
L13B1:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left1_data)
	ldx     #>(_gamesprites_smallduck2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left2_data); break;
;
L13B7:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left2_data)
	ldx     #>(_gamesprites_smallduck2left2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _old_x+1
	lda     _GenericBoxGuy
	sta     _old_x
;
; if (generic_pad & PAD_A) {
;
	lda     _generic_pad
	and     #$80
	beq     L1447
;
; if ((current_player == 1 && turbo_p1 > 0) ||
;
	lda     _current_player
	cmp     #$01
	bne     L1ABC
	lda     _turbo_p1
	bne     L1AE8
;
; (current_player == 2 && turbo_p2 > 0) ||
;
L1ABC:	lda     _current_player
	cmp     #$02
	bne     L1ABF
	lda     _turbo_p2
	bne     L1AE8
;
; (current_player == 3 && turbo_p3 > 0) ||
;
L1ABF:	lda     _current_player
	cmp     #$03
	bne     L1AC2
	lda     _turbo_p3
	bne     L1AE8
;
; (current_player == 4 && turbo_p4 > 0)) {
;
L1AC2:	lda     _current_player
	cmp     #$04
	bne     L1447
	lda     _turbo_p4
	beq     L1447
L1AE8:	lda     #$01
;
; use_turbo = 1;
;
	sta     _use_turbo
;
; switch(current_player) {
;
	lda     _current_player
;
; }
;
	cmp     #$01
	beq     L1ACB
	cmp     #$02
	beq     L1ACC
	cmp     #$03
	beq     L1ACD
	cmp     #$04
	beq     L1ACE
	jmp     L1447
;
; case 1: turbo_p1--; break;
;
L1ACB:	dec     _turbo_p1
	jmp     L1447
;
; case 2: turbo_p2--; break;
;
L1ACC:	dec     _turbo_p2
	jmp     L1447
;
; case 3: turbo_p3--; break;
;
L1ACD:	dec     _turbo_p3
	jmp     L1447
;
; case 4: turbo_p4--; break;
;
L1ACE:	dec     _turbo_p4
;
; if(ducks_go_faster_over_time){
;
L1447:	lda     _ducks_go_faster_over_time
	beq     L1454
;
; if (current_player == 2 || current_player == 4) {
;
	lda     _current_player
	cmp     #$02
	beq     L1ACF
	cmp     #$04
	bne     L1454
;
; current_speed = speed_option;
;
L1ACF:	lda     _speed_option+1
	sta     _current_speed+1
	lda     _speed_option
	sta     _current_speed
;
; if(game_timer > 80) {
;
	lda     _game_timer
	cmp     #$51
	bcc     L1AD0
;
; current_speed -= DUCK_SPEED_LOW;
;
	lda     _current_speed
	sec
	sbc     #$14
	sta     _current_speed
	bcs     L1474
	dec     _current_speed+1
;
; } else if (game_timer > 20) {
;
	jmp     L1474
L1AD0:	lda     _game_timer
	cmp     #$15
;
; } else if (game_timer > 10) {
;
	bcs     L1454
	cmp     #$0B
	bcc     L1AD2
;
; current_speed += DUCK_SPEED_HIGH;
;
	lda     #$14
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L1474
	inc     _current_speed+1
;
; } else if (game_timer > 0) {
;
	jmp     L1474
L1AD2:	lda     _game_timer
	beq     L1474
;
; current_speed += DUCK_SPEED_MAX;
;
	lda     #$28
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L1474
	inc     _current_speed+1
;
; } else {
;
	jmp     L1474
;
; current_speed = speed_option; // feature disabled, all normal speed
;
L1454:	lda     _speed_option+1
	sta     _current_speed+1
	lda     _speed_option
	sta     _current_speed
;
; if (generic_pad & PAD_LEFT)
;
L1474:	lda     _generic_pad
	and     #$02
	beq     L1AD4
;
; hero_velocity_x = -current_speed;
;
	lda     _current_speed
	ldx     _current_speed+1
	jsr     negax
	sta     _hero_velocity_x
	stx     _hero_velocity_x+1
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L1AD3
;
; hero_velocity_x -= SPEED_TURBO_BOOST; // add turbo boost
;
	lda     _hero_velocity_x
	sec
	sbc     #$60
	sta     _hero_velocity_x
	bcs     L147F
	dec     _hero_velocity_x+1
;
; use_turbo = 0; // reset turbo flag
;
L147F:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_LEFT;
;
L1AD3:	lda     #$02
	sta     _GenericBoxGuy+4
;
; else if (generic_pad & PAD_RIGHT)
;
	jmp     L1492
L1AD4:	lda     _generic_pad
	and     #$01
	beq     L1AD7
;
; hero_velocity_x = current_speed;
;
	lda     _current_speed+1
	sta     _hero_velocity_x+1
	lda     _current_speed
	sta     _hero_velocity_x
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L1AD5
;
; hero_velocity_x += SPEED_TURBO_BOOST; // add turbo boost
;
	lda     #$60
	clc
	adc     _hero_velocity_x
	sta     _hero_velocity_x
	bcc     L148D
	inc     _hero_velocity_x+1
;
; use_turbo = 0; // reset turbo flag
;
L148D:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_RIGHT;
;
L1AD5:	lda     #$03
	sta     _GenericBoxGuy+4
;
; else
;
	jmp     L1492
;
; hero_velocity_x = 0;
;
L1AD7:	sta     _hero_velocity_x
	sta     _hero_velocity_x+1
;
; GenericBoxGuy.x += hero_velocity_x;
;
L1492:	lda     _hero_velocity_x
	clc
	adc     _GenericBoxGuy
	sta     _GenericBoxGuy
	lda     _hero_velocity_x+1
	adc     _GenericBoxGuy+1
	sta     _GenericBoxGuy+1
;
; if (GenericBoxGuy.x > 0xf000)
;
	lda     _GenericBoxGuy
	cmp     #$01
	lda     _GenericBoxGuy+1
	sbc     #$F0
	bcc     L1ADA
;
; if (old_x >= 0x8000)
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L1AD9
;
; GenericBoxGuy.x = 0xf000; // max right
;
	ldx     #$F0
;
; GenericBoxGuy.x = 0x0000; // max left
;
L1AD9:	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L1ADA:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$06
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; if (hero_velocity_x < 0)
;
	ldx     _hero_velocity_x+1
	cpx     #$80
	bcc     L14A8
;
; if (bg_coll_L())
;
	jsr     _bg_coll_L
;
; else if (hero_velocity_x > 0)
;
	jmp     L1AEF
L14A8:	lda     _hero_velocity_x
	cmp     #$01
	lda     _hero_velocity_x+1
	sbc     #$00
	bvs     L14B1
	eor     #$80
L14B1:	bpl     L14B2
;
; if (bg_coll_R())
;
	jsr     _bg_coll_R
L1AEF:	tax
	beq     L14B2
;
; GenericBoxGuy.x = old_x; // revert to old position
;
	lda     _old_x+1
	sta     _GenericBoxGuy+1
	lda     _old_x
	sta     _GenericBoxGuy
;
; old_y = GenericBoxGuy.y;
;
L14B2:	lda     _GenericBoxGuy+2+1
	sta     _old_y+1
	lda     _GenericBoxGuy+2
	sta     _old_y
;
; if (generic_pad & PAD_UP)
;
	lda     _generic_pad
	and     #$08
	beq     L1ADB
;
; hero_velocity_y = -current_speed;
;
	lda     _current_speed
	ldx     _current_speed+1
	jsr     negax
	sta     _hero_velocity_y
	stx     _hero_velocity_y+1
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L14CF
;
; hero_velocity_y -= SPEED_TURBO_BOOST; // add turbo boost
;
	lda     _hero_velocity_y
	sec
	sbc     #$60
	sta     _hero_velocity_y
	bcs     L14C0
	dec     _hero_velocity_y+1
;
; use_turbo = 0; // reset turbo flag
;
L14C0:	lda     #$00
	sta     _use_turbo
;
; else if (generic_pad & PAD_DOWN)
;
	jmp     L14CF
L1ADB:	lda     _generic_pad
	and     #$04
	beq     L1ADD
;
; hero_velocity_y = current_speed;
;
	lda     _current_speed+1
	sta     _hero_velocity_y+1
	lda     _current_speed
	sta     _hero_velocity_y
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L14CF
;
; hero_velocity_y += SPEED_TURBO_BOOST; // add turbo boost
;
	lda     #$60
	clc
	adc     _hero_velocity_y
	sta     _hero_velocity_y
	bcc     L14CC
	inc     _hero_velocity_y+1
;
; use_turbo = 0; // reset turbo flag
;
L14CC:	lda     #$00
	sta     _use_turbo
;
; else
;
	jmp     L14CF
;
; hero_velocity_y = 0;
;
L1ADD:	sta     _hero_velocity_y
	sta     _hero_velocity_y+1
;
; GenericBoxGuy.y += hero_velocity_y;
;
L14CF:	lda     _hero_velocity_y
	clc
	adc     _GenericBoxGuy+2
	sta     _GenericBoxGuy+2
	lda     _hero_velocity_y+1
	adc     _GenericBoxGuy+2+1
	sta     _GenericBoxGuy+2+1
;
; if (GenericBoxGuy.y > 0xe000)
;
	lda     _GenericBoxGuy+2
	cmp     #$01
	lda     _GenericBoxGuy+2+1
	sbc     #$E0
	bcc     L1AE0
;
; if (old_y >= 0x8000)
;
	lda     _old_y
	cmp     #$00
	lda     _old_y+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L1ADF
;
; GenericBoxGuy.y = 0xe000; // max down
;
	ldx     #$E0
;
; GenericBoxGuy.y = 0x0000; // max up
;
L1ADF:	sta     _GenericBoxGuy+2
	stx     _GenericBoxGuy+2+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L1AE0:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; if (hero_velocity_y < 0)
;
	ldx     _hero_velocity_y+1
	cpx     #$80
	bcc     L14E1
;
; if (bg_coll_U())
;
	jsr     _bg_coll_U
;
; else if (hero_velocity_y > 0)
;
	jmp     L1AF0
L14E1:	lda     _hero_velocity_y
	cmp     #$01
	lda     _hero_velocity_y+1
	sbc     #$00
	bvs     L14EA
	eor     #$80
L14EA:	bpl     L14EB
;
; if (bg_coll_D())
;
	jsr     _bg_coll_D
L1AF0:	tax
	beq     L14EB
;
; GenericBoxGuy.y = old_y; // revert to old position
;
	lda     _old_y+1
	sta     _GenericBoxGuy+2+1
	lda     _old_y
	sta     _GenericBoxGuy+2
;
; check_tile_and_collect();
;
L14EB:	jmp     _check_tile_and_collect

.endproc

; ---------------------------------------------------------------
; void __near__ check_tile_and_collect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tile_and_collect: near

.segment	"CODE"

;
; if (current_player != 1 && current_player != 3)
;
	ldx     #$00
	lda     _current_player
	cmp     #$01
	beq     L1AF6
	cmp     #$03
	beq     L1AF6
;
; return; // Chasers cannot collect dots
;
	rts
;
; temp_x = (Generic.x + 4) >> 3; // get this between 0-30
;
L1AF6:	lda     _Generic
	clc
	adc     #$04
	bcc     L1576
	inx
L1576:	jsr     shrax3
	sta     _temp_x
;
; temp_y = (Generic.y + 2) >> 3; // get this between 0-32
;
	ldx     #$00
	lda     _Generic+1
	clc
	adc     #$02
	bcc     L157A
	inx
L157A:	jsr     shrax3
	sta     _temp_y
;
; largeindex = (temp_y << 5) + temp_x;
;
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_x
	bcc     L1AF1
	inx
L1AF1:	sta     _largeindex
	stx     _largeindex+1
;
; temp = combmapwoflowers[largeindex];
;
	lda     #<(_combmapwoflowers)
	sta     ptr1
	lda     #>(_combmapwoflowers)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	sta     _temp
;
; for (index = 0; index < 5; index++)
;
	lda     #$00
	sta     _index
L1AF7:	lda     _index
	cmp     #$05
	bcc     L1AF9
;
; }
;
	rts
;
; if (temp == pellet_tiles[index])
;
L1AF9:	ldy     _index
	lda     _pellet_tiles,y
	cmp     _temp
	jne     L1589
;
; if (!is_dot_consumed(largeindex))
;
	lda     _largeindex
	ldx     _largeindex+1
	jsr     _is_dot_consumed
	tax
	beq     L1AFA
;
; }
;
	rts
;
; mark_dot_consumed(largeindex);
;
L1AFA:	lda     _largeindex
	ldx     _largeindex+1
	jsr     _mark_dot_consumed
;
; one_vram_buffer(blank_tiles[frame_counter % 5], NTADR_A(temp_x, temp_y));
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_blank_tiles)
	sta     ptr1+1
	ldy     #<(_blank_tiles)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _temp_x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; if (current_player == 1)
;
	lda     _current_player
	cmp     #$01
	bne     L1AF8
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; team1_score++;
;
	inc     _team1_score
;
; if (team1_score >= 100)
;
	lda     _team1_score
	cmp     #$64
	bcc     L15B2
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_DOTS;
;
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; else if (current_player == 3)
;
L1AF8:	lda     _current_player
	cmp     #$03
	bne     L1582
;
; sfx_play(SFX_TEAM2_DOT_COLLECT, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; team2_score++;
;
	inc     _team2_score
;
; if (team2_score >= 100)
;
	lda     _team2_score
	cmp     #$64
	bcc     L1582
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_DOTS;
;
	lda     #$00
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; break;
;
L15B2:	rts
;
; else if (temp == blank_tiles[index])
;
L1589:	ldy     _index
	lda     _blank_tiles,y
	cmp     _temp
;
; break;
;
	beq     L1582
;
; for (index = 0; index < 5; index++)
;
	inc     _index
	jmp     L1AF7
;
; }
;
L1582:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ debug_extras (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug_extras: near

.segment	"CODE"

;
; temp1 = (team1_score / 10) + 0x30;
;
	lda     _team1_score
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(6, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$26
	jsr     _one_vram_buffer
;
; temp1 = (team1_score % 10) + 0x30;
;
	lda     _team1_score
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(7, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$27
	jsr     _one_vram_buffer
;
; temp1 = (game_timer / 10) + 0x30;
;
	lda     _game_timer
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(15, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$2F
	jsr     _one_vram_buffer
;
; temp1 = (game_timer % 10) + 0x30;
;
	lda     _game_timer
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(16, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$30
	jsr     _one_vram_buffer
;
; temp1 = (team2_score / 10) + 0x30;
;
	lda     _team2_score
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(23, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$37
	jsr     _one_vram_buffer
;
; temp1 = (team2_score % 10) + 0x30;
;
	lda     _team2_score
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(24, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$38
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ read_controllers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_controllers: near

.segment	"CODE"

;
; doublepad = pad_poll_4score_1_3();
;
	jsr     _pad_poll_4score_1_3
	sta     _doublepad
	stx     _doublepad+1
;
; pad1 = high_byte(doublepad); // the high byte is the first controller's input
;
	lda     _doublepad+1
	sta     _pad1
;
; pad3 = low_byte(doublepad);  // low byte is the third controller's input
;
	lda     _doublepad
	sta     _pad3
;
; doublepad = pad_poll_4score_2_4();
;
	jsr     _pad_poll_4score_2_4
	sta     _doublepad
	stx     _doublepad+1
;
; pad2 = high_byte(doublepad);
;
	lda     _doublepad+1
	sta     _pad2
;
; pad4 = low_byte(doublepad);
;
	lda     _doublepad
	sta     _pad4
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ seeker_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_seeker_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ chaser_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_chaser_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; debug_extras();
;
	jsr     _debug_extras
;
; frame_counter++;
;
	inc     _frame_counter
;
; game_frame_timer++;
;
	inc     _game_frame_timer
;
; if (game_frame_timer >= TIMER_TICK_FREQUENCY) // Tick down every ~24.24 frames (40s/99)
;
	lda     _game_frame_timer
	cmp     #$18
	bcc     L1B04
;
; game_frame_timer = 0; // reset the frame timer
;
	lda     #$00
	sta     _game_frame_timer
;
; game_timer--;
;
	dec     _game_timer
;
; if (game_timer == 0)
;
	bne     L1B04
;
; if (team1_score > team2_score)
;
	lda     _team1_score
	sec
	sbc     _team2_score
	bcc     L1B02
	beq     L1B02
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
;
; else if (team2_score > team1_score)
;
	jmp     L1B2A
L1B02:	lda     _team2_score
	sec
	sbc     _team1_score
	bcc     L1B03
	beq     L1B03
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; else
;
	jmp     L1B2A
;
; winner = TIE_WINNER;
;
L1B03:	lda     #$02
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; sfx_play(SFX_DRAW_GAME, 0);
;
	lda     #$04
L1B2A:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; init_roundover();
;
	jsr     _init_roundover
;
; ai_counter++;
;
L1B04:	inc     _ai_counter
;
; sprite_rotation++;
;
	inc     _sprite_rotation
;
; if (bee1_bigbee_timer > 0 && game_frame_timer == 1) {
;
	lda     _bee1_bigbee_timer
	beq     L1B0A
	lda     _game_frame_timer
	cmp     #$01
	bne     L1B0A
;
; bee1_bigbee_timer--;
;
	dec     _bee1_bigbee_timer
;
; if (bee3_bigbee_timer > 0 && game_frame_timer == 1) { //game timer
;
L1B0A:	lda     _bee3_bigbee_timer
	beq     L1666
	lda     _game_frame_timer
	cmp     #$01
	bne     L1666
;
; bee3_bigbee_timer--;
;
	dec     _bee3_bigbee_timer
;
; read_controllers();
;
L1666:	jsr     _read_controllers
;
; current_player = 1;
;
	lda     #$01
	sta     _current_player
;
; GenericBoxGuy = BoxGuy1;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy1)
	ldx     #>(_BoxGuy1)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad1;
;
	lda     _pad1
	sta     _generic_pad
;
; movement(); // this assigns old_x and old_y
;
	jsr     _movement
;
; BoxGuy1.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy1+4
;
; temp_x = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x
;
; temp_y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision()) // 1 and 3, both seekers
;
	jsr     _sprite_collision
	tax
	beq     L167D
;
; BoxGuy1.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy1+1
	lda     _old_x
	sta     _BoxGuy1
;
; BoxGuy1.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy1+2+1
	lda     _old_y
;
; else
;
	jmp     L1AFC
;
; BoxGuy1.x = GenericBoxGuy.x;
;
L167D:	lda     _GenericBoxGuy+1
	sta     _BoxGuy1+1
	lda     _GenericBoxGuy
	sta     _BoxGuy1
;
; BoxGuy1.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy1+2+1
	lda     _GenericBoxGuy+2
L1AFC:	sta     _BoxGuy1+2
;
; current_player = 2;
;
	lda     #$02
	sta     _current_player
;
; GenericBoxGuy = BoxGuy2;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy2)
	ldx     #>(_BoxGuy2)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad2;
;
	lda     _pad2
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy2.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy2+4
;
; if (!(pad2 & (PAD_LEFT | PAD_RIGHT | PAD_UP | PAD_DOWN))) {
;
	lda     _pad2
	and     #$0F
;
; } else {
;
	beq     L1AFD
;
; BoxGuy2.moving = 1;
;
	lda     #$01
L1AFD:	sta     _BoxGuy2+5
;
; temp_x = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x
;
; temp_y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) // player 2 blocks player 4 (chasers)
;
	jsr     _sprite_collision
	tax
	beq     L16A2
;
; BoxGuy2.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy2+1
	lda     _old_x
	sta     _BoxGuy2
;
; BoxGuy2.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy2+2+1
	lda     _old_y
;
; else
;
	jmp     L1AFE
;
; BoxGuy2.x = GenericBoxGuy.x;
;
L16A2:	lda     _GenericBoxGuy+1
	sta     _BoxGuy2+1
	lda     _GenericBoxGuy
	sta     _BoxGuy2
;
; BoxGuy2.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy2+2+1
	lda     _GenericBoxGuy+2
L1AFE:	sta     _BoxGuy2+2
;
; current_player = 3;
;
	lda     #$03
	sta     _current_player
;
; GenericBoxGuy = BoxGuy3;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy3)
	ldx     #>(_BoxGuy3)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad3;
;
	lda     _pad3
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy3.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy3+4
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x2
;
; temp_y2 = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y2
;
; if (sprite_collision()) // 1 blocks 3 (seekers)
;
	jsr     _sprite_collision
	tax
	beq     L16BE
;
; BoxGuy3.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy3+1
	lda     _old_x
	sta     _BoxGuy3
;
; BoxGuy3.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy3+2+1
	lda     _old_y
;
; else
;
	jmp     L1AFF
;
; BoxGuy3.x = GenericBoxGuy.x;
;
L16BE:	lda     _GenericBoxGuy+1
	sta     _BoxGuy3+1
	lda     _GenericBoxGuy
	sta     _BoxGuy3
;
; BoxGuy3.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy3+2+1
	lda     _GenericBoxGuy+2
L1AFF:	sta     _BoxGuy3+2
;
; current_player = 4;
;
	lda     #$04
	sta     _current_player
;
; GenericBoxGuy = BoxGuy4;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy4)
	ldx     #>(_BoxGuy4)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad4;
;
	lda     _pad4
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy4.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy4+4
;
; if (!(pad4 & (PAD_LEFT | PAD_RIGHT | PAD_UP | PAD_DOWN))) {
;
	lda     _pad4
	and     #$0F
;
; } else {
;
	beq     L1B00
;
; BoxGuy4.moving = 1;
;
	lda     #$01
L1B00:	sta     _BoxGuy4+5
;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x2
;
; temp_y2 = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y2
;
; if (sprite_collision()) // 2 blocks 4 (seekers)
;
	jsr     _sprite_collision
	tax
	beq     L16E3
;
; BoxGuy4.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy4+1
	lda     _old_x
	sta     _BoxGuy4
;
; BoxGuy4.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy4+2+1
	lda     _old_y
;
; else
;
	jmp     L1B01
;
; BoxGuy4.x = GenericBoxGuy.x;
;
L16E3:	lda     _GenericBoxGuy+1
	sta     _BoxGuy4+1
	lda     _GenericBoxGuy
	sta     _BoxGuy4
;
; BoxGuy4.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy4+2+1
	lda     _GenericBoxGuy+2
L1B01:	sta     _BoxGuy4+2
;
; if (bee1_bigbee_timer == 0) { // Only check if not already transformed
;
	lda     _bee1_bigbee_timer
	jne     L1B19
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if (powerup1 == 1 && check_powerup_collision(temp_x, temp_y, 16, 32)) {
;
	lda     _powerup1
	cmp     #$01
	bne     L1B13
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$20
	jsr     _check_powerup_collision
	tax
	beq     L1B13
;
; powerup1 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup1
;
; bee1_bigbee_timer = POWERUP_TIMER;  // 20 game seconds
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup2 == 1 && check_powerup_collision(temp_x, temp_y, 226, 32)) {
;
L1B13:	lda     _powerup2
	cmp     #$01
	bne     L1B15
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$E2
	dey
	sta     (sp),y
	lda     #$20
	jsr     _check_powerup_collision
	tax
	beq     L1B15
;
; powerup2 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup2
;
; bee1_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup3 == 1 && check_powerup_collision(temp_x, temp_y, 16, 208)) {
;
L1B15:	lda     _powerup3
	cmp     #$01
	bne     L1B17
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$D0
	jsr     _check_powerup_collision
	tax
	beq     L1B17
;
; powerup3 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup3
;
; bee1_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup4 == 1 && check_powerup_collision(temp_x, temp_y, 226, 208)) {
;
L1B17:	lda     _powerup4
	cmp     #$01
	bne     L1B19
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$E2
	dey
	sta     (sp),y
	lda     #$D0
	jsr     _check_powerup_collision
	tax
	beq     L1B19
;
; powerup4 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup4
;
; bee1_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (bee3_bigbee_timer == 0) { // Only check if not already transformed
;
L1B19:	lda     _bee3_bigbee_timer
	jne     L1B21
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if (powerup1 == 1 && check_powerup_collision(temp_x, temp_y, 16, 32)) {
;
	lda     _powerup1
	cmp     #$01
	bne     L1B1B
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$20
	jsr     _check_powerup_collision
	tax
	beq     L1B1B
;
; powerup1 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup1
;
; bee3_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup2 == 1 && check_powerup_collision(temp_x, temp_y, 226, 32)) {
;
L1B1B:	lda     _powerup2
	cmp     #$01
	bne     L1B1D
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$E2
	dey
	sta     (sp),y
	lda     #$20
	jsr     _check_powerup_collision
	tax
	beq     L1B1D
;
; powerup2 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup2
;
; bee3_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup3 == 1 && check_powerup_collision(temp_x, temp_y, 16, 208)) {
;
L1B1D:	lda     _powerup3
	cmp     #$01
	bne     L1B1F
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$D0
	jsr     _check_powerup_collision
	tax
	beq     L1B1F
;
; powerup3 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup3
;
; bee3_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup4 == 1 && check_powerup_collision(temp_x, temp_y, 226, 208)) {
;
L1B1F:	lda     _powerup4
	cmp     #$01
	bne     L1B21
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$E2
	dey
	sta     (sp),y
	lda     #$D0
	jsr     _check_powerup_collision
	tax
	beq     L1B21
;
; powerup4 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup4
;
; bee3_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (bee1_bigbee_timer > 0) {
;
L1B21:	lda     _bee1_bigbee_timer
	beq     L1B23
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L1B22
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x2 = BoxGuy4.x >> 8;
;
L1B22:	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L1B23
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; if (bee3_bigbee_timer > 0) {
;
L1B23:	lda     _bee3_bigbee_timer
	beq     L1B25
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L1B24
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x2 = BoxGuy2.x >> 8;
;
L1B24:	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L1B25
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy1.x >> 8;
;
L1B25:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L1B26
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_FRIENDLY_FIRE;
;
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy3.x >> 8;
;
L1B26:	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L1B27
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_FRIENDLY_FIRE;
;
	lda     #$01
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy1.x >> 8;
;
L1B27:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L1B28
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_ENEMY_KILL;
;
	lda     #$02
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy2.x >> 8;
;
L1B28:	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L17F4
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_ENEMY_KILL;
;
	lda     #$02
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; draw_sprites();
;
L17F4:	jmp     _draw_sprites

.endproc

; ---------------------------------------------------------------
; void __near__ title_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title_loop: near

.segment	"CODE"

;
; frame_counter++;
;
L1B2B:	inc     _frame_counter
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_controllers();
;
	jsr     _read_controllers
;
; if (pad1 & PAD_UP)
;
	lda     _pad1
	and     #$08
	beq     L1B2C
;
; if ((BoxGuy1.y >> 8) > 160)
;
	lda     _BoxGuy1+3
	cmp     #$A1
	bcc     L1B2C
;
; BoxGuy1.y -= 0x0400; // Move up 4 pixels (0x0400 = 1024 sub-pixels)
;
	lda     _BoxGuy1+2
	sec
	sbc     #$00
	sta     _BoxGuy1+2
	lda     _BoxGuy1+2+1
	sbc     #$04
	sta     _BoxGuy1+2+1
;
; if (pad2 & PAD_UP)
;
L1B2C:	lda     _pad2
	and     #$08
	beq     L1B2D
;
; if ((BoxGuy2.y >> 8) > 160)
;
	lda     _BoxGuy2+3
	cmp     #$A1
	bcc     L1B2D
;
; BoxGuy2.y -= 0x0400;
;
	lda     _BoxGuy2+2
	sec
	sbc     #$00
	sta     _BoxGuy2+2
	lda     _BoxGuy2+2+1
	sbc     #$04
	sta     _BoxGuy2+2+1
;
; if (pad3 & PAD_UP)
;
L1B2D:	lda     _pad3
	and     #$08
	beq     L1B2E
;
; if ((BoxGuy3.y >> 8) > 160)
;
	lda     _BoxGuy3+3
	cmp     #$A1
	bcc     L1B2E
;
; BoxGuy3.y -= 0x0400;
;
	lda     _BoxGuy3+2
	sec
	sbc     #$00
	sta     _BoxGuy3+2
	lda     _BoxGuy3+2+1
	sbc     #$04
	sta     _BoxGuy3+2+1
;
; if (pad4 & PAD_UP)
;
L1B2E:	lda     _pad4
	and     #$08
	beq     L1B2F
;
; if ((BoxGuy4.y >> 8) > 160)
;
	lda     _BoxGuy4+3
	cmp     #$A1
	bcc     L1B2F
;
; BoxGuy4.y -= 0x0400;
;
	lda     _BoxGuy4+2
	sec
	sbc     #$00
	sta     _BoxGuy4+2
	lda     _BoxGuy4+2+1
	sbc     #$04
	sta     _BoxGuy4+2+1
;
; if (pad1 & PAD_START || pad2 & PAD_START || pad3 & PAD_START || pad4 & PAD_START)
;
L1B2F:	lda     _pad1
	and     #$10
	bne     L1B30
	lda     _pad2
	and     #$10
	bne     L1B30
	lda     _pad3
	and     #$10
	bne     L1B30
	lda     _pad4
	and     #$10
	beq     L1B33
;
; if (!start_held)
;
L1B30:	lda     _start_held
	bne     L1B31
;
; start_held = 1;
;
	lda     #$01
	sta     _start_held
;
; start_hold_timer = 0;
;
	lda     #$00
	sta     _start_hold_timer
;
; start_hold_timer++;
;
L1B31:	inc     _start_hold_timer
;
; if (start_hold_timer >= 3)
;
	lda     _start_hold_timer
	cmp     #$03
	jcc     L1B2B
;
; init_options_loop();
;
	jmp     _init_options_loop
;
; start_held = 0;
;
L1B33:	sta     _start_held
;
; start_hold_timer = 0;
;
	sta     _start_hold_timer
;
; while (1)
;
	jmp     L1B2B

.endproc

; ---------------------------------------------------------------
; void __near__ options_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_options_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L1836:	jsr     _ppu_wait_nmi
;
; frame_counter++;
;
	inc     _frame_counter
;
; read_controllers();
;
	jsr     _read_controllers
;
; if (pad1 & PAD_START || pad2 & PAD_START || pad3 & PAD_START || pad4 & PAD_START)
;
	lda     _pad1
	and     #$10
	bne     L1B34
	lda     _pad2
	and     #$10
	bne     L1B34
	lda     _pad3
	and     #$10
	bne     L1B34
	lda     _pad4
	and     #$10
	beq     L1836
;
; sfx_play(SFX_START, 0);
;
L1B34:	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; init_game_loop();
;
	jsr     _init_game_loop
;
; prev_pad1 = pad1;
;
	lda     _pad1
	sta     _prev_pad1
;
; prev_pad2 = pad2;
;
	lda     _pad2
	sta     _prev_pad2
;
; prev_pad3 = pad3;
;
	lda     _pad3
	sta     _prev_pad3
;
; prev_pad4 = pad4;
;
	lda     _pad4
	sta     _prev_pad4
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ gameover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gameover_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L184D:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_START)
;
	and     #$10
	beq     L184D
;
; init_title_loop();
;
	jmp     _init_title_loop

.endproc

; ---------------------------------------------------------------
; void __near__ init_game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_game_loop: near

.segment	"CODE"

;
; clear_background();
;
	jsr     _clear_background
;
; game_mode = MODE_GAME;
;
	lda     #$02
	sta     _game_mode
;
; team1_wins = 0;
;
	lda     #$00
	sta     _team1_wins
;
; team2_wins = 0;
;
	sta     _team2_wins
;
; pal_bg(palette_bg_combmap);
;
	lda     #<(_palette_bg_combmap)
	ldx     #>(_palette_bg_combmap)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; start_round();
;
	jmp     _start_round

.endproc

; ---------------------------------------------------------------
; void __near__ init_options_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_options_loop: near

.segment	"CODE"

;
; delay(30);
;
	lda     #$1E
	jsr     _delay
;
; prev_pad1 = 0;
;
	lda     #$00
	sta     _prev_pad1
;
; prev_pad2 = 0;
;
	sta     _prev_pad2
;
; prev_pad3 = 0;
;
	sta     _prev_pad3
;
; prev_pad4 = 0;
;
	sta     _prev_pad4
;
; clear_background();  
;
	jsr     _clear_background
;
; game_mode = MODE_OPTIONS;
;
	lda     #$01
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; load_room(); // loads the options screen
;
	jsr     _load_room
;
; pal_bg(palette_options_bg);
;
	lda     #<(_palette_options_bg)
	ldx     #>(_palette_options_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; multi_vram_buffer_horz("SPEED:", 7, NTADR_A(8, 10));
;
	jsr     decsp3
	lda     #<(L1960)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1960)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$48
	jsr     _multi_vram_buffer_horz
;
; if (speed_option == SPEED_SLOW)
;
	lda     _speed_option+1
	bne     L1969
	lda     _speed_option
	cmp     #$60
	bne     L1969
;
; multi_vram_buffer_horz("  SLOW ", 7, NTADR_A(11, 12));
;
	jsr     decsp3
	lda     #<(L196D)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L196D)
;
; else if (speed_option == SPEED_REGULAR)
;
	jmp     L1B3B
L1969:	lda     _speed_option+1
	bne     L1977
	lda     _speed_option
	cmp     #$A0
	bne     L1977
;
; multi_vram_buffer_horz("REGULAR", 7, NTADR_A(11, 12));
;
	jsr     decsp3
	lda     #<(L197B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L197B)
;
; else
;
	jmp     L1B3B
;
; multi_vram_buffer_horz("  FAST ", 7, NTADR_A(11, 12));
;
L1977:	jsr     decsp3
	lda     #<(L1986)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1986)
L1B3B:	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$8B
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("MAP:", 4, NTADR_A(8, 14));
;
	jsr     decsp3
	lda     #<(L1990)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1990)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$C8
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("HIVE", 4, NTADR_A(11, 16));
;
	jsr     decsp3
	lda     #<(L199A)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L199A)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$0B
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("MUSIC:", 6, NTADR_A(8, 18));
;
	jsr     decsp3
	lda     #<(L19A4)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L19A4)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$48
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("FRENZY", 6, NTADR_A(11, 20));
;
	jsr     decsp3
	lda     #<(L19AE)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L19AE)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$8B
	jsr     _multi_vram_buffer_horz
;
; start_hold_timer = 0;
;
	lda     #$00
	sta     _start_hold_timer
;
; start_held = 0;
;
	sta     _start_held
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_gameover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_gameover_loop: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; clear_background();
;
	jsr     _clear_background
;
; music_stop();
;
	jsr     _music_stop
;
; game_mode = MODE_GAMEOVER;
;
	lda     #$03
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; pal_bg(palette_bg_combmap);
;
	lda     #<(_palette_bg_combmap)
	ldx     #>(_palette_bg_combmap)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; if(team1_wins >= 3){
;
	lda     _team1_wins
	cmp     #$03
	bcc     L1B3D
;
; multi_vram_buffer_horz("TEAM 1 WINS THE MATCH!", 21, NTADR_A(4, 12));
;
	jsr     decsp3
	lda     #<(L1A2E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1A2E)
;
; } else if(team2_wins >= 3){
;
	jmp     L1B43
L1B3D:	lda     _team2_wins
	cmp     #$03
	bcc     L1A38
;
; multi_vram_buffer_horz("TEAM 2 WINS THE MATCH!", 21, NTADR_A(4, 12));
;
	jsr     decsp3
	lda     #<(L1A3B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1A3B)
L1B43:	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$84
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("PRESS START", 11, NTADR_A(10, 24));
;
L1A38:	jsr     decsp3
	lda     #<(L1A45)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1A45)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$23
	lda     #$0A
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; delay(10);
;
	lda     #$0A
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ init_title_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_title_loop: near

.segment	"CODE"

;
; delay(30);
;
	lda     #$1E
	jsr     _delay
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_title_bg);
;
	lda     #<(_palette_title_bg)
	ldx     #>(_palette_title_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; load_room(); //loads the title screen;
;
	jsr     _load_room
;
; BoxGuy1.x = 0x2800; // x = 40 (0x28)
;
	ldx     #$28
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy1.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy1+4
;
; BoxGuy2.x = 0x7800; // x = 120 (0x78)
;
	ldx     #$78
	lda     #$00
	sta     _BoxGuy2
	stx     _BoxGuy2+1
;
; BoxGuy2.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy2.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy2+4
;
; BoxGuy3.x = 0xC800; // x = 200 (0xC8)
;
	lda     #$00
	sta     _BoxGuy3
	stx     _BoxGuy3+1
;
; BoxGuy3.y = 0xC800; // y = 200 (0xC8)
;
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy3.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy3+4
;
; BoxGuy4.x = 0x1801; // x = 280 (0x118)
;
	ldx     #$18
	lda     #$01
	sta     _BoxGuy4
	stx     _BoxGuy4+1
;
; BoxGuy4.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	lda     #$00
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy4.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy4+4
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_system (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_system: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); // shift the bg down one pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; speed_option = SPEED_REGULAR;
;
	ldx     #$00
	lda     #$A0
	sta     _speed_option
	stx     _speed_option+1
;
; turbo_amount = TURBO_MEDIUM;
;
	lda     #$80
	sta     _turbo_amount
;
; ducks_go_faster_over_time=1;
;
	lda     #$01
	sta     _ducks_go_faster_over_time
;
; sprite_rotation = 0;
;
	txa
	sta     _sprite_rotation
;
; anim_frame_1 = 0;
;
	sta     _anim_frame_1
;
; anim_frame_2 = 0;
;
	sta     _anim_frame_2
;
; anim_frame_3 = 0;
;
	sta     _anim_frame_3
;
; anim_frame_4 = 0;
;
	sta     _anim_frame_4
;
; bee1_bigbee_timer = 0;
;
	sta     _bee1_bigbee_timer
;
; bee3_bigbee_timer = 0;
;
	sta     _bee3_bigbee_timer
;
; ppu_on_all(); // turn on screenxw
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ clear_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_background: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (tempint = 0; tempint < 1024; ++tempint)
;
	lda     #$00
	sta     _tempint
	sta     _tempint+1
L1A72:	ldx     _tempint+1
	cpx     #$04
	bcs     L1A73
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (tempint = 0; tempint < 1024; ++tempint)
;
	inc     _tempint
	bne     L1A72
	inc     _tempint+1
	jmp     L1A72
;
; ppu_on_all(); // turn on screen
;
L1A73:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ update_hud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_hud: near

.segment	"CODE"

;
; if(team1_wins > 0){
;
	lda     _team1_wins
	beq     L13BD
;
; one_vram_buffer(0xc8, NTADR_A(13, 1)); //full
;
	lda     #$C8
;
; }else {
;
	jmp     L1B53
;
; one_vram_buffer(0xb7, NTADR_A(13, 1)); //empty
;
L13BD:	lda     #$B7
L1B53:	jsr     pusha
	ldx     #$20
	lda     #$2D
	jsr     _one_vram_buffer
;
; if(team1_wins > 1){
;
	lda     _team1_wins
	cmp     #$02
	bcc     L13D0
;
; one_vram_buffer(0xc9, NTADR_A(12, 1)); //full
;
	lda     #$C9
;
; } else {
;
	jmp     L1B54
;
; one_vram_buffer(0xb8, NTADR_A(12, 1)); //empty
;
L13D0:	lda     #$B8
L1B54:	jsr     pusha
	ldx     #$20
	lda     #$2C
	jsr     _one_vram_buffer
;
; if(team1_wins > 2){
;
	lda     _team1_wins
	cmp     #$03
	bcc     L13E3
;
; one_vram_buffer(0xca, NTADR_A(11, 1)); //full
;
	lda     #$CA
;
; } else {
;
	jmp     L1B55
;
; one_vram_buffer(0xb9, NTADR_A(11, 1)); //empty
;
L13E3:	lda     #$B9
L1B55:	jsr     pusha
	ldx     #$20
	lda     #$2B
	jsr     _one_vram_buffer
;
; if(team2_wins > 0){
;
	lda     _team2_wins
	beq     L13F6
;
; one_vram_buffer(0xc8, NTADR_A(18, 1)); //full
;
	lda     #$C8
;
; } else {
;
	jmp     L1B56
;
; one_vram_buffer(0xb7, NTADR_A(18, 1)); //empty
;
L13F6:	lda     #$B7
L1B56:	jsr     pusha
	ldx     #$20
	lda     #$32
	jsr     _one_vram_buffer
;
; if(team2_wins > 1){
;
	lda     _team2_wins
	cmp     #$02
	bcc     L1409
;
; one_vram_buffer(0xc9, NTADR_A(19, 1)); //full
;
	lda     #$C9
;
; } else {
;
	jmp     L1B57
;
; one_vram_buffer(0xb8, NTADR_A(19, 1)); //empty
;
L1409:	lda     #$B8
L1B57:	jsr     pusha
	ldx     #$20
	lda     #$33
	jsr     _one_vram_buffer
;
; if(team2_wins > 2){
;
	lda     _team2_wins
	cmp     #$03
	bcc     L141C
;
; one_vram_buffer(0xca, NTADR_A(20, 1 )); //full
;
	lda     #$CA
	jsr     pusha
	ldx     #$20
	lda     #$34
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xb9, NTADR_A(20, 1)); //empty
;
L141C:	lda     #$B9
	jsr     pusha
	ldx     #$20
	lda     #$34
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ init_roundover (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_roundover: near

.segment	"CODE"

;
; game_mode = MODE_ROUNDOVER;
;
	lda     #$04
	sta     _game_mode
;
; music_stop();
;
	jsr     _music_stop
;
; if (winner == ONETWO_WINNER)
;
	lda     _winner
	bne     L1B59
;
; team1_wins++;
;
	inc     _team1_wins
;
; else if (winner == THREEFOUR_WINNER)
;
	jmp     L19C4
L1B59:	lda     _winner
	cmp     #$01
	bne     L19C4
;
; team2_wins++;
;
	inc     _team2_wins
;
; update_hud();
;
L19C4:	jsr     _update_hud
;
; if (winner == ONETWO_WINNER)
;
	lda     _winner
	bne     L1B5A
;
; multi_vram_buffer_horz("TEAM 1 WINS!", 12, NTADR_A(9, 12));
;
	jsr     decsp3
	lda     #<(L19CB)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L19CB)
;
; else if (winner == THREEFOUR_WINNER)
;
	jmp     L1B64
L1B5A:	lda     _winner
	cmp     #$01
	bne     L1B5B
;
; multi_vram_buffer_horz("TEAM 2 WINS!", 12, NTADR_A(9, 12));
;
	jsr     decsp3
	lda     #<(L19D8)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L19D8)
L1B64:	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$89
	jsr     _multi_vram_buffer_horz
;
; if (win_reason == WIN_DOTS)
;
L1B5B:	lda     _win_reason
	bne     L1B5C
;
; multi_vram_buffer_horz("COLLECTED 100 DOTS", 18, NTADR_A(6, 13));
;
	jsr     decsp3
	lda     #<(L19E4)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L19E4)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_FRIENDLY_FIRE)
;
L1B5C:	lda     _win_reason
	cmp     #$01
	bne     L1B5D
;
; multi_vram_buffer_horz("FRIENDLY BEE EATEN", 18, NTADR_A(6, 13));
;
	jsr     decsp3
	lda     #<(L19F1)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L19F1)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_ENEMY_KILL)
;
L1B5D:	lda     _win_reason
	cmp     #$02
	bne     L1B5E
;
; multi_vram_buffer_horz("ENEMY BEE EATEN", 15, NTADR_A(7, 13));
;
	jsr     decsp3
	lda     #<(L19FE)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L19FE)
	sta     (sp),y
	lda     #$0F
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A7
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_BIGBEE_EAT_DUCK)
;
L1B5E:	lda     _win_reason
	cmp     #$04
	bne     L1A08
;
; multi_vram_buffer_horz("BIGBEE ATE DUCK!", 16, NTADR_A(7, 13));
;
	jsr     decsp3
	lda     #<(L1A0B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1A0B)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A7
	jmp     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("TIME UP!", 8, NTADR_A(11, 13));
;
L1A08:	jsr     decsp3
	lda     #<(L1A16)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1A16)
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$AB
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ start_round (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_round: near

.segment	"CODE"

;
; load_room();
;
	jsr     _load_room
;
; update_hud();
;
	jsr     _update_hud
;
; for (index = 0; index < 128; index++)
;
	lda     #$00
	sta     _index
	tax
L1B65:	lda     _index
	cmp     #$80
	bcs     L1B66
;
; consumed_dots[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _consumed_dots,y
;
; for (index = 0; index < 128; index++)
;
	inc     _index
	jmp     L1B65
;
; map_positions = (frame_counter) % 5; //this could be round based.
;
L1B66:	lda     _frame_counter
	jsr     pushax
	lda     #$05
	jsr     tosumodax
	sta     _map_positions
;
; if (map_positions == START_POS_WIDE) {
;
	cmp     #$01
	bne     L1B67
;
; BoxGuy1.x = 0x3800; BoxGuy1.y = 0xA800;
;
	ldx     #$38
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$A8
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x5000; BoxGuy2.y = 0x2800;
;
	ldx     #$50
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xC000; BoxGuy3.y = 0xA800;
;
	ldx     #$C0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$A8
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0xA000; BoxGuy4.y = 0x2800;
;
	ldx     #$A0
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_CLOSE) {
;
	jmp     L1B6B
L1B67:	lda     _map_positions
	cmp     #$02
	bne     L1B68
;
; BoxGuy1.x = 0x5800; BoxGuy1.y = 0x3800;
;
	ldx     #$58
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$38
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7000; BoxGuy2.y = 0x3000;
;
	ldx     #$70
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$30
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xA000; BoxGuy3.y = 0x3800;
;
	ldx     #$A0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$38
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8800; BoxGuy4.y = 0x3000;
;
	ldx     #$88
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$30
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_CORNERS) {
;
	jmp     L1B6B
L1B68:	lda     _map_positions
	cmp     #$03
	bne     L1B69
;
; BoxGuy1.x = 0x2800; BoxGuy1.y = 0x2000;
;
	ldx     #$28
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$20
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x2800; BoxGuy2.y = 0xd800;
;
	ldx     #$28
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$D8
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xD800; BoxGuy3.y = 0x2000;
;
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$20
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0xD800; BoxGuy4.y = 0xD800;
;
	ldx     #$D8
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_MIDDLE) {
;
	jmp     L1B6B
L1B69:	lda     _map_positions
	cmp     #$04
	bne     L18A3
;
; BoxGuy1.x = 0x7800; BoxGuy1.y = 0x8000;
;
	ldx     #$78
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$80
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7800; BoxGuy2.y = 0x2800;
;
	ldx     #$78
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0x8000; BoxGuy3.y = 0x8000;
;
	ldx     #$80
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8000; BoxGuy4.y = 0x2800;
;
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy3.direction = DIR_RIGHT;
;
	lda     #$03
	sta     _BoxGuy3+4
;
; BoxGuy4.direction = DIR_RIGHT;
;
	sta     _BoxGuy4+4
;
; } else {  // START_POS_DEFAULT
;
	jmp     L1B6A
;
; BoxGuy1.x = 0x4800; BoxGuy1.y = 0x4000;
;
L18A3:	ldx     #$48
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$40
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7000; BoxGuy2.y = 0x2800;
;
	ldx     #$70
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xB000; BoxGuy3.y = 0x4000;
;
	ldx     #$B0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$40
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8800; BoxGuy4.y = 0x2800;
;
	ldx     #$88
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy4.direction = DIR_RIGHT;
;
	lda     #$03
	sta     _BoxGuy4+4
;
; BoxGuy1.direction = DIR_RIGHT;
;
	sta     _BoxGuy1+4
;
; team1_score=0;
;
L1B6A:	lda     #$00
L1B6B:	sta     _team1_score
;
; team2_score=0;
;
	sta     _team2_score
;
; powerup1 =1;
;
	lda     #$01
	sta     _powerup1
;
; powerup2 =1;
;
	sta     _powerup2
;
; powerup3 =1;
;
	sta     _powerup3
;
; powerup4 =1;
;
	sta     _powerup4
;
; game_timer = GAME_LENGTH;
;
	lda     #$63
	sta     _game_timer
;
; win_reason = WIN_DOTS; // default
;
	lda     #$00
	sta     _win_reason
;
; turbo_p1 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p1
;
; turbo_p2 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p2
;
; turbo_p3 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p3
;
; turbo_p4 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p4
;
; bee1_bigbee_timer = 0;
;
	lda     #$00
	sta     _bee1_bigbee_timer
;
; bee3_bigbee_timer = 0;
;
	sta     _bee3_bigbee_timer
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(116, 100, gamesprites_big3_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big3_data)
	ldx     #>(_gamesprites_big3_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_meta_spr(116, 100, gamesprites_big2_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big2_data)
	ldx     #>(_gamesprites_big2_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_meta_spr(116, 100, gamesprites_big1_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big1_data)
	ldx     #>(_gamesprites_big1_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; sfx_play(SFX_START, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; delay(10);
;
	lda     #$0A
	jsr     _delay
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; game_mode = MODE_GAME;
;
	lda     #$02
	sta     _game_mode
;
; song = SONG_MAIN_SONG;
;
	lda     #$00
	sta     _song
;
; music_play(song);
;
	jmp     _music_play

.endproc

; ---------------------------------------------------------------
; void __near__ roundover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_roundover_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L1A80:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_START)
;
	and     #$10
	beq     L1A80
;
; if (team1_wins >= 3)
;
	lda     _team1_wins
	cmp     #$03
;
; init_gameover_loop();
;
	jcs     _init_gameover_loop
;
; else if (team2_wins >= 3)
;
	lda     _team2_wins
	cmp     #$03
;
; init_gameover_loop();
;
	jcs     _init_gameover_loop
;
; start_round();
;
	jmp     _start_round

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if (temp_y >= 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L1B6D
;
; return 0;
;
	txa
	rts
;
; temp = combmapwoflowers[((temp_y >> 3) << 5) + (temp_x >> 3)];
;
L1B6D:	lda     _temp_y
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     ptr1
	lda     #$00
	adc     ptr1+1
	clc
	adc     #>(_combmapwoflowers)
	sta     ptr1+1
	ldy     #<(_combmapwoflowers)
	lda     (ptr1),y
	sta     _temp
;
; if (temp == 0xc6 || temp == 0xc7 || temp == 0xc8 || temp == 0xc9 || temp == 0xca)
;
	cmp     #$C6
	beq     L1B6E
	lda     _temp
	cmp     #$C7
	beq     L1B6E
	cmp     #$C8
	beq     L1B6E
	cmp     #$C9
	beq     L1B6E
	cmp     #$CA
	bne     L1B6F
;
; return 0;
;
L1B6E:	ldx     #$00
	txa
	rts
;
; else if (temp == 0xb6 || temp == 0xb7 || temp == 0xb8 || temp == 0xb9 || temp == 0xba)
;
L1B6F:	lda     _temp
	cmp     #$B6
	beq     L1B70
	cmp     #$B7
	beq     L1B70
	cmp     #$B8
	beq     L1B70
	cmp     #$B9
	beq     L1B70
	cmp     #$BA
	beq     L1B70
	ldx     #$00
	jmp     L1B71
;
; return 0;
;
L1B70:	ldx     #$00
	txa
	rts
;
; return 1;
;
L1B71:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp_x = Generic.x;
;
	lda     _Generic
	sta     _temp_x
;
; eject_L = temp_x & 0x07; // distance to next tile boundary
;
	and     #$07
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1B73
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L1B73:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1B75
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L1B75:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp_x = Generic.x + Generic.width; 
;
	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; eject_R = 8 - (temp_x & 0x07); // distance to next tile boundary
;
	lda     #$08
	jsr     pusha0
	lda     _temp_x
	and     #$07
	jsr     tossuba0
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1B78
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L1B78:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1B7A
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L1B7A:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y & 0x07; // distance to next tile boundary
;
	and     #$07
	sta     _eject_U
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1B7C
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L1B7C:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1B7E
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L1B7E:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; eject_D = 8 - (temp_y & 0x07); // distance to next tile boundary
;
	lda     #$08
	jsr     pusha0
	lda     _temp_y
	and     #$07
	jsr     tossuba0
	sta     _eject_D
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1B81
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L1B81:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1B83
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L1B83:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ sprite_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collision: near

.segment	"CODE"

;
; if (temp_x < temp_x2 + 8 && temp_x + 8 > temp_x2 &&
;
	lda     _temp_x
	jsr     pusha0
	lda     _temp_x2
	clc
	adc     #$08
	bcc     L15C5
	ldx     #$01
L15C5:	jsr     tosicmp
	bcs     L15C6
	ldx     #$00
	lda     _temp_x
	clc
	adc     #$08
	bcc     L15C7
	inx
L15C7:	sec
	sbc     _temp_x2
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L15C6
	beq     L15C6
;
; temp_y < temp_y2 + 8 && temp_y + 8 > temp_y2)
;
	lda     _temp_y
	jsr     pusha0
	lda     _temp_y2
	clc
	adc     #$08
	bcc     L15C8
	ldx     #$01
L15C8:	jsr     tosicmp
	bcs     L15C6
	ldx     #$00
	lda     _temp_y
	clc
	adc     #$08
	bcc     L15C9
	inx
L15C9:	sec
	sbc     _temp_y2
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	beq     L15C6
	bcs     L15C4
L15C6:	ldx     #$00
	txa
	rts
;
; return 1;
;
L15C4:	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_powerup_collision (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_powerup_collision: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; if (player_x + 4 >= powerup_x && player_x + 4 < powerup_x + 16 &&
;
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$04
	bcc     L1B86
	inx
L1B86:	ldy     #$01
	cmp     (sp),y
	txa
	sbc     #$00
	lda     #$00
	tax
	bcc     L15CE
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$04
	bcc     L15D3
	inx
L15D3:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$10
	bcc     L15D4
	inx
L15D4:	jsr     tosicmp
	bcs     L15D2
;
; player_y + 4 >= powerup_y && player_y + 4 < powerup_y + 16)
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$04
	bcc     L1B87
	inx
L1B87:	ldy     #$00
	cmp     (sp),y
	txa
	sbc     #$00
	tya
	tax
	bcc     L15CE
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$04
	bcc     L15D6
	inx
L15D6:	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$10
	bcc     L15D7
	inx
L15D7:	jsr     tosicmp
	bcc     L15D0
L15D2:	ldx     #$00
	txa
	jmp     incsp4
;
; return 1;
;
L15D0:	ldx     #$00
	lda     #$01
	jmp     incsp4
;
; }
;
L15CE:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init_system();
;
	jsr     _init_system
;
; init_title_loop();
;
	jsr     _init_title_loop
;
; if (game_mode == MODE_TITLE)
;
L1B8B:	lda     _game_mode
	bne     L1B8C
;
; title_loop();
;
	jsr     _title_loop
;
; if (game_mode == MODE_OPTIONS)
;
L1B8C:	lda     _game_mode
	cmp     #$01
	bne     L1B8D
;
; options_loop();
;
	jsr     _options_loop
;
; if (game_mode == MODE_GAME)
;
L1B8D:	lda     _game_mode
	cmp     #$02
	bne     L1B8E
;
; game_loop();
;
	jsr     _game_loop
;
; if (game_mode == MODE_GAMEOVER)
;
L1B8E:	lda     _game_mode
	cmp     #$03
	bne     L1B8F
;
; gameover_loop();
;
	jsr     _gameover_loop
;
; if(game_mode== MODE_ROUNDOVER){
;
L1B8F:	lda     _game_mode
	cmp     #$04
	bne     L1B8B
;
; roundover_loop();
;
	jsr     _roundover_loop
;
; while (1)
;
	jmp     L1B8B

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_dot_consumed (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_dot_consumed: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char byte_index = map_index >> 3; // divide by 8
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shrax3
	jsr     pusha
;
; unsigned char bit_index = map_index & 0x07; // modulo 8
;
	ldy     #$01
	lda     (sp),y
	and     #$07
	jsr     pusha
;
; return (consumed_dots[byte_index] >> bit_index) & 0x01;
;
	ldy     #$01
	lda     (sp),y
	tay
	lda     _consumed_dots,y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	tay
	lda     ptr1
L1B90:	lsr     a
	dey
	bpl     L1B90
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ mark_dot_consumed (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mark_dot_consumed: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char byte_index = map_index >> 3; // divide by 8
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shrax3
	jsr     pusha
;
; unsigned char bit_index = map_index & 0x07; // modulo 8
;
	ldy     #$01
	lda     (sp),y
	and     #$07
	jsr     pusha
;
; consumed_dots[byte_index] |= (0x01 << bit_index);
;
	lda     #<(_consumed_dots)
	ldx     #>(_consumed_dots)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L156B
	inx
L156B:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$01
L1B91:	asl     a
	dey
	bpl     L1B91
	ror     a
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

