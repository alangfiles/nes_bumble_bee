;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_clear_vram_buffer
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.import		_pad_poll_4score_1_3
	.import		_pad_poll_4score_2_4
	.export		_Bee1
	.export		_Bee2
	.export		_Bee3
	.export		_Bee4
	.export		_SmallBee1
	.export		_SmallBee2
	.export		_SmallBee3
	.export		_SmallBee4
	.export		_doublepad
	.export		_generic_pad
	.export		_pad1
	.export		_pad2
	.export		_pad3
	.export		_pad4
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_hero_velocity_x
	.export		_hero_velocity_y
	.export		_old_x
	.export		_old_y
	.export		_temp
	.export		_temp_x
	.export		_temp_y
	.export		_largeindex
	.export		_bit_index
	.export		_bit_offset
	.export		_frame_counter
	.export		_tinyhoney
	.export		_Generic
	.export		_GenericBoxGuy
	.export		_BoxGuy1
	.export		_BoxGuy2
	.export		_BoxGuy3
	.export		_BoxGuy4
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles1
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_check_tile_and_collect
	.export		_bg_collision_sub
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_main
	.export		_pellet_tiles
	.export		_blank_tiles

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$2800
_BoxGuy2:
	.word	$8000
	.word	$3000
_BoxGuy3:
	.word	$A000
	.word	$3000
_BoxGuy4:
	.word	$C000
	.word	$3000

.segment	"RODATA"

_Bee1:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$80
_Bee2:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$01
	.byte	$80
_Bee3:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$02
	.byte	$80
_Bee4:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$03
	.byte	$80
_SmallBee1:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$80
_SmallBee2:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$01
	.byte	$80
_SmallBee3:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$02
	.byte	$80
_SmallBee4:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$03
	.byte	$80
_tinyhoney:
	.byte	$A7
	.byte	$B6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$EE
	.byte	$EF
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$AB
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$B6
	.byte	$5D
	.byte	$31
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A8
	.byte	$5E
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5B
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$EE
	.byte	$EF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EE
	.byte	$EF
	.byte	$EE
	.byte	$EF
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$82
	.byte	$83
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$DE
	.byte	$DF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$82
	.byte	$83
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$92
	.byte	$93
	.byte	$CA
	.byte	$C8
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C8
	.byte	$C8
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C9
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C9
	.byte	$92
	.byte	$93
	.byte	$FB
	.byte	$A7
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$9F
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$9E
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C9
	.byte	$BE
	.byte	$BF
	.byte	$EB
	.byte	$B6
	.byte	$CC
	.byte	$CB
	.byte	$DD
	.byte	$DF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C8
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$FB
	.byte	$B6
	.byte	$CC
	.byte	$DB
	.byte	$C6
	.byte	$8C
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$8D
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EB
	.byte	$CA
	.byte	$C6
	.byte	$EB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$8C
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$8D
	.byte	$C6
	.byte	$EA
	.byte	$B6
	.byte	$CB
	.byte	$DF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8E
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$8F
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FA
	.byte	$B8
	.byte	$DF
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$9C
	.byte	$CA
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$8F
	.byte	$CA
	.byte	$C8
	.byte	$8E
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C7
	.byte	$EB
	.byte	$B9
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$8F
	.byte	$C6
	.byte	$C9
	.byte	$8E
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$ED
	.byte	$BF
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FD
	.byte	$DF
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$FB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C8
	.byte	$C8
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$A7
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FB
	.byte	$B6
	.byte	$BE
	.byte	$EC
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C7
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$DE
	.byte	$DF
	.byte	$C8
	.byte	$EB
	.byte	$B6
	.byte	$DE
	.byte	$FC
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$9C
	.byte	$9C
	.byte	$F8
	.byte	$F9
	.byte	$C7
	.byte	$EA
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$8C
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8D
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FA
	.byte	$B6
	.byte	$B6
	.byte	$EA
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$E8
	.byte	$E9
	.byte	$C6
	.byte	$EB
	.byte	$99
	.byte	$A7
	.byte	$FA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EA
	.byte	$C6
	.byte	$EB
	.byte	$CE
	.byte	$CF
	.byte	$EB
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$CE
	.byte	$CF
	.byte	$EB
	.byte	$C9
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FB
	.byte	$C6
	.byte	$FA
	.byte	$C6
	.byte	$FB
	.byte	$CE
	.byte	$DB
	.byte	$FB
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FB
	.byte	$CE
	.byte	$CF
	.byte	$FB
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$9E
	.byte	$FB
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$A7
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$AB
	.byte	$B6
	.byte	$EB
	.byte	$82
	.byte	$83
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$82
	.byte	$83
	.byte	$EB
	.byte	$A7
	.byte	$A7
	.byte	$FB
	.byte	$92
	.byte	$93
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$CD
	.byte	$BC
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$92
	.byte	$93
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$A8
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$DB
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$AF
	.byte	$B6
	.byte	$A7
	.byte	$B9
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B7
	.byte	$A8
	.byte	$DE
	.byte	$DD
	.byte	$DD
	.byte	$DF
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$08
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$22
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_palette_sp:
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$0A
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$20
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$14
	.byte	$38
_metatiles1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_pellet_tiles:
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
_blank_tiles:
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA

.segment	"BSS"

.segment	"ZEROPAGE"
_doublepad:
	.res	2,$00
_generic_pad:
	.res	1,$00
_pad1:
	.res	1,$00
_pad2:
	.res	1,$00
_pad3:
	.res	1,$00
_pad4:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_hero_velocity_x:
	.res	2,$00
_hero_velocity_y:
	.res	2,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_largeindex:
	.res	2,$00
_bit_index:
	.res	1,$00
_bit_offset:
	.res	1,$00
_frame_counter:
	.res	1,$00
.segment	"BSS"
_Generic:
	.res	4,$00
_GenericBoxGuy:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	lda     #$00
	sta     _largeindex
	sta     _largeindex+1
L05AA:	ldx     _largeindex+1
	cpx     #$04
	bcs     L05AB
;
; vram_put(tinyhoney[largeindex]);
;
	lda     #<(_tinyhoney)
	sta     ptr1
	lda     #>(_tinyhoney)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	inc     _largeindex
	bne     L05AA
	inc     _largeindex+1
	jmp     L05AA
;
; ppu_on_all();  
;
L05AB:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;  
;
	lda     _temp_x
	bne     L06F3
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L06F3:	lda     _temp_y
	bne     L05C2
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, SmallBee1);
;
L05C2:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_SmallBee1)
	ldx     #>(_SmallBee1)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;
;
	lda     _temp_x
	bne     L06F4
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L06F4:	lda     _temp_y
	bne     L05D2
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, SmallBee2);
;
L05D2:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_SmallBee2)
	ldx     #>(_SmallBee2)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;
;
	lda     _temp_x
	bne     L06F5
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L06F5:	lda     _temp_y
	bne     L05E2
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, SmallBee3);
;
L05E2:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_SmallBee3)
	ldx     #>(_SmallBee3)
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if(temp_x == 0) temp_x = 1;
;
	lda     _temp_x
	bne     L06F6
	lda     #$01
	sta     _temp_x
;
; if(temp_y == 0) temp_y = 1;
;
L06F6:	lda     _temp_y
	bne     L05F2
	lda     #$01
	sta     _temp_y
;
; oam_meta_spr(temp_x, temp_y, SmallBee4);
;
L05F2:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_SmallBee4)
	ldx     #>(_SmallBee4)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _old_x+1
	lda     _GenericBoxGuy
	sta     _old_x
;
; if(generic_pad & PAD_LEFT){
;
	lda     _generic_pad
	and     #$02
	beq     L06FD
;
; hero_velocity_x = -SPEED;
;
	ldx     #$FE
;
; else if (generic_pad & PAD_RIGHT){
;
	jmp     L070B
L06FD:	lda     _generic_pad
	ldx     #$00
	and     #$01
	beq     L06FF
;
; hero_velocity_x = SPEED;
;
	inx
L070B:	lda     #$80
;
; hero_velocity_x = 0;
;
L06FF:	sta     _hero_velocity_x
	stx     _hero_velocity_x+1
;
; GenericBoxGuy.x += hero_velocity_x;
;
	lda     _hero_velocity_x
	clc
	adc     _GenericBoxGuy
	sta     _GenericBoxGuy
	lda     _hero_velocity_x+1
	adc     _GenericBoxGuy+1
	sta     _GenericBoxGuy+1
;
; if(GenericBoxGuy.x > 0xf000) { // too far, don't wrap around
;
	lda     _GenericBoxGuy
	cmp     #$01
	lda     _GenericBoxGuy+1
	sbc     #$F0
	bcc     L0702
;
; if(old_x >= 0x8000){
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L0701
;
; GenericBoxGuy.x = 0xf000; // max right
;
	ldx     #$F0
;
; GenericBoxGuy.x = 0x0000; // max left
;
L0701:	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L0702:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$07
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;  
;
	sta     _Generic+3
;
; if(hero_velocity_x < 0){ // going left
;
	ldx     _hero_velocity_x+1
	cpx     #$80
	bcc     L061C
;
; if(bg_coll_L() ){ // check collision left
;
	jsr     _bg_coll_L
	tax
	beq     L0628
;
; high_byte(GenericBoxGuy.x) = high_byte(GenericBoxGuy.x) - eject_L;
;
	lda     _GenericBoxGuy+1
	sec
	sbc     _eject_L
;
; else if(hero_velocity_x > 0){ // going right
;
	jmp     L070C
L061C:	lda     _hero_velocity_x
	cmp     #$01
	lda     _hero_velocity_x+1
	sbc     #$00
	bvs     L0627
	eor     #$80
L0627:	bpl     L0628
;
; if(bg_coll_R() ){ // check collision right
;
	jsr     _bg_coll_R
	tax
	beq     L0628
;
; high_byte(GenericBoxGuy.x) = high_byte(GenericBoxGuy.x) - eject_R;
;
	lda     _GenericBoxGuy+1
	sec
	sbc     _eject_R
L070C:	sta     _GenericBoxGuy+1
;
; old_y = GenericBoxGuy.y;
;
L0628:	lda     _GenericBoxGuy+2+1
	sta     _old_y+1
	lda     _GenericBoxGuy+2
	sta     _old_y
;
; if(generic_pad & PAD_UP){
;
	lda     _generic_pad
	and     #$08
	beq     L0703
;
; hero_velocity_y = -SPEED;
;
	ldx     #$FE
;
; else if (generic_pad & PAD_DOWN){
;
	jmp     L070D
L0703:	lda     _generic_pad
	ldx     #$00
	and     #$04
	beq     L0705
;
; hero_velocity_y = SPEED;
;
	inx
L070D:	lda     #$80
;
; hero_velocity_y = 0;
;
L0705:	sta     _hero_velocity_y
	stx     _hero_velocity_y+1
;
; GenericBoxGuy.y += hero_velocity_y;
;
	lda     _hero_velocity_y
	clc
	adc     _GenericBoxGuy+2
	sta     _GenericBoxGuy+2
	lda     _hero_velocity_y+1
	adc     _GenericBoxGuy+2+1
	sta     _GenericBoxGuy+2+1
;
; if(GenericBoxGuy.y > 0xe000) { // too far, don't wrap around
;
	lda     _GenericBoxGuy+2
	cmp     #$01
	lda     _GenericBoxGuy+2+1
	sbc     #$E0
	bcc     L0708
;
; if(old_y >= 0x8000){
;
	lda     _old_y
	cmp     #$00
	lda     _old_y+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L0707
;
; GenericBoxGuy.y = 0xe000; // max down
;
	ldx     #$E0
;
; GenericBoxGuy.y = 0x0000; // max up
;
L0707:	sta     _GenericBoxGuy+2
	stx     _GenericBoxGuy+2+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L0708:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; if(hero_velocity_y < 0){ // going up
;
	ldx     _hero_velocity_y+1
	cpx     #$80
	bcc     L064B
;
; if(bg_coll_U() ){ // check collision left
;
	jsr     _bg_coll_U
	tax
	beq     L0657
;
; high_byte(GenericBoxGuy.y) = high_byte(GenericBoxGuy.y) - eject_U;
;
	lda     _GenericBoxGuy+3
	sec
	sbc     _eject_U
;
; else if(hero_velocity_y > 0){ // going down
;
	jmp     L070E
L064B:	lda     _hero_velocity_y
	cmp     #$01
	lda     _hero_velocity_y+1
	sbc     #$00
	bvs     L0656
	eor     #$80
L0656:	bpl     L0657
;
; if(bg_coll_D() ){ // check collision right
;
	jsr     _bg_coll_D
	tax
	beq     L0657
;
; high_byte(GenericBoxGuy.y) = high_byte(GenericBoxGuy.y) - eject_D;
;
	lda     _GenericBoxGuy+3
	sec
	sbc     _eject_D
L070E:	sta     _GenericBoxGuy+3
;
; check_tile_and_collect();
;
L0657:	jmp     _check_tile_and_collect

.endproc

; ---------------------------------------------------------------
; void __near__ check_tile_and_collect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tile_and_collect: near

.segment	"CODE"

;
; temp_x = Generic.x >> 3; //get this between 0-30
;
	lda     _Generic
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_x
;
; temp_y = Generic.y >> 3; //get this between 0-32
;
	lda     _Generic+1
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_y
;
; largeindex = (temp_y << 5) + temp_x;
;
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_x
	bcc     L070F
	inx
L070F:	sta     _largeindex
	stx     _largeindex+1
;
; temp = tinyhoney[largeindex];
;
	lda     #<(_tinyhoney)
	sta     ptr1
	lda     #>(_tinyhoney)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	sta     _temp
;
; for(index = 0; index < 5; index++){
;
	lda     #$00
	sta     _index
L0712:	lda     _index
	cmp     #$05
	bcs     L06D9
;
; if(temp == pellet_tiles[index]){
;
	ldy     _index
	lda     _pellet_tiles,y
	cmp     _temp
	bne     L06E0
;
; one_vram_buffer(blank_tiles[frame_counter%5], NTADR_A(temp_x,temp_y));
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_blank_tiles)
	sta     ptr1+1
	ldy     #<(_blank_tiles)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _temp_x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; else if(temp == blank_tiles[index]){
;
L06E0:	ldy     _index
	lda     _blank_tiles,y
	cmp     _temp
;
; break;
;
	beq     L06D9
;
; for(index = 0; index < 5; index++){
;
	inc     _index
	jmp     L0712
;
; }
;
L06D9:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if(temp_y >= 0xf0) return 0;
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L0714
	txa
	rts
;
; temp = tinyhoney[(temp_y >> 3 << 5) + temp_x >> 3];
;
L0714:	lda     _temp_y
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_x
	bcc     L0713
	inx
L0713:	jsr     shrax3
	sta     ptr1
	txa
	clc
	adc     #>(_tinyhoney)
	sta     ptr1+1
	ldy     #<(_tinyhoney)
	lda     (ptr1),y
	sta     _temp
;
; if(temp == 0xc6 || temp == 0xc7 || temp == 0xc8 || temp == 0xc9 || temp == 0xca){
;
	cmp     #$C6
	beq     L0715
	lda     _temp
	cmp     #$C7
	beq     L0715
	cmp     #$C8
	beq     L0715
	cmp     #$C9
	beq     L0715
	cmp     #$CA
	bne     L0716
;
; return 0;
;
L0715:	ldx     #$00
	txa
	rts
;
; else if(temp == 0xb6 || temp == 0xb7 || temp == 0xb8 || temp == 0xb9 || temp == 0xba){
;
L0716:	lda     _temp
	cmp     #$B6
	beq     L0717
	cmp     #$B7
	beq     L0717
	cmp     #$B8
	beq     L0717
	cmp     #$B9
	beq     L0717
	cmp     #$BA
	beq     L0717
	ldx     #$00
	jmp     L0718
;
; return 0;
;
L0717:	ldx     #$00
	txa
	rts
;
; return 1; //debug: 0 for no collision
;
L0718:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp_x = Generic.x;
;
	lda     _Generic
	sta     _temp_x
;
; eject_L = temp_x | 0xf0;
;
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L071A
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L071A:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L071C
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L071C:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp_x = Generic.x + Generic.width;
;
	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; eject_R = (temp_x + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L071F
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L071F:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0721
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L0721:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0723
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L0723:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0725
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L0725:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; eject_D = (temp_y + 1) & 0x0f;
;
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L0728
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L0728:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if(bg_collision_sub() ) return 1;
;
	jsr     _bg_collision_sub
	tax
	beq     L072A
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L072A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; one_vram_buffer(0x63, NTADR_A(17,1));
;
	lda     #$63
	jsr     pusha
	ldx     #$20
	lda     #$31
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x63, NTADR_A(21,1));
;
	lda     #$63
	jsr     pusha
	ldx     #$20
	lda     #$35
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x63, NTADR_A(22,1));
;
	lda     #$63
	jsr     pusha
	ldx     #$20
	lda     #$36
	jsr     _one_vram_buffer
;
; frame_counter++;
;
L04C3:	inc     _frame_counter
;
; one_vram_buffer(0x58, NTADR_A(6,1));  
;
	lda     #$58
	jsr     pusha
	ldx     #$20
	lda     #$26
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.x >> 8 & 0xff) >> 4;
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(7,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$27
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.x >> 8 & 0x0f);
;
	lda     _BoxGuy1+1
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(8,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$28
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x59, NTADR_A(10,1));
;
	lda     #$59
	jsr     pusha
	ldx     #$20
	lda     #$2A
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.y >> 8 & 0xff) >> 4;
;
	lda     _BoxGuy1+3
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(11,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$2B
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.y >> 8 & 0x0f);
;
	lda     _BoxGuy1+3
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(12,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$2C
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x54, NTADR_A(14,1));
;
	lda     #$54
	jsr     pusha
	ldx     #$20
	lda     #$2E
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.x >> 8 >> 3 & 0xff) >> 4; 
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(15,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$2F
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.x >> 8 >> 3 & 0x0f);
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(16,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$30
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x55, NTADR_A(18,1));
;
	lda     #$55
	jsr     pusha
	ldx     #$20
	lda     #$32
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.y >> 8 >> 3 & 0xff) >> 4; 
;
	lda     _BoxGuy1+3
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(19,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$33
	jsr     _one_vram_buffer
;
; temp1 = (BoxGuy1.y >> 8 >> 3 & 0x0f);
;
	lda     _BoxGuy1+3
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(20,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$34
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x57, NTADR_A(22,1));
;
	lda     #$57
	jsr     pusha
	ldx     #$20
	lda     #$36
	jsr     _one_vram_buffer
;
; largeindex = ((BoxGuy1.y >> 8 >> 3) << 5) + (BoxGuy1.x >> 8 >> 3);
;
	ldx     #$00
	lda     _BoxGuy1+3
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _largeindex
	lda     #$00
	adc     ptr1+1
	sta     _largeindex+1
;
; temp = tinyhoney[largeindex];
;
	lda     #<(_tinyhoney)
	sta     ptr1
	lda     #>(_tinyhoney)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	sta     _temp
;
; temp1 = (temp & 0xff) >> 4; 
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(23,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$37
	jsr     _one_vram_buffer
;
; temp1 = (temp & 0x0f);
;
	lda     _temp
	and     #$0F
	sta     _temp1
;
; one_vram_buffer(0x30 + temp1, NTADR_A(24,1));
;
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$38
	jsr     _one_vram_buffer
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; doublepad = pad_poll_4score_1_3();
;
	jsr     _pad_poll_4score_1_3
	sta     _doublepad
	stx     _doublepad+1
;
; pad1 = high_byte(doublepad); //the high byte is the first controller's input
;
	lda     _doublepad+1
	sta     _pad1
;
; pad3 = low_byte(doublepad); // low byte is the third controller's input
;
	lda     _doublepad
	sta     _pad3
;
; doublepad = pad_poll_4score_2_4();
;
	jsr     _pad_poll_4score_2_4
	sta     _doublepad
	stx     _doublepad+1
;
; pad2 = high_byte(doublepad);
;
	lda     _doublepad+1
	sta     _pad2
;
; pad4 = low_byte(doublepad);
;
	lda     _doublepad
	sta     _pad4
;
; GenericBoxGuy = BoxGuy1;
;
	lda     _BoxGuy1+3
	sta     sreg+1
	lda     _BoxGuy1+2
	sta     sreg
	ldx     _BoxGuy1+1
	lda     _BoxGuy1
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad1;
;
	lda     _pad1
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy1.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy1+1
	lda     _GenericBoxGuy
	sta     _BoxGuy1
;
; BoxGuy1.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy1+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy1+2
;
; GenericBoxGuy = BoxGuy2;
;
	lda     _BoxGuy2+3
	sta     sreg+1
	lda     _BoxGuy2+2
	sta     sreg
	ldx     _BoxGuy2+1
	lda     _BoxGuy2
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad2;
;
	lda     _pad2
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy2.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy2+1
	lda     _GenericBoxGuy
	sta     _BoxGuy2
;
; BoxGuy2.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy2+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy2+2
;
; GenericBoxGuy = BoxGuy3;
;
	lda     _BoxGuy3+3
	sta     sreg+1
	lda     _BoxGuy3+2
	sta     sreg
	ldx     _BoxGuy3+1
	lda     _BoxGuy3
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad3;
;
	lda     _pad3
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy3.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy3+1
	lda     _GenericBoxGuy
	sta     _BoxGuy3
;
; BoxGuy3.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy3+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy3+2
;
; GenericBoxGuy = BoxGuy4;
;
	lda     _BoxGuy4+3
	sta     sreg+1
	lda     _BoxGuy4+2
	sta     sreg
	ldx     _BoxGuy4+1
	lda     _BoxGuy4
	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
	ldy     sreg
	sty     _GenericBoxGuy+2
	ldy     sreg+1
	sty     _GenericBoxGuy+3
;
; generic_pad = pad4;
;
	lda     _pad4
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy4.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _BoxGuy4+1
	lda     _GenericBoxGuy
	sta     _BoxGuy4
;
; BoxGuy4.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy4+2+1
	lda     _GenericBoxGuy+2
	sta     _BoxGuy4+2
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1){
;
	jmp     L04C3

.endproc

