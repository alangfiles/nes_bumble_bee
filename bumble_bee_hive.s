;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.import		_pad_poll_4score_1_3
	.import		_pad_poll_4score_2_4
	.export		_gamesprites_win
	.export		_gamesprites_empty
	.export		_gamesprites_smallbee1left0_data
	.export		_gamesprites_smallbee2left0_data
	.export		_gamesprites_smallbeeleft1_data
	.export		_gamesprites_smallbee2left1_data
	.export		_gamesprites_smallbeeleft2_data
	.export		_gamesprites_smallbee2left2_data
	.export		_gamesprites_smallbeeright0_data
	.export		_gamesprites_smallbeeright1_data
	.export		_gamesprites_smallbeeright2_data
	.export		_gamesprites_smallbee2right0_data
	.export		_gamesprites_smallbee2right1_data
	.export		_gamesprites_smallbee2right2_data
	.export		_gamesprites_bigbeeleft0_data
	.export		_gamesprites_bigbeeleft1_data
	.export		_gamesprites_bigbeeleft2_data
	.export		_gamesprites_bigbeeright0_data
	.export		_gamesprites_bigbeeright1_data
	.export		_gamesprites_bigbeeright2_data
	.export		_gamesprites_bigbee2left0_data
	.export		_gamesprites_bigbee2left1_data
	.export		_gamesprites_bigbee2left2_data
	.export		_gamesprites_bigbee2right0_data
	.export		_gamesprites_bigbee2right1_data
	.export		_gamesprites_bigbee2right2_data
	.export		_gamesprites_smallduck1left0_data
	.export		_gamesprites_smallduckleft1_data
	.export		_gamesprites_smallduckleft2_data
	.export		_gamesprites_smallduck2left0_data
	.export		_gamesprites_smallduck2left1_data
	.export		_gamesprites_smallduck2left2_data
	.export		_gamesprites_smallduck1right0_data
	.export		_gamesprites_smallduckright1_data
	.export		_gamesprites_smallduckright2_data
	.export		_gamesprites_smallduck2right0_data
	.export		_gamesprites_smallduck2right1_data
	.export		_gamesprites_smallduck2right2_data
	.export		_gamesprites_box1_data
	.export		_gamesprites_box2_data
	.export		_gamesprites_box3_data
	.export		_gamesprites_box4_data
	.export		_gamesprites_quackright_data
	.export		_gamesprites_quackleft_data
	.export		_gamesprites_quackup_data
	.export		_gamesprites_quackdown_data
	.export		_gamesprites_powerup_data
	.export		_gamesprites_big3_data
	.export		_gamesprites_big2_data
	.export		_gamesprites_big1_data
	.export		_gamesprites_blank_data
	.export		_doublepad
	.export		_generic_pad
	.export		_turbo_p1
	.export		_turbo_p2
	.export		_turbo_p3
	.export		_turbo_p4
	.export		_prev_pad1
	.export		_prev_pad2
	.export		_prev_pad3
	.export		_prev_pad4
	.export		_pad1
	.export		_pad2
	.export		_pad3
	.export		_pad4
	.export		_game_mode
	.export		_winner
	.export		_game_frame_timer
	.export		_game_timer
	.export		_speed_option
	.export		_current_speed
	.export		_force_redraw
	.export		_use_turbo
	.export		_turbo_amount
	.export		_ducks_go_faster_over_time
	.export		_map_positions
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_tempint
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_hero_velocity_x
	.export		_hero_velocity_y
	.export		_old_x
	.export		_old_y
	.export		_temp
	.export		_temp_x
	.export		_temp_y
	.export		_temp_x2
	.export		_temp_y2
	.export		_largeindex
	.export		_song
	.export		_bit_index
	.export		_bit_offset
	.export		_frame_counter
	.export		_ai_counter
	.export		_current_player
	.export		_team1_score
	.export		_team2_score
	.export		_team1_wins
	.export		_team2_wins
	.export		_win_reason
	.export		_powerup1
	.export		_powerup2
	.export		_powerup3
	.export		_powerup4
	.export		_bee1_bigbee_timer
	.export		_bee3_bigbee_timer
	.export		_sprite_rotation
	.export		_anim_frame_1
	.export		_anim_frame_2
	.export		_anim_frame_3
	.export		_anim_frame_4
	.export		_consumed_dots
	.export		_start_hold_timer
	.export		_start_held
	.export		_combmapwoflowers
	.export		_settings
	.export		_title
	.export		_Generic
	.export		_quack2
	.export		_quack4
	.export		_quack2_cooldown
	.export		_quack4_cooldown
	.export		_stun_p1
	.export		_stun_p2
	.export		_stun_p3
	.export		_stun_p4
	.export		_GenericBoxGuy
	.export		_BoxGuy1
	.export		_BoxGuy2
	.export		_BoxGuy3
	.export		_BoxGuy4
	.export		_palette_bg
	.export		_palette_sp
	.export		_palette_title_bg
	.export		_palette_options_bg
	.export		_palette_combsandplants_bg
	.export		_palette_bg_combmap
	.export		_palette_outdoors_bg
	.export		_metatiles1
	.export		_load_room
	.export		_draw_sprites
	.export		_draw_player_1
	.export		_draw_player_2
	.export		_draw_player_3
	.export		_draw_player_4
	.export		_movement
	.export		_check_tile_and_collect
	.export		_debug_extras
	.export		_read_controllers
	.export		_seeker_ai
	.export		_chaser_ai
	.export		_game_loop
	.export		_title_loop
	.export		_options_loop
	.export		_gameover_loop
	.export		_init_game_loop
	.export		_init_options_loop
	.export		_init_gameover_loop
	.export		_init_title_loop
	.export		_init_system
	.export		_clear_background
	.export		_update_hud
	.export		_init_roundover
	.export		_start_round
	.export		_roundover_loop
	.export		_game_counters
	.export		_quack_movement
	.export		_bg_collision_sub
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_sprite_collision
	.export		_check_powerup_collision
	.export		_main
	.export		_quack_tile_solid
	.export		_pellet_tiles
	.export		_blank_tiles
	.export		_is_dot_consumed
	.export		_mark_dot_consumed

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$2800
	.res	2,$00
_BoxGuy2:
	.word	$8000
	.word	$3000
	.res	2,$00
_BoxGuy3:
	.word	$A000
	.word	$3000
	.res	2,$00
_BoxGuy4:
	.word	$C000
	.word	$4000
	.res	2,$00

.segment	"RODATA"

_gamesprites_win:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$00
	.byte	$80
_gamesprites_empty:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$00
	.byte	$80
_gamesprites_smallbee1left0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$01
	.byte	$80
_gamesprites_smallbeeleft1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$01
	.byte	$80
_gamesprites_smallbeeleft2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$01
	.byte	$80
_gamesprites_smallbeeright0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$28
	.byte	$40
	.byte	$80
_gamesprites_smallbeeright1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$2A
	.byte	$40
	.byte	$80
_gamesprites_smallbeeright2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$2C
	.byte	$40
	.byte	$80
_gamesprites_smallbee2right0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$28
	.byte	$41
	.byte	$80
_gamesprites_smallbee2right1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$2A
	.byte	$41
	.byte	$80
_gamesprites_smallbee2right2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$2C
	.byte	$41
	.byte	$80
_gamesprites_bigbeeleft0_data:
	.byte	$FE
	.byte	$FE
	.byte	$47
	.byte	$00
	.byte	$FE
	.byte	$FA
	.byte	$37
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$48
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$38
	.byte	$00
	.byte	$80
_gamesprites_bigbeeleft1_data:
	.byte	$FE
	.byte	$FE
	.byte	$49
	.byte	$00
	.byte	$02
	.byte	$FA
	.byte	$39
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$3A
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$4A
	.byte	$00
	.byte	$80
_gamesprites_bigbeeleft2_data:
	.byte	$FE
	.byte	$FE
	.byte	$4B
	.byte	$00
	.byte	$FE
	.byte	$FA
	.byte	$3B
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$3C
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$4C
	.byte	$00
	.byte	$80
_gamesprites_bigbeeright0_data:
	.byte	$06
	.byte	$FE
	.byte	$47
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$37
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$48
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$38
	.byte	$40
	.byte	$80
_gamesprites_bigbeeright1_data:
	.byte	$06
	.byte	$FE
	.byte	$49
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$39
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$3A
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$4A
	.byte	$40
	.byte	$80
_gamesprites_bigbeeright2_data:
	.byte	$06
	.byte	$FE
	.byte	$4B
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$3B
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$3C
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$4C
	.byte	$40
	.byte	$80
_gamesprites_bigbee2left0_data:
	.byte	$FE
	.byte	$FE
	.byte	$47
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$37
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$48
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$38
	.byte	$01
	.byte	$80
_gamesprites_bigbee2left1_data:
	.byte	$FE
	.byte	$FE
	.byte	$49
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$39
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$3A
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$4A
	.byte	$01
	.byte	$80
_gamesprites_bigbee2left2_data:
	.byte	$FE
	.byte	$FE
	.byte	$4B
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$3B
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$3C
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$4C
	.byte	$01
	.byte	$80
_gamesprites_bigbee2right0_data:
	.byte	$06
	.byte	$FE
	.byte	$47
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$37
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$48
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$38
	.byte	$41
	.byte	$80
_gamesprites_bigbee2right1_data:
	.byte	$06
	.byte	$FE
	.byte	$49
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$39
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$3A
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$4A
	.byte	$41
	.byte	$80
_gamesprites_bigbee2right2_data:
	.byte	$06
	.byte	$FE
	.byte	$4B
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$3B
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$3C
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$4C
	.byte	$41
	.byte	$80
_gamesprites_smallduck1left0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$02
	.byte	$80
_gamesprites_smallduckleft1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$02
	.byte	$80
_gamesprites_smallduckleft2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$42
	.byte	$80
_gamesprites_smallduck2left0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$03
	.byte	$80
_gamesprites_smallduck2left1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$03
	.byte	$80
_gamesprites_smallduck2left2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$43
	.byte	$80
_gamesprites_smallduck1right0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$02
	.byte	$80
_gamesprites_smallduckright1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$02
	.byte	$80
_gamesprites_smallduckright2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$42
	.byte	$80
_gamesprites_smallduck2right0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$03
	.byte	$80
_gamesprites_smallduck2right1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$03
	.byte	$80
_gamesprites_smallduck2right2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$43
	.byte	$80
_gamesprites_box1_data:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$80
_gamesprites_box2_data:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$01
	.byte	$80
_gamesprites_box3_data:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$02
	.byte	$80
_gamesprites_box4_data:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$03
	.byte	$80
_gamesprites_quackright_data:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$80
_gamesprites_quackleft_data:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$40
	.byte	$80
_gamesprites_quackup_data:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$80
_gamesprites_quackdown_data:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$80
	.byte	$80
_gamesprites_powerup_data:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$80
_gamesprites_big3_data:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$15
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$07
	.byte	$83
	.byte	$10
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_big2_data:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$07
	.byte	$83
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$07
	.byte	$43
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$07
	.byte	$C3
	.byte	$08
	.byte	$20
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$05
	.byte	$43
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_big1_data:
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$05
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$05
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$17
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_blank_data:
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$03
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$43
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$43
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$C3
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_combmapwoflowers:
	.byte	$A7
	.byte	$B6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$EE
	.byte	$EF
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$AB
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$B6
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A8
	.byte	$5E
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5B
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$EE
	.byte	$EF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EE
	.byte	$EF
	.byte	$EE
	.byte	$EF
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$B6
	.byte	$B8
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$DE
	.byte	$DF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B8
	.byte	$CA
	.byte	$C8
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C8
	.byte	$C8
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C9
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C9
	.byte	$B8
	.byte	$B8
	.byte	$FB
	.byte	$A7
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C9
	.byte	$BE
	.byte	$BF
	.byte	$EB
	.byte	$B6
	.byte	$CC
	.byte	$CB
	.byte	$DD
	.byte	$DF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C8
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$FB
	.byte	$B6
	.byte	$CC
	.byte	$CF
	.byte	$C6
	.byte	$8C
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$8D
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EB
	.byte	$CA
	.byte	$C6
	.byte	$EB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$A7
	.byte	$C6
	.byte	$EA
	.byte	$B6
	.byte	$CB
	.byte	$DF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$8F
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FA
	.byte	$B8
	.byte	$DF
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$9C
	.byte	$CA
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$CA
	.byte	$C8
	.byte	$A7
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C7
	.byte	$EB
	.byte	$B9
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$8F
	.byte	$C6
	.byte	$C9
	.byte	$8E
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$ED
	.byte	$BF
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FD
	.byte	$DF
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$FB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C8
	.byte	$C8
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$A7
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FB
	.byte	$B6
	.byte	$BE
	.byte	$EC
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C7
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$DE
	.byte	$DF
	.byte	$C8
	.byte	$EB
	.byte	$B6
	.byte	$DE
	.byte	$FC
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$BE
	.byte	$BF
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$9C
	.byte	$9C
	.byte	$F8
	.byte	$F9
	.byte	$C7
	.byte	$EA
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FA
	.byte	$B6
	.byte	$B6
	.byte	$EA
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$E8
	.byte	$E9
	.byte	$C6
	.byte	$EB
	.byte	$99
	.byte	$A7
	.byte	$FA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EA
	.byte	$C6
	.byte	$ED
	.byte	$BC
	.byte	$DC
	.byte	$EC
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$ED
	.byte	$BC
	.byte	$DC
	.byte	$EC
	.byte	$C9
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FB
	.byte	$C6
	.byte	$FA
	.byte	$C6
	.byte	$FD
	.byte	$BB
	.byte	$CB
	.byte	$FC
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FD
	.byte	$BB
	.byte	$CB
	.byte	$FC
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$9E
	.byte	$FB
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$A7
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$AB
	.byte	$B6
	.byte	$EB
	.byte	$B8
	.byte	$B8
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$EB
	.byte	$A7
	.byte	$A7
	.byte	$FB
	.byte	$B8
	.byte	$B8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$CD
	.byte	$BC
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$A8
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$DB
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$AF
	.byte	$B6
	.byte	$A7
	.byte	$B9
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B7
	.byte	$A8
	.byte	$DE
	.byte	$DD
	.byte	$DD
	.byte	$DF
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$00
	.byte	$0C
	.byte	$0F
	.byte	$07
	.byte	$0D
	.byte	$0F
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_settings:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$C1
	.byte	$C2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C5
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C2
	.byte	$C5
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$F2
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$B5
	.byte	$53
	.byte	$45
	.byte	$54
	.byte	$54
	.byte	$49
	.byte	$4E
	.byte	$47
	.byte	$53
	.byte	$B5
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D3
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$A0
	.byte	$A1
	.byte	$C2
	.byte	$C1
	.byte	$F2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$A0
	.byte	$A1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$0A
	.byte	$8A
	.byte	$AA
	.byte	$AA
	.byte	$29
	.byte	$0B
	.byte	$8A
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C8
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$06
	.byte	$0A
	.byte	$0A
_title:
	.byte	$BE
	.byte	$BF
	.byte	$8C
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A9
	.byte	$A7
	.byte	$BE
	.byte	$CD
	.byte	$BF
	.byte	$CE
	.byte	$CF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$BB
	.byte	$CF
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$8D
	.byte	$B6
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$A7
	.byte	$9C
	.byte	$A7
	.byte	$B6
	.byte	$BE
	.byte	$E7
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$99
	.byte	$DE
	.byte	$D8
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$8D
	.byte	$B6
	.byte	$DE
	.byte	$D8
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$DE
	.byte	$DB
	.byte	$D7
	.byte	$8D
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DD
	.byte	$D8
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$8D
	.byte	$D9
	.byte	$DB
	.byte	$BF
	.byte	$B6
	.byte	$A7
	.byte	$9C
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$9E
	.byte	$B6
	.byte	$B6
	.byte	$9D
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$DA
	.byte	$BF
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B4
	.byte	$D9
	.byte	$DF
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$8E
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$9F
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$B6
	.byte	$D2
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$D1
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$AB
	.byte	$A7
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$A7
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A8
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A9
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$A9
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$99
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$A7
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$B4
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A4
	.byte	$D2
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$D1
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B8
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$99
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B5
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$53
	.byte	$B6
	.byte	$B6
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$B5
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A9
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$3B
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$35
	.byte	$B6
	.byte	$42
	.byte	$52
	.byte	$49
	.byte	$41
	.byte	$4E
	.byte	$B6
	.byte	$3C
	.byte	$B6
	.byte	$41
	.byte	$4C
	.byte	$41
	.byte	$4E
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$CE
	.byte	$CF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$A7
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$BF
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$CE
	.byte	$CF
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$35
	.byte	$26
	.byte	$07
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$21
	.byte	$16
	.byte	$30
_palette_sp:
	.byte	$0F
	.byte	$17
	.byte	$26
	.byte	$38
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$38
	.byte	$0F
	.byte	$17
	.byte	$20
	.byte	$26
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$38
_palette_title_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$07
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$21
	.byte	$11
_palette_options_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$24
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$27
	.byte	$2A
	.byte	$1B
_palette_combsandplants_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$1A
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$21
	.byte	$15
	.byte	$30
_palette_bg_combmap:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$21
	.byte	$16
	.byte	$30
_palette_outdoors_bg:
	.byte	$0F
	.byte	$30
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$35
	.byte	$26
	.byte	$07
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$21
	.byte	$11
_metatiles1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_pellet_tiles:
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
_blank_tiles:
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
L1BCF:
	.byte	$54,$45,$41,$4D,$20,$32,$20,$57,$49,$4E,$53,$20,$54,$48,$45,$20
	.byte	$4D,$41,$54,$43,$48,$21,$00
L1BC2:
	.byte	$54,$45,$41,$4D,$20,$31,$20,$57,$49,$4E,$53,$20,$54,$48,$45,$20
	.byte	$4D,$41,$54,$43,$48,$21,$00
L1B78:
	.byte	$43,$4F,$4C,$4C,$45,$43,$54,$45,$44,$20,$31,$30,$30,$20,$44,$4F
	.byte	$54,$53,$00
L1B85:
	.byte	$46,$52,$49,$45,$4E,$44,$4C,$59,$20,$42,$45,$45,$20,$45,$41,$54
	.byte	$45,$4E,$00
L1B9F:
	.byte	$42,$49,$47,$42,$45,$45,$20,$41,$54,$45,$20,$44,$55,$43,$4B,$21
	.byte	$00
L1B92:
	.byte	$45,$4E,$45,$4D,$59,$20,$42,$45,$45,$20,$45,$41,$54,$45,$4E,$00
L1B5F:
	.byte	$54,$45,$41,$4D,$20,$31,$20,$57,$49,$4E,$53,$21,$00
L1B6C:
	.byte	$54,$45,$41,$4D,$20,$32,$20,$57,$49,$4E,$53,$21,$00
L1BD9:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00
L1BAA:
	.byte	$54,$49,$4D,$45,$20,$55,$50,$21,$00
L1B1A:
	.byte	$20,$20,$46,$41,$53,$54,$20,$00
L1B01:
	.byte	$20,$20,$53,$4C,$4F,$57,$20,$00
L1B0F:
	.byte	$52,$45,$47,$55,$4C,$41,$52,$00
L1B42:
	.byte	$46,$52,$45,$4E,$5A,$59,$00
L1B38:
	.byte	$4D,$55,$53,$49,$43,$3A,$00
L1AF4:
	.byte	$53,$50,$45,$45,$44,$3A,$00
L1B24:
	.byte	$4D,$41,$50,$3A,$00
L1B2E:
	.byte	$48,$49,$56,$45,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_doublepad:
	.res	2,$00
_generic_pad:
	.res	1,$00
_turbo_p1:
	.res	1,$00
_turbo_p2:
	.res	1,$00
_turbo_p3:
	.res	1,$00
_turbo_p4:
	.res	1,$00
_prev_pad1:
	.res	1,$00
_prev_pad2:
	.res	1,$00
_prev_pad3:
	.res	1,$00
_prev_pad4:
	.res	1,$00
_pad1:
	.res	1,$00
_pad2:
	.res	1,$00
_pad3:
	.res	1,$00
_pad4:
	.res	1,$00
_game_mode:
	.res	1,$00
_winner:
	.res	1,$00
_game_frame_timer:
	.res	1,$00
_game_timer:
	.res	1,$00
_speed_option:
	.res	2,$00
_current_speed:
	.res	2,$00
_force_redraw:
	.res	1,$00
_use_turbo:
	.res	1,$00
_turbo_amount:
	.res	1,$00
_ducks_go_faster_over_time:
	.res	1,$00
_map_positions:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_tempint:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_hero_velocity_x:
	.res	2,$00
_hero_velocity_y:
	.res	2,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp_x2:
	.res	1,$00
_temp_y2:
	.res	1,$00
_largeindex:
	.res	2,$00
_song:
	.res	1,$00
_bit_index:
	.res	1,$00
_bit_offset:
	.res	1,$00
_frame_counter:
	.res	1,$00
_ai_counter:
	.res	1,$00
_current_player:
	.res	1,$00
_team1_score:
	.res	1,$00
_team2_score:
	.res	1,$00
_team1_wins:
	.res	1,$00
_team2_wins:
	.res	1,$00
_win_reason:
	.res	1,$00
_powerup1:
	.res	1,$00
_powerup2:
	.res	1,$00
_powerup3:
	.res	1,$00
_powerup4:
	.res	1,$00
_bee1_bigbee_timer:
	.res	1,$00
_bee3_bigbee_timer:
	.res	1,$00
_sprite_rotation:
	.res	1,$00
_anim_frame_1:
	.res	1,$00
_anim_frame_2:
	.res	1,$00
_anim_frame_3:
	.res	1,$00
_anim_frame_4:
	.res	1,$00
.segment	"BSS"
_consumed_dots:
	.res	128,$00
_start_hold_timer:
	.res	1,$00
_start_held:
	.res	1,$00
_Generic:
	.res	4,$00
_quack2:
	.res	6,$00
_quack4:
	.res	6,$00
_quack2_cooldown:
	.res	1,$00
_quack4_cooldown:
	.res	1,$00
_stun_p1:
	.res	1,$00
_stun_p2:
	.res	1,$00
_stun_p3:
	.res	1,$00
_stun_p4:
	.res	1,$00
_GenericBoxGuy:
	.res	6,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	lda     #$00
	sta     _largeindex
	sta     _largeindex+1
L11AD:	ldx     _largeindex+1
	cpx     #$04
	bcs     L11AE
;
; if(game_mode == MODE_TITLE){
;
	lda     _game_mode
	bne     L1C67
;
; vram_put(title[largeindex]);
;
	lda     #<(_title)
	sta     ptr1
	lda     #>(_title)
;
; } else if (game_mode == MODE_OPTIONS){
;
	jmp     L1C6C
L1C67:	lda     _game_mode
	cmp     #$01
	bne     L11BC
;
; vram_put(settings[largeindex]);
;
	lda     #<(_settings)
	sta     ptr1
	lda     #>(_settings)
;
; } else{
;
	jmp     L1C6C
;
; vram_put(combmapwoflowers[largeindex]);
;
L11BC:	lda     #<(_combmapwoflowers)
	sta     ptr1
	lda     #>(_combmapwoflowers)
L1C6C:	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	inc     _largeindex
	bne     L11AD
	inc     _largeindex+1
	jmp     L11AD
;
; ppu_on_all();
;
L11AE:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; if(powerup1 == 1)
;
	lda     _powerup1
	cmp     #$01
	bne     L1C6F
;
; oam_meta_spr(16, 32, gamesprites_powerup_data);
;
	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup2 == 1)
;
L1C6F:	lda     _powerup2
	cmp     #$01
	bne     L1C70
;
; oam_meta_spr(226, 32, gamesprites_powerup_data);
;
	jsr     decsp2
	lda     #$E2
	ldy     #$01
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup3 == 1)
;
L1C70:	lda     _powerup3
	cmp     #$01
	bne     L1C71
;
; oam_meta_spr(16, 208, gamesprites_powerup_data);
;
	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup4 == 1)
;
L1C71:	lda     _powerup4
	cmp     #$01
	bne     L11DB
;
; oam_meta_spr(226, 208, gamesprites_powerup_data);
;
	jsr     decsp2
	lda     #$E2
	ldy     #$01
	sta     (sp),y
	lda     #$D0
	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(quack2.moving){
;
L11DB:	lda     _quack2+5
	jeq     L11FC
;
; temp_x = quack2.x >> 8;
;
	lda     _quack2+1
	sta     _temp_x
;
; temp_y = quack2.y >> 8;
;
	lda     _quack2+3
	sta     _temp_y
;
; if(quack2.direction == DIR_LEFT){
;
	lda     _quack2+4
	cmp     #$02
	bne     L1C72
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackleft_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackleft_data)
	ldx     #>(_gamesprites_quackleft_data)
;
; } else if(quack2.direction == DIR_RIGHT){
;
	jmp     L1C6D
L1C72:	lda     _quack2+4
	cmp     #$03
	bne     L1C73
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackright_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackright_data)
	ldx     #>(_gamesprites_quackright_data)
;
; } else if(quack2.direction == DIR_DOWN){
;
	jmp     L1C6D
L1C73:	lda     _quack2+4
	cmp     #$01
	bne     L1C74
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackdown_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackdown_data)
	ldx     #>(_gamesprites_quackdown_data)
;
; } else if(quack2.direction == DIR_UP){
;
	jmp     L1C6D
L1C74:	lda     _quack2+4
	bne     L11FC
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackup_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackup_data)
	ldx     #>(_gamesprites_quackup_data)
L1C6D:	jsr     _oam_meta_spr
;
; if(quack4.moving){
;
L11FC:	lda     _quack4+5
	jeq     L1C78
;
; temp_x = quack4.x >> 8;
;
	lda     _quack4+1
	sta     _temp_x
;
; temp_y = quack4.y >> 8;
;
	lda     _quack4+3
	sta     _temp_y
;
; if(quack4.direction == DIR_LEFT){
;
	lda     _quack4+4
	cmp     #$02
	bne     L1C75
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackleft_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackleft_data)
	ldx     #>(_gamesprites_quackleft_data)
;
; } else if(quack4.direction == DIR_RIGHT){
;
	jmp     L1C6E
L1C75:	lda     _quack4+4
	cmp     #$03
	bne     L1C76
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackright_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackright_data)
	ldx     #>(_gamesprites_quackright_data)
;
; } else if(quack4.direction == DIR_DOWN){
;
	jmp     L1C6E
L1C76:	lda     _quack4+4
	cmp     #$01
	bne     L1C77
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackdown_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackdown_data)
	ldx     #>(_gamesprites_quackdown_data)
;
; } else if(quack4.direction == DIR_UP){
;
	jmp     L1C6E
L1C77:	lda     _quack4+4
	bne     L1C78
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackup_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackup_data)
	ldx     #>(_gamesprites_quackup_data)
L1C6E:	jsr     _oam_meta_spr
;
; switch(sprite_rotation & 0x03) { // Use only bottom 2 bits for 4 different orders
;
L1C78:	lda     _sprite_rotation
	and     #$03
;
; }
;
	beq     L1227
	cmp     #$01
	beq     L122D
	cmp     #$02
	beq     L1233
	cmp     #$03
	beq     L1239
	rts
;
; draw_player_1();
;
L1227:	jsr     _draw_player_1
;
; draw_player_2();
;
	jsr     _draw_player_2
;
; draw_player_3();
;
	jsr     _draw_player_3
;
; draw_player_4();
;
	jmp     _draw_player_4
;
; draw_player_2();
;
L122D:	jsr     _draw_player_2
;
; draw_player_1();
;
	jsr     _draw_player_1
;
; draw_player_4();
;
	jsr     _draw_player_4
;
; draw_player_3();
;
	jmp     _draw_player_3
;
; draw_player_3();
;
L1233:	jsr     _draw_player_3
;
; draw_player_4();
;
	jsr     _draw_player_4
;
; draw_player_1();
;
	jsr     _draw_player_1
;
; draw_player_2();
;
	jmp     _draw_player_2
;
; draw_player_4();
;
L1239:	jsr     _draw_player_4
;
; draw_player_3();
;
	jsr     _draw_player_3
;
; draw_player_2();
;
	jsr     _draw_player_2
;
; draw_player_1();
;
	jmp     _draw_player_1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_1 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_1: near

.segment	"CODE"

;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if(stun_p1 > 0 && frame_counter %2 == 0){
;
	lda     _stun_p1
	beq     L1C7D
	lda     _frame_counter
	and     #$01
	bne     L1C7D
;
; return; //flash when stunned
;
	rts
;
; if ((frame_counter % 10) == 0) {
;
L1C7D:	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L124E
	cmp     #$00
	bne     L124E
;
; anim_frame_1 = (anim_frame_1 + 1) % 3;
;
	lda     _anim_frame_1
	clc
	adc     #$01
	bcc     L1255
	inx
L1255:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_1
;
; if (bee1_bigbee_timer > 0) {
;
L124E:	lda     _bee1_bigbee_timer
	jeq     L1C81
;
; if(bee1_bigbee_timer < 5){
;
	cmp     #$05
	bcs     L1C7E
;
; if ((frame_counter % 4) < 2) {
;
	lda     _frame_counter
	and     #$03
	cmp     #$02
;
; return; // Skip drawing this frame
;
	bcs     L1C7E
;
; }
;
	rts
;
; if (BoxGuy1.direction == DIR_LEFT) {
;
L1C7E:	lda     _BoxGuy1+4
	cmp     #$02
	bne     L1C7F
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L1264
	cmp     #$01
	beq     L126A
	cmp     #$02
	beq     L1270
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft0_data); break;
;
L1264:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft0_data)
	ldx     #>(_gamesprites_bigbeeleft0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft1_data); break;
;
L126A:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft1_data)
	ldx     #>(_gamesprites_bigbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft2_data); break;
;
L1270:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft2_data)
	ldx     #>(_gamesprites_bigbeeleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy1.direction == DIR_RIGHT) {
;
L1C7F:	lda     _BoxGuy1+4
	cmp     #$03
	bne     L1C80
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L127C
	cmp     #$01
	beq     L1282
	cmp     #$02
	beq     L1288
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright0_data); break;
;
L127C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright0_data)
	ldx     #>(_gamesprites_bigbeeright0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright1_data); break;
;
L1282:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright1_data)
	ldx     #>(_gamesprites_bigbeeright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright2_data); break;
;
L1288:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright2_data)
	ldx     #>(_gamesprites_bigbeeright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_1) {
;
L1C80:	lda     _anim_frame_1
;
; }
;
	beq     L1292
	cmp     #$01
	beq     L1298
	cmp     #$02
	beq     L129E
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft0_data); break;
;
L1292:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft0_data)
	ldx     #>(_gamesprites_bigbeeleft0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft1_data); break;
;
L1298:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft1_data)
	ldx     #>(_gamesprites_bigbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft2_data); break;
;
L129E:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft2_data)
	ldx     #>(_gamesprites_bigbeeleft2_data)
	jmp     _oam_meta_spr
;
; if (BoxGuy1.direction == DIR_LEFT) {
;
L1C81:	lda     _BoxGuy1+4
	cmp     #$02
	bne     L1C82
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L12AA
	cmp     #$01
	beq     L12B0
	cmp     #$02
	beq     L12B6
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee1left0_data); break;
;
L12AA:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee1left0_data)
	ldx     #>(_gamesprites_smallbee1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft1_data); break;
;
L12B0:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft1_data)
	ldx     #>(_gamesprites_smallbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft2_data); break;
;
L12B6:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft2_data)
	ldx     #>(_gamesprites_smallbeeleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy1.direction == DIR_RIGHT) {
;
L1C82:	lda     _BoxGuy1+4
	cmp     #$03
	bne     L1C83
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L12C2
	cmp     #$01
	beq     L12C8
	cmp     #$02
	beq     L12CE
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright0_data); break;
;
L12C2:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright0_data)
	ldx     #>(_gamesprites_smallbeeright0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright1_data); break;
;
L12C8:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright1_data)
	ldx     #>(_gamesprites_smallbeeright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright2_data); break;
;
L12CE:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright2_data)
	ldx     #>(_gamesprites_smallbeeright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_1) {
;
L1C83:	lda     _anim_frame_1
;
; }
;
	beq     L12D8
	cmp     #$01
	beq     L12DE
	cmp     #$02
	beq     L12E4
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee1left0_data); break;
;
L12D8:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee1left0_data)
	ldx     #>(_gamesprites_smallbee1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft1_data); break;
;
L12DE:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft1_data)
	ldx     #>(_gamesprites_smallbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft2_data); break;
;
L12E4:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft2_data)
	ldx     #>(_gamesprites_smallbeeleft2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_2: near

.segment	"CODE"

;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if(stun_p2 > 0 && frame_counter %2 == 0){
;
	lda     _stun_p2
	beq     L1C88
	lda     _frame_counter
	and     #$01
	bne     L1C88
;
; return; //flash when stunned
;
	rts
;
; if ((frame_counter % 10) == 0 && BoxGuy2.moving) {
;
L1C88:	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L1C89
	cmp     #$00
	bne     L1C89
	lda     _BoxGuy2+5
	beq     L1C89
;
; anim_frame_2 = (anim_frame_2 + 1) % 3;
;
	lda     _anim_frame_2
	clc
	adc     #$01
	bcc     L1302
	inx
L1302:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_2
;
; if (BoxGuy2.direction == DIR_LEFT) {
;
L1C89:	lda     _BoxGuy2+4
	cmp     #$02
	bne     L1C8A
;
; switch(anim_frame_2) { 
;
	lda     _anim_frame_2
;
; }
;
	beq     L1309
	cmp     #$01
	beq     L130F
	cmp     #$02
	beq     L1315
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1left0_data); break;
;
L1309:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1left0_data)
	ldx     #>(_gamesprites_smallduck1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft1_data); break;
;
L130F:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft1_data)
	ldx     #>(_gamesprites_smallduckleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft2_data); break;
;
L1315:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft2_data)
	ldx     #>(_gamesprites_smallduckleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy2.direction == DIR_RIGHT) {
;
L1C8A:	lda     _BoxGuy2+4
	cmp     #$03
	bne     L1C8B
;
; switch(anim_frame_2) {
;
	lda     _anim_frame_2
;
; }
;
	beq     L1321
	cmp     #$01
	beq     L1327
	cmp     #$02
	beq     L132D
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1right0_data); break;
;
L1321:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1right0_data)
	ldx     #>(_gamesprites_smallduck1right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckright1_data); break;
;
L1327:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckright1_data)
	ldx     #>(_gamesprites_smallduckright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckright2_data); break;
;
L132D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckright2_data)
	ldx     #>(_gamesprites_smallduckright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_2) {
;
L1C8B:	lda     _anim_frame_2
;
; }
;
	beq     L1337
	cmp     #$01
	beq     L133D
	cmp     #$02
	beq     L1343
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1left0_data); break;
;
L1337:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1left0_data)
	ldx     #>(_gamesprites_smallduck1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft1_data); break;
;
L133D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft1_data)
	ldx     #>(_gamesprites_smallduckleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft2_data); break;
;
L1343:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft2_data)
	ldx     #>(_gamesprites_smallduckleft2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_3 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_3: near

.segment	"CODE"

;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if(stun_p3 > 0 && frame_counter %2 == 0){
;
	lda     _stun_p3
	beq     L1C90
	lda     _frame_counter
	and     #$01
	bne     L1C90
;
; return; //flash when stunned
;
	rts
;
; if ((frame_counter % 10) == 0) {
;
L1C90:	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L1358
	cmp     #$00
	bne     L1358
;
; anim_frame_3 = (anim_frame_3 + 1) % 3;
;
	lda     _anim_frame_3
	clc
	adc     #$01
	bcc     L135F
	inx
L135F:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_3
;
; if (bee3_bigbee_timer > 0) {
;
L1358:	lda     _bee3_bigbee_timer
	jeq     L1C94
;
; if(bee3_bigbee_timer < 5){
;
	cmp     #$05
	bcs     L1C91
;
; if ((frame_counter % 4) < 2) {
;
	lda     _frame_counter
	and     #$03
	cmp     #$02
;
; return; // Skip drawing this frame
;
	bcs     L1C91
;
; }
;
	rts
;
; if (BoxGuy3.direction == DIR_LEFT) {
;
L1C91:	lda     _BoxGuy3+4
	cmp     #$02
	bne     L1C92
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L136E
	cmp     #$01
	beq     L1374
	cmp     #$02
	beq     L137A
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left0_data); break;
;
L136E:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left0_data)
	ldx     #>(_gamesprites_bigbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left1_data); break;
;
L1374:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left1_data)
	ldx     #>(_gamesprites_bigbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left2_data); break;
;
L137A:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left2_data)
	ldx     #>(_gamesprites_bigbee2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy3.direction == DIR_RIGHT) {
;
L1C92:	lda     _BoxGuy3+4
	cmp     #$03
	bne     L1C93
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L1386
	cmp     #$01
	beq     L138C
	cmp     #$02
	beq     L1392
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right0_data); break;
;
L1386:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right0_data)
	ldx     #>(_gamesprites_bigbee2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right1_data); break;
;
L138C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right1_data)
	ldx     #>(_gamesprites_bigbee2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right2_data); break;
;
L1392:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right2_data)
	ldx     #>(_gamesprites_bigbee2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_3) {
;
L1C93:	lda     _anim_frame_3
;
; }
;
	beq     L139C
	cmp     #$01
	beq     L13A2
	cmp     #$02
	beq     L13A8
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left0_data); break;
;
L139C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left0_data)
	ldx     #>(_gamesprites_bigbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left1_data); break;
;
L13A2:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left1_data)
	ldx     #>(_gamesprites_bigbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left2_data); break;
;
L13A8:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left2_data)
	ldx     #>(_gamesprites_bigbee2left2_data)
	jmp     _oam_meta_spr
;
; if (BoxGuy3.direction == DIR_LEFT) {
;
L1C94:	lda     _BoxGuy3+4
	cmp     #$02
	bne     L1C95
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L13B4
	cmp     #$01
	beq     L13BA
	cmp     #$02
	beq     L13C0
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left0_data); break;
;
L13B4:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left0_data)
	ldx     #>(_gamesprites_smallbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left1_data); break;
;
L13BA:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left1_data)
	ldx     #>(_gamesprites_smallbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left2_data); break;
;
L13C0:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left2_data)
	ldx     #>(_gamesprites_smallbee2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy3.direction == DIR_RIGHT) {
;
L1C95:	lda     _BoxGuy3+4
	cmp     #$03
	bne     L1C96
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L13CC
	cmp     #$01
	beq     L13D2
	cmp     #$02
	beq     L13D8
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right0_data); break;
;
L13CC:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right0_data)
	ldx     #>(_gamesprites_smallbee2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right1_data); break;
;
L13D2:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right1_data)
	ldx     #>(_gamesprites_smallbee2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right2_data); break;
;
L13D8:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right2_data)
	ldx     #>(_gamesprites_smallbee2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_3) {
;
L1C96:	lda     _anim_frame_3
;
; }
;
	beq     L13E2
	cmp     #$01
	beq     L13E8
	cmp     #$02
	beq     L13EE
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left0_data); break;
;
L13E2:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left0_data)
	ldx     #>(_gamesprites_smallbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left1_data); break;
;
L13E8:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left1_data)
	ldx     #>(_gamesprites_smallbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left2_data); break;
;
L13EE:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left2_data)
	ldx     #>(_gamesprites_smallbee2left2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_4 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_4: near

.segment	"CODE"

;
; temp_x = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if(stun_p4 > 0 && frame_counter %2 == 0){
;
	lda     _stun_p4
	beq     L1C9B
	lda     _frame_counter
	and     #$01
	bne     L1C9B
;
; return; //flash when stunned
;
	rts
;
; if ((frame_counter % 10) == 0 && BoxGuy4.moving) {
;
L1C9B:	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L1C9C
	cmp     #$00
	bne     L1C9C
	lda     _BoxGuy4+5
	beq     L1C9C
;
; anim_frame_4 = (anim_frame_4 + 1) % 3;
;
	lda     _anim_frame_4
	clc
	adc     #$01
	bcc     L140C
	inx
L140C:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_4
;
; if (BoxGuy4.direction == DIR_LEFT) {
;
L1C9C:	lda     _BoxGuy4+4
	cmp     #$02
	bne     L1C9D
;
; switch(anim_frame_4) {
;
	lda     _anim_frame_4
;
; }
;
	beq     L1413
	cmp     #$01
	beq     L1419
	cmp     #$02
	beq     L141F
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left0_data); break;
;
L1413:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left0_data)
	ldx     #>(_gamesprites_smallduck2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left1_data); break;
;
L1419:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left1_data)
	ldx     #>(_gamesprites_smallduck2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left2_data); break;
;
L141F:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left2_data)
	ldx     #>(_gamesprites_smallduck2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy4.direction == DIR_RIGHT) {
;
L1C9D:	lda     _BoxGuy4+4
	cmp     #$03
	bne     L1C9E
;
; switch(anim_frame_4) {
;
	lda     _anim_frame_4
;
; }
;
	beq     L142B
	cmp     #$01
	beq     L1431
	cmp     #$02
	beq     L1437
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right0_data); break;
;
L142B:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right0_data)
	ldx     #>(_gamesprites_smallduck2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right1_data); break;
;
L1431:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right1_data)
	ldx     #>(_gamesprites_smallduck2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right2_data); break;
;
L1437:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right2_data)
	ldx     #>(_gamesprites_smallduck2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_4) {
;
L1C9E:	lda     _anim_frame_4
;
; }
;
	beq     L1441
	cmp     #$01
	beq     L1447
	cmp     #$02
	beq     L144D
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left0_data); break;
;
L1441:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left0_data)
	ldx     #>(_gamesprites_smallduck2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left1_data); break;
;
L1447:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left1_data)
	ldx     #>(_gamesprites_smallduck2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left2_data); break;
;
L144D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left2_data)
	ldx     #>(_gamesprites_smallduck2left2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if ((current_player == 1 && stun_p1 > 0) ||
;
	lda     _current_player
	cmp     #$01
	bne     L1CB1
	lda     _stun_p1
	bne     L1CBD
;
; (current_player == 2 && stun_p2 > 0) ||
;
L1CB1:	lda     _current_player
	cmp     #$02
	bne     L1CB4
	lda     _stun_p2
	bne     L1CBD
;
; (current_player == 3 && stun_p3 > 0) ||
;
L1CB4:	lda     _current_player
	cmp     #$03
	bne     L1CB7
	lda     _stun_p3
	bne     L1CBD
;
; (current_player == 4 && stun_p4 > 0)) {
;
L1CB7:	lda     _current_player
	cmp     #$04
	bne     L1586
	lda     _stun_p4
	beq     L1586
;
; return;
;
L1CBD:	rts
;
; old_x = GenericBoxGuy.x;
;
L1586:	lda     _GenericBoxGuy+1
	sta     _old_x+1
	lda     _GenericBoxGuy
	sta     _old_x
;
; if (generic_pad & PAD_B) { 
;
	lda     _generic_pad
	and     #$40
	jeq     L1CCA
;
; if (current_player == 2 && quack2.moving == 0 && quack2_cooldown == 0) { 
;
	lda     _current_player
	cmp     #$02
	jne     L1CC4
	lda     _quack2+5
	jne     L1CC4
	lda     _quack2_cooldown
	jne     L1CC4
;
; quack2.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _quack2+1
	lda     _GenericBoxGuy
	sta     _quack2
;
; quack2.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _quack2+2+1
	lda     _GenericBoxGuy+2
	sta     _quack2+2
;
; quack2.direction = GenericBoxGuy.direction;
;
	lda     _GenericBoxGuy+4
	sta     _quack2+4
;
; quack2_cooldown = QUACK_COOLDOWN;
;
	lda     #$0A
	sta     _quack2_cooldown
;
; if(quack2.direction == DIR_LEFT){
;
	lda     _quack2+4
	cmp     #$02
	bne     L1CC0
;
; quack2.x -= 0x0800; //move it 1 block to the left;
;
	lda     _quack2
	sec
	sbc     #$00
	sta     _quack2
	lda     _quack2+1
	sbc     #$08
	sta     _quack2+1
;
; } else if (quack2.direction == DIR_RIGHT){
;
	jmp     L1CC3
L1CC0:	lda     _quack2+4
	cmp     #$03
	bne     L1CC1
;
; quack2.x += 0x0800; 
;
	lda     #$00
	clc
	adc     _quack2
	sta     _quack2
	lda     #$08
	adc     _quack2+1
	sta     _quack2+1
;
; } else if (quack2.direction == DIR_UP){
;
	jmp     L1CC3
L1CC1:	lda     _quack2+4
	bne     L1CC2
;
; quack2.y -= 0x0800; 
;
	lda     _quack2+2
	sec
	sbc     #$00
	sta     _quack2+2
	lda     _quack2+2+1
	sbc     #$08
;
; } else if (quack2.direction == DIR_DOWN){
;
	jmp     L1CFD
L1CC2:	lda     _quack2+4
	cmp     #$01
	bne     L1CC3
;
; quack2.y += 0x0800; 
;
	lda     #$00
	clc
	adc     _quack2+2
	sta     _quack2+2
	lda     #$08
	adc     _quack2+2+1
L1CFD:	sta     _quack2+2+1
;
; quack2.moving = 1; 
;
L1CC3:	lda     #$01
	sta     _quack2+5
;
; if (current_player == 4 && quack4.moving == 0 && quack4_cooldown == 0) { 
;
L1CC4:	lda     _current_player
	cmp     #$04
	jne     L1CCA
	lda     _quack4+5
	jne     L1CCA
	lda     _quack4_cooldown
	jne     L1CCA
;
; quack4.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _quack4+1
	lda     _GenericBoxGuy
	sta     _quack4
;
; quack4.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _quack4+2+1
	lda     _GenericBoxGuy+2
	sta     _quack4+2
;
; quack4.direction = GenericBoxGuy.direction;
;
	lda     _GenericBoxGuy+4
	sta     _quack4+4
;
; quack4.moving = 1;
;
	lda     #$01
	sta     _quack4+5
;
; quack4_cooldown = QUACK_COOLDOWN;
;
	lda     #$0A
	sta     _quack4_cooldown
;
; if(quack4.direction == DIR_LEFT){
;
	lda     _quack4+4
	cmp     #$02
	bne     L1CC7
;
; quack4.x -= 0x0800; //move it 1 block to the left;
;
	lda     _quack4
	sec
	sbc     #$00
	sta     _quack4
	lda     _quack4+1
	sbc     #$08
	sta     _quack4+1
;
; } else if (quack4.direction == DIR_RIGHT){
;
	jmp     L1CCA
L1CC7:	lda     _quack4+4
	cmp     #$03
	bne     L1CC8
;
; quack4.x += 0x0800; 
;
	lda     #$00
	clc
	adc     _quack4
	sta     _quack4
	lda     #$08
	adc     _quack4+1
	sta     _quack4+1
;
; } else if (quack4.direction == DIR_UP){
;
	jmp     L1CCA
L1CC8:	lda     _quack4+4
	bne     L1CC9
;
; quack4.y -= 0x0800; 
;
	lda     _quack4+2
	sec
	sbc     #$00
	sta     _quack4+2
	lda     _quack4+2+1
	sbc     #$08
;
; } else if (quack4.direction == DIR_DOWN){
;
	jmp     L1CFE
L1CC9:	lda     _quack4+4
	cmp     #$01
	bne     L1CCA
;
; quack4.y += 0x0800; 
;
	lda     #$00
	clc
	adc     _quack4+2
	sta     _quack4+2
	lda     #$08
	adc     _quack4+2+1
L1CFE:	sta     _quack4+2+1
;
; if (generic_pad & PAD_A) {
;
L1CCA:	lda     _generic_pad
	and     #$80
	beq     L15F0
;
; if ((current_player == 1 && turbo_p1 > 0) ||
;
	lda     _current_player
	cmp     #$01
	bne     L1CCD
	lda     _turbo_p1
	bne     L1D06
;
; (current_player == 2 && turbo_p2 > 0) ||
;
L1CCD:	lda     _current_player
	cmp     #$02
	bne     L1CD0
	lda     _turbo_p2
	bne     L1D06
;
; (current_player == 3 && turbo_p3 > 0) ||
;
L1CD0:	lda     _current_player
	cmp     #$03
	bne     L1CD3
	lda     _turbo_p3
	bne     L1D06
;
; (current_player == 4 && turbo_p4 > 0)) {
;
L1CD3:	lda     _current_player
	cmp     #$04
	bne     L15F0
	lda     _turbo_p4
	beq     L15F0
L1D06:	lda     #$01
;
; use_turbo = 1;
;
	sta     _use_turbo
;
; switch(current_player) {
;
	lda     _current_player
;
; }
;
	cmp     #$01
	beq     L1CDC
	cmp     #$02
	beq     L1CDD
	cmp     #$03
	beq     L1CDE
	cmp     #$04
	beq     L1CDF
	jmp     L15F0
;
; case 1: turbo_p1--; break;
;
L1CDC:	dec     _turbo_p1
	jmp     L15F0
;
; case 2: turbo_p2--; break;
;
L1CDD:	dec     _turbo_p2
	jmp     L15F0
;
; case 3: turbo_p3--; break;
;
L1CDE:	dec     _turbo_p3
	jmp     L15F0
;
; case 4: turbo_p4--; break;
;
L1CDF:	dec     _turbo_p4
;
; if(ducks_go_faster_over_time){
;
L15F0:	lda     _ducks_go_faster_over_time
	beq     L15FD
;
; if (current_player == 2 || current_player == 4) {
;
	lda     _current_player
	cmp     #$02
	beq     L1CE0
	cmp     #$04
	bne     L15FD
;
; current_speed = speed_option;
;
L1CE0:	lda     _speed_option+1
	sta     _current_speed+1
	lda     _speed_option
	sta     _current_speed
;
; if(game_timer > 80) {
;
	lda     _game_timer
	cmp     #$51
	bcc     L1CE1
;
; current_speed -= DUCK_SPEED_LOW;
;
	lda     _current_speed
	sec
	sbc     #$14
	sta     _current_speed
	bcs     L161D
	dec     _current_speed+1
;
; } else if (game_timer > 20) {
;
	jmp     L161D
L1CE1:	lda     _game_timer
	cmp     #$15
;
; } else if (game_timer > 10) {
;
	bcs     L15FD
	cmp     #$0B
	bcc     L1CE3
;
; current_speed += DUCK_SPEED_HIGH;
;
	lda     #$14
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L161D
	inc     _current_speed+1
;
; } else if (game_timer > 0) {
;
	jmp     L161D
L1CE3:	lda     _game_timer
	beq     L161D
;
; current_speed += DUCK_SPEED_MAX;
;
	lda     #$28
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L161D
	inc     _current_speed+1
;
; } else {
;
	jmp     L161D
;
; current_speed = speed_option; // feature disabled, all normal speed
;
L15FD:	lda     _speed_option+1
	sta     _current_speed+1
	lda     _speed_option
	sta     _current_speed
;
; if(bee1_bigbee_timer > 0 && current_player == 1){
;
L161D:	lda     _bee1_bigbee_timer
	beq     L1CE8
	lda     _current_player
	cmp     #$01
	bne     L1CE8
;
; current_speed += SPEED_BIGBEE_BOOST; //big bee boost
;
	lda     #$30
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L1CE8
	inc     _current_speed+1
;
; if(bee3_bigbee_timer > 0 && current_player == 3){
;
L1CE8:	lda     _bee3_bigbee_timer
	beq     L1CEC
	lda     _current_player
	cmp     #$03
	bne     L1CEC
;
; current_speed += SPEED_BIGBEE_BOOST; //big bee boost
;
	lda     #$30
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L1CEC
	inc     _current_speed+1
;
; if (generic_pad & PAD_LEFT)
;
L1CEC:	lda     _generic_pad
	and     #$02
	beq     L1CEE
;
; hero_velocity_x = -current_speed;
;
	lda     _current_speed
	ldx     _current_speed+1
	jsr     negax
	sta     _hero_velocity_x
	stx     _hero_velocity_x+1
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L1CED
;
; hero_velocity_x -= SPEED_TURBO_BOOST; // add turbo boost
;
	lda     _hero_velocity_x
	sec
	sbc     #$60
	sta     _hero_velocity_x
	bcs     L1636
	dec     _hero_velocity_x+1
;
; use_turbo = 0; // reset turbo flag
;
L1636:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_LEFT;
;
L1CED:	lda     #$02
	sta     _GenericBoxGuy+4
;
; else if (generic_pad & PAD_RIGHT)
;
	jmp     L1649
L1CEE:	lda     _generic_pad
	and     #$01
	beq     L1CF1
;
; hero_velocity_x = current_speed;
;
	lda     _current_speed+1
	sta     _hero_velocity_x+1
	lda     _current_speed
	sta     _hero_velocity_x
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L1CEF
;
; hero_velocity_x += SPEED_TURBO_BOOST; // add turbo boost
;
	lda     #$60
	clc
	adc     _hero_velocity_x
	sta     _hero_velocity_x
	bcc     L1644
	inc     _hero_velocity_x+1
;
; use_turbo = 0; // reset turbo flag
;
L1644:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_RIGHT;
;
L1CEF:	lda     #$03
	sta     _GenericBoxGuy+4
;
; else
;
	jmp     L1649
;
; hero_velocity_x = 0;
;
L1CF1:	sta     _hero_velocity_x
	sta     _hero_velocity_x+1
;
; GenericBoxGuy.x += hero_velocity_x;
;
L1649:	lda     _hero_velocity_x
	clc
	adc     _GenericBoxGuy
	sta     _GenericBoxGuy
	lda     _hero_velocity_x+1
	adc     _GenericBoxGuy+1
	sta     _GenericBoxGuy+1
;
; if (GenericBoxGuy.x > 0xf000)
;
	lda     _GenericBoxGuy
	cmp     #$01
	lda     _GenericBoxGuy+1
	sbc     #$F0
	bcc     L1CF4
;
; if (old_x >= 0x8000)
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L1CF3
;
; GenericBoxGuy.x = 0xf000; // max right
;
	ldx     #$F0
;
; GenericBoxGuy.x = 0x0000; // max left
;
L1CF3:	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L1CF4:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$06
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; if (hero_velocity_x < 0)
;
	ldx     _hero_velocity_x+1
	cpx     #$80
	bcc     L165F
;
; if (bg_coll_L())
;
	jsr     _bg_coll_L
;
; else if (hero_velocity_x > 0)
;
	jmp     L1D0D
L165F:	lda     _hero_velocity_x
	cmp     #$01
	lda     _hero_velocity_x+1
	sbc     #$00
	bvs     L1668
	eor     #$80
L1668:	bpl     L1669
;
; if (bg_coll_R())
;
	jsr     _bg_coll_R
L1D0D:	tax
	beq     L1669
;
; GenericBoxGuy.x = old_x; // revert to old position
;
	lda     _old_x+1
	sta     _GenericBoxGuy+1
	lda     _old_x
	sta     _GenericBoxGuy
;
; old_y = GenericBoxGuy.y;
;
L1669:	lda     _GenericBoxGuy+2+1
	sta     _old_y+1
	lda     _GenericBoxGuy+2
	sta     _old_y
;
; if (generic_pad & PAD_UP)
;
	lda     _generic_pad
	and     #$08
	beq     L1CF6
;
; hero_velocity_y = -current_speed;
;
	lda     _current_speed
	ldx     _current_speed+1
	jsr     negax
	sta     _hero_velocity_y
	stx     _hero_velocity_y+1
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L1CF5
;
; hero_velocity_y -= SPEED_TURBO_BOOST; // add turbo boost
;
	lda     _hero_velocity_y
	sec
	sbc     #$60
	sta     _hero_velocity_y
	bcs     L1677
	dec     _hero_velocity_y+1
;
; use_turbo = 0; // reset turbo flag
;
L1677:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_UP; //entually we'll set up and down but not now.
;
L1CF5:	lda     #$00
	sta     _GenericBoxGuy+4
;
; else if (generic_pad & PAD_DOWN)
;
	jmp     L168A
L1CF6:	lda     _generic_pad
	and     #$04
	beq     L1CF9
;
; hero_velocity_y = current_speed;
;
	lda     _current_speed+1
	sta     _hero_velocity_y+1
	lda     _current_speed
	sta     _hero_velocity_y
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L1CF7
;
; hero_velocity_y += SPEED_TURBO_BOOST; // add turbo boost
;
	lda     #$60
	clc
	adc     _hero_velocity_y
	sta     _hero_velocity_y
	bcc     L1685
	inc     _hero_velocity_y+1
;
; use_turbo = 0; // reset turbo flag
;
L1685:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_DOWN;
;
L1CF7:	lda     #$01
	sta     _GenericBoxGuy+4
;
; else
;
	jmp     L168A
;
; hero_velocity_y = 0;
;
L1CF9:	sta     _hero_velocity_y
	sta     _hero_velocity_y+1
;
; GenericBoxGuy.y += hero_velocity_y;
;
L168A:	lda     _hero_velocity_y
	clc
	adc     _GenericBoxGuy+2
	sta     _GenericBoxGuy+2
	lda     _hero_velocity_y+1
	adc     _GenericBoxGuy+2+1
	sta     _GenericBoxGuy+2+1
;
; if (GenericBoxGuy.y > 0xe000)
;
	lda     _GenericBoxGuy+2
	cmp     #$01
	lda     _GenericBoxGuy+2+1
	sbc     #$E0
	bcc     L1CFC
;
; if (old_y >= 0x8000)
;
	lda     _old_y
	cmp     #$00
	lda     _old_y+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L1CFB
;
; GenericBoxGuy.y = 0xe000; // max down
;
	ldx     #$E0
;
; GenericBoxGuy.y = 0x0000; // max up
;
L1CFB:	sta     _GenericBoxGuy+2
	stx     _GenericBoxGuy+2+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L1CFC:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; if (hero_velocity_y < 0)
;
	ldx     _hero_velocity_y+1
	cpx     #$80
	bcc     L169C
;
; if (bg_coll_U())
;
	jsr     _bg_coll_U
;
; else if (hero_velocity_y > 0)
;
	jmp     L1D0E
L169C:	lda     _hero_velocity_y
	cmp     #$01
	lda     _hero_velocity_y+1
	sbc     #$00
	bvs     L16A5
	eor     #$80
L16A5:	bpl     L16A6
;
; if (bg_coll_D())
;
	jsr     _bg_coll_D
L1D0E:	tax
	beq     L16A6
;
; GenericBoxGuy.y = old_y; // revert to old position
;
	lda     _old_y+1
	sta     _GenericBoxGuy+2+1
	lda     _old_y
	sta     _GenericBoxGuy+2
;
; check_tile_and_collect();
;
L16A6:	jmp     _check_tile_and_collect

.endproc

; ---------------------------------------------------------------
; void __near__ check_tile_and_collect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tile_and_collect: near

.segment	"CODE"

;
; if (current_player != 1 && current_player != 3)
;
	ldx     #$00
	lda     _current_player
	cmp     #$01
	beq     L1D14
	cmp     #$03
	beq     L1D14
;
; return; // Chasers cannot collect dots
;
	rts
;
; temp_x = (Generic.x + 4) >> 3; // get this between 0-30
;
L1D14:	lda     _Generic
	clc
	adc     #$04
	bcc     L1731
	inx
L1731:	jsr     shrax3
	sta     _temp_x
;
; temp_y = (Generic.y + 2) >> 3; // get this between 0-32
;
	ldx     #$00
	lda     _Generic+1
	clc
	adc     #$02
	bcc     L1735
	inx
L1735:	jsr     shrax3
	sta     _temp_y
;
; largeindex = (temp_y << 5) + temp_x;
;
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_x
	bcc     L1D0F
	inx
L1D0F:	sta     _largeindex
	stx     _largeindex+1
;
; temp = combmapwoflowers[largeindex];
;
	lda     #<(_combmapwoflowers)
	sta     ptr1
	lda     #>(_combmapwoflowers)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	sta     _temp
;
; for (index = 0; index < 5; index++)
;
	lda     #$00
	sta     _index
L1D15:	lda     _index
	cmp     #$05
	bcc     L1D17
;
; }
;
	rts
;
; if (temp == pellet_tiles[index])
;
L1D17:	ldy     _index
	lda     _pellet_tiles,y
	cmp     _temp
	jne     L1744
;
; if (!is_dot_consumed(largeindex))
;
	lda     _largeindex
	ldx     _largeindex+1
	jsr     _is_dot_consumed
	tax
	beq     L1D18
;
; }
;
	rts
;
; mark_dot_consumed(largeindex);
;
L1D18:	lda     _largeindex
	ldx     _largeindex+1
	jsr     _mark_dot_consumed
;
; one_vram_buffer(blank_tiles[frame_counter % 5], NTADR_A(temp_x, temp_y));
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_blank_tiles)
	sta     ptr1+1
	ldy     #<(_blank_tiles)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _temp_x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; if (current_player == 1)
;
	lda     _current_player
	cmp     #$01
	bne     L1D16
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; team1_score++;
;
	inc     _team1_score
;
; if (team1_score >= 100)
;
	lda     _team1_score
	cmp     #$64
	bcc     L176D
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_DOTS;
;
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; else if (current_player == 3)
;
L1D16:	lda     _current_player
	cmp     #$03
	bne     L173D
;
; sfx_play(SFX_TEAM2_DOT_COLLECT, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; team2_score++;
;
	inc     _team2_score
;
; if (team2_score >= 100)
;
	lda     _team2_score
	cmp     #$64
	bcc     L173D
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_DOTS;
;
	lda     #$00
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; break;
;
L176D:	rts
;
; else if (temp == blank_tiles[index])
;
L1744:	ldy     _index
	lda     _blank_tiles,y
	cmp     _temp
;
; break;
;
	beq     L173D
;
; for (index = 0; index < 5; index++)
;
	inc     _index
	jmp     L1D15
;
; }
;
L173D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ debug_extras (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug_extras: near

.segment	"CODE"

;
; temp1 = (team1_score / 10) + 0x30;
;
	lda     _team1_score
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(6, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$26
	jsr     _one_vram_buffer
;
; temp1 = (team1_score % 10) + 0x30;
;
	lda     _team1_score
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(7, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$27
	jsr     _one_vram_buffer
;
; temp1 = (game_timer / 10) + 0x30;
;
	lda     _game_timer
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(15, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$2F
	jsr     _one_vram_buffer
;
; temp1 = (game_timer % 10) + 0x30;
;
	lda     _game_timer
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(16, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$30
	jsr     _one_vram_buffer
;
; temp1 = (team2_score / 10) + 0x30;
;
	lda     _team2_score
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(23, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$37
	jsr     _one_vram_buffer
;
; temp1 = (team2_score % 10) + 0x30;
;
	lda     _team2_score
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(24, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$38
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ read_controllers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_controllers: near

.segment	"CODE"

;
; doublepad = pad_poll_4score_1_3();
;
	jsr     _pad_poll_4score_1_3
	sta     _doublepad
	stx     _doublepad+1
;
; pad1 = high_byte(doublepad); // the high byte is the first controller's input
;
	lda     _doublepad+1
	sta     _pad1
;
; pad3 = low_byte(doublepad);  // low byte is the third controller's input
;
	lda     _doublepad
	sta     _pad3
;
; doublepad = pad_poll_4score_2_4();
;
	jsr     _pad_poll_4score_2_4
	sta     _doublepad
	stx     _doublepad+1
;
; pad2 = high_byte(doublepad);
;
	lda     _doublepad+1
	sta     _pad2
;
; pad4 = low_byte(doublepad);
;
	lda     _doublepad
	sta     _pad4
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ seeker_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_seeker_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ chaser_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_chaser_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; debug_extras();
;
	jsr     _debug_extras
;
; game_counters();
;
	jsr     _game_counters
;
; read_controllers();
;
	jsr     _read_controllers
;
; quack_movement();
;
	jsr     _quack_movement
;
; current_player = 1;
;
	lda     #$01
	sta     _current_player
;
; GenericBoxGuy = BoxGuy1;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy1)
	ldx     #>(_BoxGuy1)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad1;
;
	lda     _pad1
	sta     _generic_pad
;
; movement(); // this assigns old_x and old_y
;
	jsr     _movement
;
; BoxGuy1.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy1+4
;
; temp_x = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x
;
; temp_y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision()) // 1 and 3, both seekers
;
	jsr     _sprite_collision
	tax
	beq     L1809
;
; BoxGuy1.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy1+1
	lda     _old_x
	sta     _BoxGuy1
;
; BoxGuy1.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy1+2+1
	lda     _old_y
;
; else
;
	jmp     L1D19
;
; BoxGuy1.x = GenericBoxGuy.x;
;
L1809:	lda     _GenericBoxGuy+1
	sta     _BoxGuy1+1
	lda     _GenericBoxGuy
	sta     _BoxGuy1
;
; BoxGuy1.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy1+2+1
	lda     _GenericBoxGuy+2
L1D19:	sta     _BoxGuy1+2
;
; current_player = 2;
;
	lda     #$02
	sta     _current_player
;
; GenericBoxGuy = BoxGuy2;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy2)
	ldx     #>(_BoxGuy2)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad2;
;
	lda     _pad2
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy2.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy2+4
;
; if (!(pad2 & (PAD_LEFT | PAD_RIGHT | PAD_UP | PAD_DOWN))) {
;
	lda     _pad2
	and     #$0F
;
; } else {
;
	beq     L1D1A
;
; BoxGuy2.moving = 1;
;
	lda     #$01
L1D1A:	sta     _BoxGuy2+5
;
; temp_x = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x
;
; temp_y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) // player 2 blocks player 4 (chasers)
;
	jsr     _sprite_collision
	tax
	beq     L182E
;
; BoxGuy2.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy2+1
	lda     _old_x
	sta     _BoxGuy2
;
; BoxGuy2.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy2+2+1
	lda     _old_y
;
; else
;
	jmp     L1D1B
;
; BoxGuy2.x = GenericBoxGuy.x;
;
L182E:	lda     _GenericBoxGuy+1
	sta     _BoxGuy2+1
	lda     _GenericBoxGuy
	sta     _BoxGuy2
;
; BoxGuy2.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy2+2+1
	lda     _GenericBoxGuy+2
L1D1B:	sta     _BoxGuy2+2
;
; current_player = 3;
;
	lda     #$03
	sta     _current_player
;
; GenericBoxGuy = BoxGuy3;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy3)
	ldx     #>(_BoxGuy3)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad3;
;
	lda     _pad3
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy3.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy3+4
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x2
;
; temp_y2 = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y2
;
; if (sprite_collision()) // 1 blocks 3 (seekers)
;
	jsr     _sprite_collision
	tax
	beq     L184A
;
; BoxGuy3.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy3+1
	lda     _old_x
	sta     _BoxGuy3
;
; BoxGuy3.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy3+2+1
	lda     _old_y
;
; else
;
	jmp     L1D1C
;
; BoxGuy3.x = GenericBoxGuy.x;
;
L184A:	lda     _GenericBoxGuy+1
	sta     _BoxGuy3+1
	lda     _GenericBoxGuy
	sta     _BoxGuy3
;
; BoxGuy3.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy3+2+1
	lda     _GenericBoxGuy+2
L1D1C:	sta     _BoxGuy3+2
;
; current_player = 4;
;
	lda     #$04
	sta     _current_player
;
; GenericBoxGuy = BoxGuy4;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy4)
	ldx     #>(_BoxGuy4)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad4;
;
	lda     _pad4
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy4.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy4+4
;
; if (!(pad4 & (PAD_LEFT | PAD_RIGHT | PAD_UP | PAD_DOWN))) {
;
	lda     _pad4
	and     #$0F
;
; } else {
;
	beq     L1D1D
;
; BoxGuy4.moving = 1;
;
	lda     #$01
L1D1D:	sta     _BoxGuy4+5
;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x2
;
; temp_y2 = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y2
;
; if (sprite_collision()) // 2 blocks 4 (seekers)
;
	jsr     _sprite_collision
	tax
	beq     L186F
;
; BoxGuy4.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy4+1
	lda     _old_x
	sta     _BoxGuy4
;
; BoxGuy4.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy4+2+1
	lda     _old_y
;
; else
;
	jmp     L1D1E
;
; BoxGuy4.x = GenericBoxGuy.x;
;
L186F:	lda     _GenericBoxGuy+1
	sta     _BoxGuy4+1
	lda     _GenericBoxGuy
	sta     _BoxGuy4
;
; BoxGuy4.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy4+2+1
	lda     _GenericBoxGuy+2
L1D1E:	sta     _BoxGuy4+2
;
; if (bee1_bigbee_timer == 0) { // Only check if not already transformed
;
	lda     _bee1_bigbee_timer
	jne     L1D28
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if (powerup1 == 1 && check_powerup_collision(temp_x, temp_y, 16, 32)) {
;
	lda     _powerup1
	cmp     #$01
	bne     L1D22
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$20
	jsr     _check_powerup_collision
	tax
	beq     L1D22
;
; powerup1 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup1
;
; bee1_bigbee_timer = POWERUP_TIMER;  // 20 game seconds
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup2 == 1 && check_powerup_collision(temp_x, temp_y, 226, 32)) {
;
L1D22:	lda     _powerup2
	cmp     #$01
	bne     L1D24
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$E2
	dey
	sta     (sp),y
	lda     #$20
	jsr     _check_powerup_collision
	tax
	beq     L1D24
;
; powerup2 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup2
;
; bee1_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup3 == 1 && check_powerup_collision(temp_x, temp_y, 16, 208)) {
;
L1D24:	lda     _powerup3
	cmp     #$01
	bne     L1D26
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$D0
	jsr     _check_powerup_collision
	tax
	beq     L1D26
;
; powerup3 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup3
;
; bee1_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup4 == 1 && check_powerup_collision(temp_x, temp_y, 226, 208)) {
;
L1D26:	lda     _powerup4
	cmp     #$01
	bne     L1D28
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$E2
	dey
	sta     (sp),y
	lda     #$D0
	jsr     _check_powerup_collision
	tax
	beq     L1D28
;
; powerup4 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup4
;
; bee1_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (bee3_bigbee_timer == 0) { // Only check if not already transformed
;
L1D28:	lda     _bee3_bigbee_timer
	jne     L1D30
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if (powerup1 == 1 && check_powerup_collision(temp_x, temp_y, 16, 32)) {
;
	lda     _powerup1
	cmp     #$01
	bne     L1D2A
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$20
	jsr     _check_powerup_collision
	tax
	beq     L1D2A
;
; powerup1 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup1
;
; bee3_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup2 == 1 && check_powerup_collision(temp_x, temp_y, 226, 32)) {
;
L1D2A:	lda     _powerup2
	cmp     #$01
	bne     L1D2C
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$E2
	dey
	sta     (sp),y
	lda     #$20
	jsr     _check_powerup_collision
	tax
	beq     L1D2C
;
; powerup2 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup2
;
; bee3_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup3 == 1 && check_powerup_collision(temp_x, temp_y, 16, 208)) {
;
L1D2C:	lda     _powerup3
	cmp     #$01
	bne     L1D2E
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$D0
	jsr     _check_powerup_collision
	tax
	beq     L1D2E
;
; powerup3 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup3
;
; bee3_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup4 == 1 && check_powerup_collision(temp_x, temp_y, 226, 208)) {
;
L1D2E:	lda     _powerup4
	cmp     #$01
	bne     L1D30
	jsr     decsp3
	lda     _temp_x
	ldy     #$02
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #$E2
	dey
	sta     (sp),y
	lda     #$D0
	jsr     _check_powerup_collision
	tax
	beq     L1D30
;
; powerup4 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup4
;
; bee3_bigbee_timer = POWERUP_TIMER; // 20 game seconds
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (bee1_bigbee_timer > 0) {
;
L1D30:	lda     _bee1_bigbee_timer
	beq     L1D32
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L1D31
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x2 = BoxGuy4.x >> 8;
;
L1D31:	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L1D32
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; if (bee3_bigbee_timer > 0) {
;
L1D32:	lda     _bee3_bigbee_timer
	beq     L1D34
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L1D33
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x2 = BoxGuy2.x >> 8;
;
L1D33:	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L1D34
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy1.x >> 8;
;
L1D34:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L1D35
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_FRIENDLY_FIRE;
;
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy3.x >> 8;
;
L1D35:	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L1D36
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_FRIENDLY_FIRE;
;
	lda     #$01
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy1.x >> 8;
;
L1D36:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L1D37
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_ENEMY_KILL;
;
	lda     #$02
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy2.x >> 8;
;
L1D37:	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L1980
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_ENEMY_KILL;
;
	lda     #$02
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; draw_sprites();
;
L1980:	jmp     _draw_sprites

.endproc

; ---------------------------------------------------------------
; void __near__ title_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title_loop: near

.segment	"CODE"

;
; frame_counter++;
;
L1D38:	inc     _frame_counter
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_controllers();
;
	jsr     _read_controllers
;
; if (pad1 & PAD_UP)
;
	lda     _pad1
	and     #$08
	beq     L1D39
;
; if ((BoxGuy1.y >> 8) > 160)
;
	lda     _BoxGuy1+3
	cmp     #$A1
	bcc     L1D39
;
; BoxGuy1.y -= 0x0400; // Move up 4 pixels (0x0400 = 1024 sub-pixels)
;
	lda     _BoxGuy1+2
	sec
	sbc     #$00
	sta     _BoxGuy1+2
	lda     _BoxGuy1+2+1
	sbc     #$04
	sta     _BoxGuy1+2+1
;
; if (pad2 & PAD_UP)
;
L1D39:	lda     _pad2
	and     #$08
	beq     L1D3A
;
; if ((BoxGuy2.y >> 8) > 160)
;
	lda     _BoxGuy2+3
	cmp     #$A1
	bcc     L1D3A
;
; BoxGuy2.y -= 0x0400;
;
	lda     _BoxGuy2+2
	sec
	sbc     #$00
	sta     _BoxGuy2+2
	lda     _BoxGuy2+2+1
	sbc     #$04
	sta     _BoxGuy2+2+1
;
; if (pad3 & PAD_UP)
;
L1D3A:	lda     _pad3
	and     #$08
	beq     L1D3B
;
; if ((BoxGuy3.y >> 8) > 160)
;
	lda     _BoxGuy3+3
	cmp     #$A1
	bcc     L1D3B
;
; BoxGuy3.y -= 0x0400;
;
	lda     _BoxGuy3+2
	sec
	sbc     #$00
	sta     _BoxGuy3+2
	lda     _BoxGuy3+2+1
	sbc     #$04
	sta     _BoxGuy3+2+1
;
; if (pad4 & PAD_UP)
;
L1D3B:	lda     _pad4
	and     #$08
	beq     L1D3C
;
; if ((BoxGuy4.y >> 8) > 160)
;
	lda     _BoxGuy4+3
	cmp     #$A1
	bcc     L1D3C
;
; BoxGuy4.y -= 0x0400;
;
	lda     _BoxGuy4+2
	sec
	sbc     #$00
	sta     _BoxGuy4+2
	lda     _BoxGuy4+2+1
	sbc     #$04
	sta     _BoxGuy4+2+1
;
; if (pad1 & PAD_START || pad2 & PAD_START || pad3 & PAD_START || pad4 & PAD_START)
;
L1D3C:	lda     _pad1
	and     #$10
	bne     L1D3D
	lda     _pad2
	and     #$10
	bne     L1D3D
	lda     _pad3
	and     #$10
	bne     L1D3D
	lda     _pad4
	and     #$10
	beq     L1D40
;
; if (!start_held)
;
L1D3D:	lda     _start_held
	bne     L1D3E
;
; start_held = 1;
;
	lda     #$01
	sta     _start_held
;
; start_hold_timer = 0;
;
	lda     #$00
	sta     _start_hold_timer
;
; start_hold_timer++;
;
L1D3E:	inc     _start_hold_timer
;
; if (start_hold_timer >= 3)
;
	lda     _start_hold_timer
	cmp     #$03
	jcc     L1D38
;
; init_options_loop();
;
	jmp     _init_options_loop
;
; start_held = 0;
;
L1D40:	sta     _start_held
;
; start_hold_timer = 0;
;
	sta     _start_hold_timer
;
; while (1)
;
	jmp     L1D38

.endproc

; ---------------------------------------------------------------
; void __near__ options_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_options_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L19C2:	jsr     _ppu_wait_nmi
;
; frame_counter++;
;
	inc     _frame_counter
;
; read_controllers();
;
	jsr     _read_controllers
;
; if (pad1 & PAD_START || pad2 & PAD_START || pad3 & PAD_START || pad4 & PAD_START)
;
	lda     _pad1
	and     #$10
	bne     L1D41
	lda     _pad2
	and     #$10
	bne     L1D41
	lda     _pad3
	and     #$10
	bne     L1D41
	lda     _pad4
	and     #$10
	beq     L19C2
;
; sfx_play(SFX_START, 0);
;
L1D41:	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; init_game_loop();
;
	jsr     _init_game_loop
;
; prev_pad1 = pad1;
;
	lda     _pad1
	sta     _prev_pad1
;
; prev_pad2 = pad2;
;
	lda     _pad2
	sta     _prev_pad2
;
; prev_pad3 = pad3;
;
	lda     _pad3
	sta     _prev_pad3
;
; prev_pad4 = pad4;
;
	lda     _pad4
	sta     _prev_pad4
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ gameover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gameover_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L19D9:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_START)
;
	and     #$10
	beq     L19D9
;
; init_title_loop();
;
	jmp     _init_title_loop

.endproc

; ---------------------------------------------------------------
; void __near__ init_game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_game_loop: near

.segment	"CODE"

;
; clear_background();
;
	jsr     _clear_background
;
; game_mode = MODE_GAME;
;
	lda     #$02
	sta     _game_mode
;
; team1_wins = 0;
;
	lda     #$00
	sta     _team1_wins
;
; team2_wins = 0;
;
	sta     _team2_wins
;
; pal_bg(palette_bg_combmap);
;
	lda     #<(_palette_bg_combmap)
	ldx     #>(_palette_bg_combmap)
	jsr     _pal_bg
;
; pal_spr(palette_sp); 
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; start_round();
;
	jmp     _start_round

.endproc

; ---------------------------------------------------------------
; void __near__ init_options_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_options_loop: near

.segment	"CODE"

;
; delay(30);
;
	lda     #$1E
	jsr     _delay
;
; prev_pad1 = 0;
;
	lda     #$00
	sta     _prev_pad1
;
; prev_pad2 = 0;
;
	sta     _prev_pad2
;
; prev_pad3 = 0;
;
	sta     _prev_pad3
;
; prev_pad4 = 0;
;
	sta     _prev_pad4
;
; clear_background();  
;
	jsr     _clear_background
;
; game_mode = MODE_OPTIONS;
;
	lda     #$01
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; load_room(); // loads the options screen
;
	jsr     _load_room
;
; pal_bg(palette_options_bg);
;
	lda     #<(_palette_options_bg)
	ldx     #>(_palette_options_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; multi_vram_buffer_horz("SPEED:", 7, NTADR_A(8, 10));
;
	jsr     decsp3
	lda     #<(L1AF4)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1AF4)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$48
	jsr     _multi_vram_buffer_horz
;
; if (speed_option == SPEED_SLOW)
;
	lda     _speed_option+1
	bne     L1AFD
	lda     _speed_option
	cmp     #$60
	bne     L1AFD
;
; multi_vram_buffer_horz("  SLOW ", 7, NTADR_A(11, 12));
;
	jsr     decsp3
	lda     #<(L1B01)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B01)
;
; else if (speed_option == SPEED_REGULAR)
;
	jmp     L1D48
L1AFD:	lda     _speed_option+1
	bne     L1B0B
	lda     _speed_option
	cmp     #$A0
	bne     L1B0B
;
; multi_vram_buffer_horz("REGULAR", 7, NTADR_A(11, 12));
;
	jsr     decsp3
	lda     #<(L1B0F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B0F)
;
; else
;
	jmp     L1D48
;
; multi_vram_buffer_horz("  FAST ", 7, NTADR_A(11, 12));
;
L1B0B:	jsr     decsp3
	lda     #<(L1B1A)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B1A)
L1D48:	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$8B
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("MAP:", 4, NTADR_A(8, 14));
;
	jsr     decsp3
	lda     #<(L1B24)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B24)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$C8
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("HIVE", 4, NTADR_A(11, 16));
;
	jsr     decsp3
	lda     #<(L1B2E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B2E)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$0B
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("MUSIC:", 6, NTADR_A(8, 18));
;
	jsr     decsp3
	lda     #<(L1B38)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B38)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$48
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("FRENZY", 6, NTADR_A(11, 20));
;
	jsr     decsp3
	lda     #<(L1B42)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B42)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$8B
	jsr     _multi_vram_buffer_horz
;
; start_hold_timer = 0;
;
	lda     #$00
	sta     _start_hold_timer
;
; start_held = 0;
;
	sta     _start_held
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_gameover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_gameover_loop: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; clear_background();
;
	jsr     _clear_background
;
; music_stop();
;
	jsr     _music_stop
;
; game_mode = MODE_GAMEOVER;
;
	lda     #$03
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; pal_bg(palette_bg_combmap);
;
	lda     #<(_palette_bg_combmap)
	ldx     #>(_palette_bg_combmap)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; if(team1_wins >= 3){
;
	lda     _team1_wins
	cmp     #$03
	bcc     L1D4A
;
; multi_vram_buffer_horz("TEAM 1 WINS THE MATCH!", 21, NTADR_A(4, 12));
;
	jsr     decsp3
	lda     #<(L1BC2)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1BC2)
;
; } else if(team2_wins >= 3){
;
	jmp     L1D50
L1D4A:	lda     _team2_wins
	cmp     #$03
	bcc     L1BCC
;
; multi_vram_buffer_horz("TEAM 2 WINS THE MATCH!", 21, NTADR_A(4, 12));
;
	jsr     decsp3
	lda     #<(L1BCF)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1BCF)
L1D50:	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$84
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("PRESS START", 11, NTADR_A(10, 24));
;
L1BCC:	jsr     decsp3
	lda     #<(L1BD9)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1BD9)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$23
	lda     #$0A
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; delay(10);
;
	lda     #$0A
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ init_title_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_title_loop: near

.segment	"CODE"

;
; delay(30);
;
	lda     #$1E
	jsr     _delay
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_title_bg);
;
	lda     #<(_palette_title_bg)
	ldx     #>(_palette_title_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; load_room(); //loads the title screen;
;
	jsr     _load_room
;
; BoxGuy1.x = 0x2800; // x = 40 (0x28)
;
	ldx     #$28
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy1.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy1+4
;
; BoxGuy2.x = 0x7800; // x = 120 (0x78)
;
	ldx     #$78
	lda     #$00
	sta     _BoxGuy2
	stx     _BoxGuy2+1
;
; BoxGuy2.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy2.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy2+4
;
; BoxGuy3.x = 0xC800; // x = 200 (0xC8)
;
	lda     #$00
	sta     _BoxGuy3
	stx     _BoxGuy3+1
;
; BoxGuy3.y = 0xC800; // y = 200 (0xC8)
;
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy3.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy3+4
;
; BoxGuy4.x = 0x1801; // x = 280 (0x118)
;
	ldx     #$18
	lda     #$01
	sta     _BoxGuy4
	stx     _BoxGuy4+1
;
; BoxGuy4.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	lda     #$00
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy4.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy4+4
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_system (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_system: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); // shift the bg down one pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; speed_option = SPEED_REGULAR;
;
	ldx     #$00
	lda     #$A0
	sta     _speed_option
	stx     _speed_option+1
;
; turbo_amount = TURBO_MEDIUM;
;
	lda     #$80
	sta     _turbo_amount
;
; ducks_go_faster_over_time=1;
;
	lda     #$01
	sta     _ducks_go_faster_over_time
;
; sprite_rotation = 0;
;
	txa
	sta     _sprite_rotation
;
; anim_frame_1 = 0;
;
	sta     _anim_frame_1
;
; anim_frame_2 = 0;
;
	sta     _anim_frame_2
;
; anim_frame_3 = 0;
;
	sta     _anim_frame_3
;
; anim_frame_4 = 0;
;
	sta     _anim_frame_4
;
; bee1_bigbee_timer = 0;
;
	sta     _bee1_bigbee_timer
;
; bee3_bigbee_timer = 0;
;
	sta     _bee3_bigbee_timer
;
; ppu_on_all(); // turn on screenxw
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ clear_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_background: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (tempint = 0; tempint < 1024; ++tempint)
;
	lda     #$00
	sta     _tempint
	sta     _tempint+1
L1C06:	ldx     _tempint+1
	cpx     #$04
	bcs     L1C07
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (tempint = 0; tempint < 1024; ++tempint)
;
	inc     _tempint
	bne     L1C06
	inc     _tempint+1
	jmp     L1C06
;
; ppu_on_all(); // turn on screen
;
L1C07:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ update_hud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_hud: near

.segment	"CODE"

;
; if(team1_wins > 0){
;
	lda     _team1_wins
	beq     L1453
;
; one_vram_buffer(0xc8, NTADR_A(13, 1)); //full
;
	lda     #$C8
;
; }else {
;
	jmp     L1D60
;
; one_vram_buffer(0xb7, NTADR_A(13, 1)); //empty
;
L1453:	lda     #$B7
L1D60:	jsr     pusha
	ldx     #$20
	lda     #$2D
	jsr     _one_vram_buffer
;
; if(team1_wins > 1){
;
	lda     _team1_wins
	cmp     #$02
	bcc     L1466
;
; one_vram_buffer(0xc9, NTADR_A(12, 1)); //full
;
	lda     #$C9
;
; } else {
;
	jmp     L1D61
;
; one_vram_buffer(0xb8, NTADR_A(12, 1)); //empty
;
L1466:	lda     #$B8
L1D61:	jsr     pusha
	ldx     #$20
	lda     #$2C
	jsr     _one_vram_buffer
;
; if(team1_wins > 2){
;
	lda     _team1_wins
	cmp     #$03
	bcc     L1479
;
; one_vram_buffer(0xca, NTADR_A(11, 1)); //full
;
	lda     #$CA
;
; } else {
;
	jmp     L1D62
;
; one_vram_buffer(0xb9, NTADR_A(11, 1)); //empty
;
L1479:	lda     #$B9
L1D62:	jsr     pusha
	ldx     #$20
	lda     #$2B
	jsr     _one_vram_buffer
;
; if(team2_wins > 0){
;
	lda     _team2_wins
	beq     L148C
;
; one_vram_buffer(0xc8, NTADR_A(18, 1)); //full
;
	lda     #$C8
;
; } else {
;
	jmp     L1D63
;
; one_vram_buffer(0xb7, NTADR_A(18, 1)); //empty
;
L148C:	lda     #$B7
L1D63:	jsr     pusha
	ldx     #$20
	lda     #$32
	jsr     _one_vram_buffer
;
; if(team2_wins > 1){
;
	lda     _team2_wins
	cmp     #$02
	bcc     L149F
;
; one_vram_buffer(0xc9, NTADR_A(19, 1)); //full
;
	lda     #$C9
;
; } else {
;
	jmp     L1D64
;
; one_vram_buffer(0xb8, NTADR_A(19, 1)); //empty
;
L149F:	lda     #$B8
L1D64:	jsr     pusha
	ldx     #$20
	lda     #$33
	jsr     _one_vram_buffer
;
; if(team2_wins > 2){
;
	lda     _team2_wins
	cmp     #$03
	bcc     L14B2
;
; one_vram_buffer(0xca, NTADR_A(20, 1 )); //full
;
	lda     #$CA
	jsr     pusha
	ldx     #$20
	lda     #$34
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xb9, NTADR_A(20, 1)); //empty
;
L14B2:	lda     #$B9
	jsr     pusha
	ldx     #$20
	lda     #$34
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ init_roundover (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_roundover: near

.segment	"CODE"

;
; game_mode = MODE_ROUNDOVER;
;
	lda     #$04
	sta     _game_mode
;
; music_stop();
;
	jsr     _music_stop
;
; if (winner == ONETWO_WINNER)
;
	lda     _winner
	bne     L1D66
;
; team1_wins++;
;
	inc     _team1_wins
;
; else if (winner == THREEFOUR_WINNER)
;
	jmp     L1B58
L1D66:	lda     _winner
	cmp     #$01
	bne     L1B58
;
; team2_wins++;
;
	inc     _team2_wins
;
; update_hud();
;
L1B58:	jsr     _update_hud
;
; if (winner == ONETWO_WINNER)
;
	lda     _winner
	bne     L1D67
;
; multi_vram_buffer_horz("TEAM 1 WINS!", 12, NTADR_A(9, 12));
;
	jsr     decsp3
	lda     #<(L1B5F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B5F)
;
; else if (winner == THREEFOUR_WINNER)
;
	jmp     L1D71
L1D67:	lda     _winner
	cmp     #$01
	bne     L1D68
;
; multi_vram_buffer_horz("TEAM 2 WINS!", 12, NTADR_A(9, 12));
;
	jsr     decsp3
	lda     #<(L1B6C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B6C)
L1D71:	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$89
	jsr     _multi_vram_buffer_horz
;
; if (win_reason == WIN_DOTS)
;
L1D68:	lda     _win_reason
	bne     L1D69
;
; multi_vram_buffer_horz("COLLECTED 100 DOTS", 18, NTADR_A(6, 13));
;
	jsr     decsp3
	lda     #<(L1B78)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B78)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_FRIENDLY_FIRE)
;
L1D69:	lda     _win_reason
	cmp     #$01
	bne     L1D6A
;
; multi_vram_buffer_horz("FRIENDLY BEE EATEN", 18, NTADR_A(6, 13));
;
	jsr     decsp3
	lda     #<(L1B85)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B85)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_ENEMY_KILL)
;
L1D6A:	lda     _win_reason
	cmp     #$02
	bne     L1D6B
;
; multi_vram_buffer_horz("ENEMY BEE EATEN", 15, NTADR_A(7, 13));
;
	jsr     decsp3
	lda     #<(L1B92)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B92)
	sta     (sp),y
	lda     #$0F
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A7
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_BIGBEE_EAT_DUCK)
;
L1D6B:	lda     _win_reason
	cmp     #$04
	bne     L1B9C
;
; multi_vram_buffer_horz("BIGBEE ATE DUCK!", 16, NTADR_A(7, 13));
;
	jsr     decsp3
	lda     #<(L1B9F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1B9F)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A7
	jmp     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("TIME UP!", 8, NTADR_A(11, 13));
;
L1B9C:	jsr     decsp3
	lda     #<(L1BAA)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1BAA)
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$AB
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ start_round (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_round: near

.segment	"CODE"

;
; load_room();
;
	jsr     _load_room
;
; update_hud();
;
	jsr     _update_hud
;
; for (index = 0; index < 128; index++)
;
	lda     #$00
	sta     _index
	tax
L1D72:	lda     _index
	cmp     #$80
	bcs     L1D73
;
; consumed_dots[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _consumed_dots,y
;
; for (index = 0; index < 128; index++)
;
	inc     _index
	jmp     L1D72
;
; map_positions = (frame_counter) % 5; //this could be round based.
;
L1D73:	lda     _frame_counter
	jsr     pushax
	lda     #$05
	jsr     tosumodax
	sta     _map_positions
;
; if (map_positions == START_POS_WIDE) {
;
	cmp     #$01
	bne     L1D74
;
; BoxGuy1.x = 0x3800; BoxGuy1.y = 0xA800;
;
	ldx     #$38
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$A8
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x5000; BoxGuy2.y = 0x2800;
;
	ldx     #$50
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xC000; BoxGuy3.y = 0xA800;
;
	ldx     #$C0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$A8
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0xA000; BoxGuy4.y = 0x2800;
;
	ldx     #$A0
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_CLOSE) {
;
	jmp     L1D78
L1D74:	lda     _map_positions
	cmp     #$02
	bne     L1D75
;
; BoxGuy1.x = 0x5800; BoxGuy1.y = 0x3800;
;
	ldx     #$58
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$38
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7000; BoxGuy2.y = 0x3000;
;
	ldx     #$70
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$30
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xA000; BoxGuy3.y = 0x3800;
;
	ldx     #$A0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$38
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8800; BoxGuy4.y = 0x3000;
;
	ldx     #$88
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$30
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_CORNERS) {
;
	jmp     L1D78
L1D75:	lda     _map_positions
	cmp     #$03
	bne     L1D76
;
; BoxGuy1.x = 0x2800; BoxGuy1.y = 0x2000;
;
	ldx     #$28
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$20
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x2800; BoxGuy2.y = 0xd800;
;
	ldx     #$28
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$D8
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xD800; BoxGuy3.y = 0x2000;
;
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$20
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0xD800; BoxGuy4.y = 0xD800;
;
	ldx     #$D8
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_MIDDLE) {
;
	jmp     L1D78
L1D76:	lda     _map_positions
	cmp     #$04
	bne     L1A2F
;
; BoxGuy1.x = 0x7800; BoxGuy1.y = 0x8000;
;
	ldx     #$78
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$80
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7800; BoxGuy2.y = 0x2800;
;
	ldx     #$78
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0x8000; BoxGuy3.y = 0x8000;
;
	ldx     #$80
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8000; BoxGuy4.y = 0x2800;
;
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy3.direction = DIR_RIGHT;
;
	lda     #$03
	sta     _BoxGuy3+4
;
; BoxGuy4.direction = DIR_RIGHT;
;
	sta     _BoxGuy4+4
;
; } else {  // START_POS_DEFAULT
;
	jmp     L1D77
;
; BoxGuy1.x = 0x4800; BoxGuy1.y = 0x4000;
;
L1A2F:	ldx     #$48
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$40
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7000; BoxGuy2.y = 0x2800;
;
	ldx     #$70
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xB000; BoxGuy3.y = 0x4000;
;
	ldx     #$B0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$40
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8800; BoxGuy4.y = 0x2800;
;
	ldx     #$88
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy4.direction = DIR_RIGHT;
;
	lda     #$03
	sta     _BoxGuy4+4
;
; BoxGuy1.direction = DIR_RIGHT;
;
	sta     _BoxGuy1+4
;
; team1_score=0;
;
L1D77:	lda     #$00
L1D78:	sta     _team1_score
;
; team2_score=0;
;
	sta     _team2_score
;
; powerup1 =1;
;
	lda     #$01
	sta     _powerup1
;
; powerup2 =1;
;
	sta     _powerup2
;
; powerup3 =1;
;
	sta     _powerup3
;
; powerup4 =1;
;
	sta     _powerup4
;
; game_timer = GAME_LENGTH;
;
	lda     #$63
	sta     _game_timer
;
; win_reason = WIN_DOTS; // default
;
	lda     #$00
	sta     _win_reason
;
; turbo_p1 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p1
;
; turbo_p2 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p2
;
; turbo_p3 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p3
;
; turbo_p4 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p4
;
; quack2.moving = 0;
;
	lda     #$00
	sta     _quack2+5
;
; quack4.moving = 0;
;
	sta     _quack4+5
;
; quack2_cooldown = 0;
;
	sta     _quack2_cooldown
;
; quack4_cooldown = 0;
;
	sta     _quack4_cooldown
;
; bee1_bigbee_timer = 0;
;
	sta     _bee1_bigbee_timer
;
; bee3_bigbee_timer = 0;
;
	sta     _bee3_bigbee_timer
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(116, 100, gamesprites_big3_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big3_data)
	ldx     #>(_gamesprites_big3_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_meta_spr(116, 100, gamesprites_big2_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big2_data)
	ldx     #>(_gamesprites_big2_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_meta_spr(116, 100, gamesprites_big1_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big1_data)
	ldx     #>(_gamesprites_big1_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; sfx_play(SFX_START, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; delay(10);
;
	lda     #$0A
	jsr     _delay
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; game_mode = MODE_GAME;
;
	lda     #$02
	sta     _game_mode
;
; song = SONG_MAIN_SONG;
;
	lda     #$00
	sta     _song
;
; music_play(song);
;
	jmp     _music_play

.endproc

; ---------------------------------------------------------------
; void __near__ roundover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_roundover_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L1C14:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_START)
;
	and     #$10
	beq     L1C14
;
; if (team1_wins >= 3)
;
	lda     _team1_wins
	cmp     #$03
;
; init_gameover_loop();
;
	jcs     _init_gameover_loop
;
; else if (team2_wins >= 3)
;
	lda     _team2_wins
	cmp     #$03
;
; init_gameover_loop();
;
	jcs     _init_gameover_loop
;
; start_round();
;
	jmp     _start_round

.endproc

; ---------------------------------------------------------------
; void __near__ game_counters (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_counters: near

.segment	"CODE"

;
; frame_counter++;
;
	inc     _frame_counter
;
; game_frame_timer++;
;
	inc     _game_frame_timer
;
; sprite_rotation++;
;
	inc     _sprite_rotation
;
; ai_counter++;
;
	inc     _ai_counter
;
; if (game_frame_timer >= TIMER_TICK_FREQUENCY) // Tick down every ~24.24 frames (40s/99)
;
	lda     _game_frame_timer
	cmp     #$18
	bcs     L1D87
;
; }
;
	rts
;
; game_frame_timer = 0; // reset the frame timer
;
L1D87:	lda     #$00
	sta     _game_frame_timer
;
; game_timer--;
;
	dec     _game_timer
;
; if (game_timer == 0)
;
	bne     L1D7D
;
; if (team1_score > team2_score)
;
	lda     _team1_score
	sec
	sbc     _team2_score
	bcc     L1D7B
	beq     L1D7B
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
;
; else if (team2_score > team1_score)
;
	jmp     L1D86
L1D7B:	lda     _team2_score
	sec
	sbc     _team1_score
	bcc     L1D7C
	beq     L1D7C
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; else
;
	jmp     L1D86
;
; winner = TIE_WINNER;
;
L1D7C:	lda     #$02
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; sfx_play(SFX_DRAW_GAME, 0);
;
	lda     #$04
L1D86:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; init_roundover();
;
	jsr     _init_roundover
;
; if (quack2_cooldown > 0) {
;
L1D7D:	lda     _quack2_cooldown
	beq     L1D7E
;
; quack2_cooldown--;
;
	dec     _quack2_cooldown
;
; if (quack4_cooldown > 0) {
;
L1D7E:	lda     _quack4_cooldown
	beq     L1D7F
;
; quack4_cooldown--;
;
	dec     _quack4_cooldown
;
; if(stun_p1 > 0){
;
L1D7F:	lda     _stun_p1
	beq     L1D80
;
; stun_p1--;
;
	dec     _stun_p1
;
; if(stun_p2 > 0){
;
L1D80:	lda     _stun_p2
	beq     L1D81
;
; stun_p2--; 
;
	dec     _stun_p2
;
; if(stun_p3 > 0){
;
L1D81:	lda     _stun_p3
	beq     L1D82
;
; stun_p3--; 
;
	dec     _stun_p3
;
; if(stun_p4 > 0){
;
L1D82:	lda     _stun_p4
	beq     L1D83
;
; stun_p4--;
;
	dec     _stun_p4
;
; if (bee1_bigbee_timer > 0 ) {
;
L1D83:	lda     _bee1_bigbee_timer
	beq     L1D84
;
; bee1_bigbee_timer--;
;
	dec     _bee1_bigbee_timer
;
; if (bee3_bigbee_timer > 0 ) { 
;
L1D84:	lda     _bee3_bigbee_timer
	beq     L1C63
;
; bee3_bigbee_timer--;
;
	dec     _bee3_bigbee_timer
;
; }
;
L1C63:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ quack_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_quack_movement: near

.segment	"CODE"

;
; if(quack2.moving){
;
	lda     _quack2+5
	jeq     L152A
;
; if(quack2.direction == DIR_LEFT){
;
	lda     _quack2+4
	cmp     #$02
	bne     L1D8E
;
; quack2.x -= (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L14E2
	inx
L14E2:	eor     #$FF
	sec
	adc     _quack2
	sta     _quack2
	txa
	eor     #$FF
	adc     _quack2+1
	sta     _quack2+1
;
; } else if (quack2.direction == DIR_RIGHT){
;
	jmp     L1D91
L1D8E:	lda     _quack2+4
	cmp     #$03
	bne     L1D8F
;
; quack2.x += (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1D8A
	inx
	clc
L1D8A:	adc     _quack2
	sta     _quack2
	txa
	adc     _quack2+1
	sta     _quack2+1
;
; } else if (quack2.direction == DIR_UP){
;
	jmp     L1D91
L1D8F:	lda     _quack2+4
	bne     L1D90
;
; quack2.y -= (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L14F0
	inx
L14F0:	eor     #$FF
	sec
	adc     _quack2+2
	sta     _quack2+2
	txa
	eor     #$FF
;
; } else if (quack2.direction == DIR_DOWN){
;
	jmp     L1DA4
L1D90:	lda     _quack2+4
	cmp     #$01
	bne     L1D91
;
; quack2.y += (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1D8B
	inx
	clc
L1D8B:	adc     _quack2+2
	sta     _quack2+2
	txa
L1DA4:	adc     _quack2+2+1
	sta     _quack2+2+1
;
; temp_x2 = quack2.x >> 8;
;
L1D91:	lda     _quack2+1
	sta     _temp_x2
;
; temp_y2 = quack2.y >> 8;
;
	lda     _quack2+3
	sta     _temp_y2
;
; if (quack_tile_solid()){
;
	jsr     _quack_tile_solid
	tax
	beq     L1D92
;
; quack2.moving = 0;
;
	lda     #$00
	sta     _quack2+5
;
; temp_x = BoxGuy1.x >> 8;
;
L1D92:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = quack2.x >> 8;
;
	lda     _quack2+1
	sta     _temp_x2
;
; temp_y2 = quack2.y >> 8;
;
	lda     _quack2+3
	sta     _temp_y2
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L1D94
;
; if(bee1_bigbee_timer == 0){
;
	lda     _bee1_bigbee_timer
	bne     L1D93
;
; stun_p1 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p1
;
; quack2.moving = 0;
;
L1D93:	lda     #$00
	sta     _quack2+5
;
; temp_x = BoxGuy2.x >> 8;
;
L1D94:	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L1D95
;
; stun_p2 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p2
;
; quack2.moving = 0;
;
	lda     #$00
	sta     _quack2+5
;
; temp_x = BoxGuy3.x >> 8;
;
L1D95:	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L1D97
;
; if(bee3_bigbee_timer == 0){
;
	lda     _bee3_bigbee_timer
	bne     L1D96
;
; stun_p3 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p3
;
; quack2.moving = 0;
;
L1D96:	lda     #$00
	sta     _quack2+5
;
; temp_x = BoxGuy4.x >> 8;
;
L1D97:	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L152A
;
; stun_p4 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p4
;
; quack2.moving = 0;
;
	lda     #$00
	sta     _quack2+5
;
; if(quack4.moving){
;
L152A:	lda     _quack4+5
	bne     L1DA6
;
; }
;
	rts
;
; if(quack4.direction == DIR_LEFT){
;
L1DA6:	lda     _quack4+4
	cmp     #$02
	bne     L1D98
;
; quack4.x -= (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1537
	inx
L1537:	eor     #$FF
	sec
	adc     _quack4
	sta     _quack4
	txa
	eor     #$FF
	adc     _quack4+1
	sta     _quack4+1
;
; } else if (quack4.direction == DIR_RIGHT){
;
	jmp     L1D9B
L1D98:	lda     _quack4+4
	cmp     #$03
	bne     L1D99
;
; quack4.x += (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1D8C
	inx
	clc
L1D8C:	adc     _quack4
	sta     _quack4
	txa
	adc     _quack4+1
	sta     _quack4+1
;
; } else if (quack4.direction == DIR_UP){
;
	jmp     L1D9B
L1D99:	lda     _quack4+4
	bne     L1D9A
;
; quack4.y -= (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1545
	inx
L1545:	eor     #$FF
	sec
	adc     _quack4+2
	sta     _quack4+2
	txa
	eor     #$FF
;
; } else if (quack4.direction == DIR_DOWN){
;
	jmp     L1DA5
L1D9A:	lda     _quack4+4
	cmp     #$01
	bne     L1D9B
;
; quack4.y += (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1D8D
	inx
	clc
L1D8D:	adc     _quack4+2
	sta     _quack4+2
	txa
L1DA5:	adc     _quack4+2+1
	sta     _quack4+2+1
;
; temp_x2 = quack4.x >> 8;
;
L1D9B:	lda     _quack4+1
	sta     _temp_x2
;
; temp_y2 = quack4.y >> 8;
;
	lda     _quack4+3
	sta     _temp_y2
;
; if (quack_tile_solid()){
;
	jsr     _quack_tile_solid
	tax
	beq     L1D9C
;
; quack4.moving = 0;
;
	lda     #$00
	sta     _quack4+5
;
; temp_x = BoxGuy1.x >> 8;
;
L1D9C:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = quack4.x >> 8;
;
	lda     _quack4+1
	sta     _temp_x2
;
; temp_y2 = quack4.y >> 8;
;
	lda     _quack4+3
	sta     _temp_y2
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L1D9E
;
; if(bee1_bigbee_timer == 0){
;
	lda     _bee1_bigbee_timer
	bne     L1D9D
;
; stun_p1 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p1
;
; quack4.moving = 0;
;
L1D9D:	lda     #$00
	sta     _quack4+5
;
; temp_x = BoxGuy2.x >> 8;
;
L1D9E:	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L1D9F
;
; stun_p2 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p2
;
; quack4.moving = 0;
;
	lda     #$00
	sta     _quack4+5
;
; temp_x = BoxGuy3.x >> 8;
;
L1D9F:	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L1DA1
;
; if(bee3_bigbee_timer == 0){
;
	lda     _bee3_bigbee_timer
	bne     L1DA0
;
; stun_p3 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p3
;
; quack4.moving = 0;
;
L1DA0:	lda     #$00
	sta     _quack4+5
;
; temp_x = BoxGuy4.x >> 8;
;
L1DA1:	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L157F
;
; stun_p4 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p4
;
; quack4.moving = 0;
;
	lda     #$00
	sta     _quack4+5
;
; }
;
L157F:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if (temp_y >= 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L1DA7
;
; return 0;
;
	txa
	rts
;
; temp = combmapwoflowers[((temp_y >> 3) << 5) + (temp_x >> 3)];
;
L1DA7:	lda     _temp_y
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     ptr1
	lda     #$00
	adc     ptr1+1
	clc
	adc     #>(_combmapwoflowers)
	sta     ptr1+1
	ldy     #<(_combmapwoflowers)
	lda     (ptr1),y
	sta     _temp
;
; if (temp == 0xc6 || temp == 0xc7 || temp == 0xc8 || temp == 0xc9 || temp == 0xca)
;
	cmp     #$C6
	beq     L1DA8
	lda     _temp
	cmp     #$C7
	beq     L1DA8
	cmp     #$C8
	beq     L1DA8
	cmp     #$C9
	beq     L1DA8
	cmp     #$CA
	bne     L1DA9
;
; return 0;
;
L1DA8:	ldx     #$00
	txa
	rts
;
; else if (temp == 0xb6 || temp == 0xb7 || temp == 0xb8 || temp == 0xb9 || temp == 0xba)
;
L1DA9:	lda     _temp
	cmp     #$B6
	beq     L1DAA
	cmp     #$B7
	beq     L1DAA
	cmp     #$B8
	beq     L1DAA
	cmp     #$B9
	beq     L1DAA
	cmp     #$BA
	beq     L1DAA
	ldx     #$00
	jmp     L1DAB
;
; return 0;
;
L1DAA:	ldx     #$00
	txa
	rts
;
; return 1;
;
L1DAB:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp_x = Generic.x;
;
	lda     _Generic
	sta     _temp_x
;
; eject_L = temp_x & 0x07; // distance to next tile boundary
;
	and     #$07
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1DAD
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L1DAD:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1DAF
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L1DAF:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp_x = Generic.x + Generic.width; 
;
	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; eject_R = 8 - (temp_x & 0x07); // distance to next tile boundary
;
	lda     #$08
	jsr     pusha0
	lda     _temp_x
	and     #$07
	jsr     tossuba0
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1DB2
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L1DB2:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1DB4
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L1DB4:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y & 0x07; // distance to next tile boundary
;
	and     #$07
	sta     _eject_U
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1DB6
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L1DB6:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1DB8
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L1DB8:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; eject_D = 8 - (temp_y & 0x07); // distance to next tile boundary
;
	lda     #$08
	jsr     pusha0
	lda     _temp_y
	and     #$07
	jsr     tossuba0
	sta     _eject_D
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1DBB
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L1DBB:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L1DBD
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L1DBD:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ sprite_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collision: near

.segment	"CODE"

;
; if (temp_x < temp_x2 + 8 && temp_x + 8 > temp_x2 &&
;
	lda     _temp_x
	jsr     pusha0
	lda     _temp_x2
	clc
	adc     #$08
	bcc     L1780
	ldx     #$01
L1780:	jsr     tosicmp
	bcs     L1781
	ldx     #$00
	lda     _temp_x
	clc
	adc     #$08
	bcc     L1782
	inx
L1782:	sec
	sbc     _temp_x2
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L1781
	beq     L1781
;
; temp_y < temp_y2 + 8 && temp_y + 8 > temp_y2)
;
	lda     _temp_y
	jsr     pusha0
	lda     _temp_y2
	clc
	adc     #$08
	bcc     L1783
	ldx     #$01
L1783:	jsr     tosicmp
	bcs     L1781
	ldx     #$00
	lda     _temp_y
	clc
	adc     #$08
	bcc     L1784
	inx
L1784:	sec
	sbc     _temp_y2
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	beq     L1781
	bcs     L177F
L1781:	ldx     #$00
	txa
	rts
;
; return 1;
;
L177F:	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_powerup_collision (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_powerup_collision: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; if (player_x + 4 >= powerup_x && player_x + 4 < powerup_x + 16 &&
;
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$04
	bcc     L1DC0
	inx
L1DC0:	ldy     #$01
	cmp     (sp),y
	txa
	sbc     #$00
	lda     #$00
	tax
	bcc     L1789
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$04
	bcc     L178E
	inx
L178E:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$10
	bcc     L178F
	inx
L178F:	jsr     tosicmp
	bcs     L178D
;
; player_y + 4 >= powerup_y && player_y + 4 < powerup_y + 16)
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$04
	bcc     L1DC1
	inx
L1DC1:	ldy     #$00
	cmp     (sp),y
	txa
	sbc     #$00
	tya
	tax
	bcc     L1789
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$04
	bcc     L1791
	inx
L1791:	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$10
	bcc     L1792
	inx
L1792:	jsr     tosicmp
	bcc     L178B
L178D:	ldx     #$00
	txa
	jmp     incsp4
;
; return 1;
;
L178B:	ldx     #$00
	lda     #$01
	jmp     incsp4
;
; }
;
L1789:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init_system();
;
	jsr     _init_system
;
; init_title_loop();
;
	jsr     _init_title_loop
;
; if (game_mode == MODE_TITLE)
;
L1DC5:	lda     _game_mode
	bne     L1DC6
;
; title_loop();
;
	jsr     _title_loop
;
; if (game_mode == MODE_OPTIONS)
;
L1DC6:	lda     _game_mode
	cmp     #$01
	bne     L1DC7
;
; options_loop();
;
	jsr     _options_loop
;
; if (game_mode == MODE_GAME)
;
L1DC7:	lda     _game_mode
	cmp     #$02
	bne     L1DC8
;
; game_loop();
;
	jsr     _game_loop
;
; if (game_mode == MODE_GAMEOVER)
;
L1DC8:	lda     _game_mode
	cmp     #$03
	bne     L1DC9
;
; gameover_loop();
;
	jsr     _gameover_loop
;
; if(game_mode== MODE_ROUNDOVER){
;
L1DC9:	lda     _game_mode
	cmp     #$04
	bne     L1DC5
;
; roundover_loop();
;
	jsr     _roundover_loop
;
; while (1)
;
	jmp     L1DC5

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ quack_tile_solid (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_quack_tile_solid: near

.segment	"CODE"

;
; if (temp_y2 >= 0xf0) return 0;
;
	lda     _temp_y2
	cmp     #$F0
	ldx     #$00
	bcc     L1DCA
	txa
	rts
;
; largeindex = ((temp_y2 >> 3) << 5) + (temp_x2 >> 3);
;
L1DCA:	lda     _temp_y2
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x2
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _largeindex
	lda     #$00
	adc     ptr1+1
	sta     _largeindex+1
;
; temp = combmapwoflowers[largeindex];
;
	lda     #<(_combmapwoflowers)
	sta     ptr1
	lda     #>(_combmapwoflowers)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	sta     _temp
;
; if (temp == 0xc6 || temp == 0xc7 || temp == 0xc8 || temp == 0xc9 || temp == 0xca) return 0;
;
	cmp     #$C6
	beq     L1DCB
	lda     _temp
	cmp     #$C7
	beq     L1DCB
	cmp     #$C8
	beq     L1DCB
	cmp     #$C9
	beq     L1DCB
	cmp     #$CA
	bne     L1DCC
L1DCB:	ldx     #$00
	txa
	rts
;
; if (temp == 0xb6 || temp == 0xb7 || temp == 0xb8 || temp == 0xb9 || temp == 0xba) return 0;
;
L1DCC:	lda     _temp
	cmp     #$B6
	beq     L1DCD
	cmp     #$B7
	beq     L1DCD
	cmp     #$B8
	beq     L1DCD
	cmp     #$B9
	beq     L1DCD
	cmp     #$BA
	beq     L1DCD
	ldx     #$00
	jmp     L1DCE
L1DCD:	ldx     #$00
	txa
	rts
;
; return 1;
;
L1DCE:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_dot_consumed (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_dot_consumed: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char byte_index = map_index >> 3; // divide by 8
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shrax3
	jsr     pusha
;
; unsigned char bit_index = map_index & 0x07; // modulo 8
;
	ldy     #$01
	lda     (sp),y
	and     #$07
	jsr     pusha
;
; return (consumed_dots[byte_index] >> bit_index) & 0x01;
;
	ldy     #$01
	lda     (sp),y
	tay
	lda     _consumed_dots,y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	tay
	lda     ptr1
L1DCF:	lsr     a
	dey
	bpl     L1DCF
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ mark_dot_consumed (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mark_dot_consumed: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char byte_index = map_index >> 3; // divide by 8
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shrax3
	jsr     pusha
;
; unsigned char bit_index = map_index & 0x07; // modulo 8
;
	ldy     #$01
	lda     (sp),y
	and     #$07
	jsr     pusha
;
; consumed_dots[byte_index] |= (0x01 << bit_index);
;
	lda     #<(_consumed_dots)
	ldx     #>(_consumed_dots)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L1726
	inx
L1726:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$01
L1DD0:	asl     a
	dey
	bpl     L1DD0
	ror     a
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

