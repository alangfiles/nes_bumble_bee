;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_delay
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.import		_pad_poll_4score_1_3
	.import		_pad_poll_4score_2_4
	.export		_gamesprites_win
	.export		_gamesprites_empty
	.export		_gamesprites_smallbee1left0_data
	.export		_gamesprites_smallbee2left0_data
	.export		_gamesprites_smallbeeleft1_data
	.export		_gamesprites_smallbee2left1_data
	.export		_gamesprites_smallbeeleft2_data
	.export		_gamesprites_smallbee2left2_data
	.export		_gamesprites_smallbeeright0_data
	.export		_gamesprites_smallbeeright1_data
	.export		_gamesprites_smallbeeright2_data
	.export		_gamesprites_smallbee2right0_data
	.export		_gamesprites_smallbee2right1_data
	.export		_gamesprites_smallbee2right2_data
	.export		_gamesprites_bigbeeleft0_data
	.export		_gamesprites_bigbeeleft1_data
	.export		_gamesprites_bigbeeleft2_data
	.export		_gamesprites_bigbeeright0_data
	.export		_gamesprites_bigbeeright1_data
	.export		_gamesprites_bigbeeright2_data
	.export		_gamesprites_bigbee2left0_data
	.export		_gamesprites_bigbee2left1_data
	.export		_gamesprites_bigbee2left2_data
	.export		_gamesprites_bigbee2right0_data
	.export		_gamesprites_bigbee2right1_data
	.export		_gamesprites_bigbee2right2_data
	.export		_gamesprites_smallduck1left0_data
	.export		_gamesprites_smallduckleft1_data
	.export		_gamesprites_smallduckleft2_data
	.export		_gamesprites_smallduck2left0_data
	.export		_gamesprites_smallduck2left1_data
	.export		_gamesprites_smallduck2left2_data
	.export		_gamesprites_smallduck1right0_data
	.export		_gamesprites_smallduckright1_data
	.export		_gamesprites_smallduckright2_data
	.export		_gamesprites_smallduck2right0_data
	.export		_gamesprites_smallduck2right1_data
	.export		_gamesprites_smallduck2right2_data
	.export		_gamesprites_box1_data
	.export		_gamesprites_box2_data
	.export		_gamesprites_box3_data
	.export		_gamesprites_box4_data
	.export		_gamesprites_quackright_data
	.export		_gamesprites_quackleft_data
	.export		_gamesprites_quackup_data
	.export		_gamesprites_quackdown_data
	.export		_gamesprites_powerup_data
	.export		_gamesprites_big3_data
	.export		_gamesprites_big2_data
	.export		_gamesprites_big1_data
	.export		_gamesprites_blank_data
	.export		_doublepad
	.export		_generic_pad
	.export		_turbo_p1
	.export		_turbo_p2
	.export		_turbo_p3
	.export		_turbo_p4
	.export		_prev_pad1
	.export		_prev_pad2
	.export		_prev_pad3
	.export		_prev_pad4
	.export		_pad1
	.export		_pad2
	.export		_pad3
	.export		_pad4
	.export		_game_mode
	.export		_winner
	.export		_game_frame_timer
	.export		_game_timer
	.export		_speed_option
	.export		_current_speed
	.export		_force_redraw
	.export		_use_turbo
	.export		_turbo_amount
	.export		_ducks_go_faster_over_time
	.export		_map_positions
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_tempint
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_hero_velocity_x
	.export		_hero_velocity_y
	.export		_old_x
	.export		_old_y
	.export		_temp
	.export		_temp_x
	.export		_temp_y
	.export		_temp_x2
	.export		_temp_y2
	.export		_largeindex
	.export		_song
	.export		_current_settings_choice
	.export		_settings_map
	.export		_settings_speed
	.export		_settings_song
	.export		_map_ptr
	.export		_bit_index
	.export		_bit_offset
	.export		_frame_counter
	.export		_ai_counter
	.export		_current_player
	.export		_team1_score
	.export		_team2_score
	.export		_team1_wins
	.export		_team2_wins
	.export		_win_reason
	.export		_powerup1
	.export		_powerup2
	.export		_powerup3
	.export		_powerup4
	.export		_bee1_bigbee_timer
	.export		_bee3_bigbee_timer
	.export		_sprite_rotation
	.export		_anim_frame_1
	.export		_anim_frame_2
	.export		_anim_frame_3
	.export		_anim_frame_4
	.export		_consumed_dots
	.export		_start_hold_timer
	.export		_start_held
	.export		_combs
	.export		_vines
	.export		_outdoors
	.export		_settings
	.export		_title
	.export		_Generic
	.export		_quack2
	.export		_quack4
	.export		_quack2_cooldown
	.export		_quack4_cooldown
	.export		_stun_p1
	.export		_stun_p2
	.export		_stun_p3
	.export		_stun_p4
	.export		_GenericBoxGuy
	.export		_BoxGuy1
	.export		_BoxGuy2
	.export		_BoxGuy3
	.export		_BoxGuy4
	.export		_COMBS_FLOWER_X
	.export		_COMBS_FLOWER_Y
	.export		_VINES_FLOWER_X
	.export		_VINES_FLOWER_Y
	.export		_OUTDOORS_FLOWER_X
	.export		_OUTDOORS_FLOWER_Y
	.export		_palette_combsnplants_bg
	.export		_palette_outdoors_bg
	.export		_palette_vineswoflowers_bg
	.export		_palette_sp
	.export		_brian_pallete_sp
	.export		_palette_title_bg
	.export		_palette_options_bg
	.export		_metatiles1
	.export		_load_room
	.export		_draw_sprites
	.export		_draw_player_1
	.export		_draw_player_2
	.export		_draw_player_3
	.export		_draw_player_4
	.export		_movement
	.export		_check_tile_and_collect
	.export		_debug_extras
	.export		_read_controllers
	.export		_seeker_ai
	.export		_chaser_ai
	.export		_game_loop
	.export		_title_loop
	.export		_options_loop
	.export		_gameover_loop
	.export		_init_game_loop
	.export		_init_options_loop
	.export		_init_gameover_loop
	.export		_init_title_loop
	.export		_init_system
	.export		_clear_background
	.export		_update_hud
	.export		_init_roundover
	.export		_start_round
	.export		_roundover_loop
	.export		_game_counters
	.export		_quack_movement
	.export		_load_bg_palette
	.export		_update_options_screen
	.export		_bg_collision_sub
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_sprite_collision
	.export		_check_powerup_collision
	.export		_main
	.export		_quack_tile_solid
	.export		_check_powerup
	.export		_pellet_tiles
	.export		_blank_tiles
	.export		_is_dot_consumed
	.export		_mark_dot_consumed

.segment	"DATA"

_BoxGuy1:
	.word	$4000
	.word	$2800
	.res	2,$00
_BoxGuy2:
	.word	$8000
	.word	$3000
	.res	2,$00
_BoxGuy3:
	.word	$A000
	.word	$3000
	.res	2,$00
_BoxGuy4:
	.word	$C000
	.word	$4000
	.res	2,$00

.segment	"RODATA"

_gamesprites_win:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$00
	.byte	$80
_gamesprites_empty:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$00
	.byte	$80
_gamesprites_smallbee1left0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$01
	.byte	$80
_gamesprites_smallbeeleft1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2A
	.byte	$01
	.byte	$80
_gamesprites_smallbeeleft2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$80
_gamesprites_smallbee2left2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$01
	.byte	$80
_gamesprites_smallbeeright0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$28
	.byte	$40
	.byte	$80
_gamesprites_smallbeeright1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$2A
	.byte	$40
	.byte	$80
_gamesprites_smallbeeright2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$2C
	.byte	$40
	.byte	$80
_gamesprites_smallbee2right0_data:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$28
	.byte	$41
	.byte	$80
_gamesprites_smallbee2right1_data:
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$2A
	.byte	$41
	.byte	$80
_gamesprites_smallbee2right2_data:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$2C
	.byte	$41
	.byte	$80
_gamesprites_bigbeeleft0_data:
	.byte	$FE
	.byte	$FE
	.byte	$47
	.byte	$00
	.byte	$FE
	.byte	$FA
	.byte	$37
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$48
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$38
	.byte	$00
	.byte	$80
_gamesprites_bigbeeleft1_data:
	.byte	$FE
	.byte	$FE
	.byte	$49
	.byte	$00
	.byte	$02
	.byte	$FA
	.byte	$39
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$3A
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$4A
	.byte	$00
	.byte	$80
_gamesprites_bigbeeleft2_data:
	.byte	$FE
	.byte	$FE
	.byte	$4B
	.byte	$00
	.byte	$FE
	.byte	$FA
	.byte	$3B
	.byte	$00
	.byte	$06
	.byte	$FA
	.byte	$3C
	.byte	$00
	.byte	$06
	.byte	$FE
	.byte	$4C
	.byte	$00
	.byte	$80
_gamesprites_bigbeeright0_data:
	.byte	$06
	.byte	$FE
	.byte	$47
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$37
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$48
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$38
	.byte	$40
	.byte	$80
_gamesprites_bigbeeright1_data:
	.byte	$06
	.byte	$FE
	.byte	$49
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$39
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$3A
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$4A
	.byte	$40
	.byte	$80
_gamesprites_bigbeeright2_data:
	.byte	$06
	.byte	$FE
	.byte	$4B
	.byte	$40
	.byte	$06
	.byte	$FA
	.byte	$3B
	.byte	$40
	.byte	$FE
	.byte	$FA
	.byte	$3C
	.byte	$40
	.byte	$FE
	.byte	$FE
	.byte	$4C
	.byte	$40
	.byte	$80
_gamesprites_bigbee2left0_data:
	.byte	$FE
	.byte	$FE
	.byte	$47
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$37
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$48
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$38
	.byte	$01
	.byte	$80
_gamesprites_bigbee2left1_data:
	.byte	$FE
	.byte	$FE
	.byte	$49
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$39
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$3A
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$4A
	.byte	$01
	.byte	$80
_gamesprites_bigbee2left2_data:
	.byte	$FE
	.byte	$FE
	.byte	$4B
	.byte	$01
	.byte	$FE
	.byte	$FA
	.byte	$3B
	.byte	$01
	.byte	$06
	.byte	$FA
	.byte	$3C
	.byte	$01
	.byte	$06
	.byte	$FE
	.byte	$4C
	.byte	$01
	.byte	$80
_gamesprites_bigbee2right0_data:
	.byte	$06
	.byte	$FE
	.byte	$47
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$37
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$48
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$38
	.byte	$41
	.byte	$80
_gamesprites_bigbee2right1_data:
	.byte	$06
	.byte	$FE
	.byte	$49
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$39
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$3A
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$4A
	.byte	$41
	.byte	$80
_gamesprites_bigbee2right2_data:
	.byte	$06
	.byte	$FE
	.byte	$4B
	.byte	$41
	.byte	$06
	.byte	$FA
	.byte	$3B
	.byte	$41
	.byte	$FE
	.byte	$FA
	.byte	$3C
	.byte	$41
	.byte	$FE
	.byte	$FE
	.byte	$4C
	.byte	$41
	.byte	$80
_gamesprites_smallduck1left0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$02
	.byte	$80
_gamesprites_smallduckleft1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$02
	.byte	$80
_gamesprites_smallduckleft2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$42
	.byte	$80
_gamesprites_smallduck2left0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$03
	.byte	$80
_gamesprites_smallduck2left1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$03
	.byte	$80
_gamesprites_smallduck2left2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$43
	.byte	$80
_gamesprites_smallduck1right0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$02
	.byte	$80
_gamesprites_smallduckright1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$02
	.byte	$80
_gamesprites_smallduckright2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$42
	.byte	$80
_gamesprites_smallduck2right0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$03
	.byte	$80
_gamesprites_smallduck2right1_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$03
	.byte	$80
_gamesprites_smallduck2right2_data:
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$43
	.byte	$80
_gamesprites_box1_data:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$80
_gamesprites_box2_data:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$01
	.byte	$80
_gamesprites_box3_data:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$02
	.byte	$80
_gamesprites_box4_data:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$03
	.byte	$80
_gamesprites_quackright_data:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$80
_gamesprites_quackleft_data:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$40
	.byte	$80
_gamesprites_quackup_data:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$80
_gamesprites_quackdown_data:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$80
	.byte	$80
_gamesprites_powerup_data:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$80
_gamesprites_big3_data:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$15
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$07
	.byte	$83
	.byte	$10
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_big2_data:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$07
	.byte	$83
	.byte	$08
	.byte	$10
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$07
	.byte	$43
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$07
	.byte	$C3
	.byte	$08
	.byte	$20
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$05
	.byte	$43
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_big1_data:
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$05
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$05
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$17
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_gamesprites_blank_data:
	.byte	$08
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$20
	.byte	$03
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$43
	.byte	$F0
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$43
	.byte	$20
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$03
	.byte	$C3
	.byte	$F0
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$18
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$20
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$F0
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$F8
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$28
	.byte	$03
	.byte	$03
	.byte	$80
_combs:
	.byte	$A7
	.byte	$B6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$EE
	.byte	$EF
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$AB
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$B6
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A8
	.byte	$5E
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5B
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$EE
	.byte	$EF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EE
	.byte	$EF
	.byte	$EE
	.byte	$EF
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$B6
	.byte	$B8
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$DE
	.byte	$DF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B8
	.byte	$CA
	.byte	$C8
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C8
	.byte	$C8
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C9
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C9
	.byte	$B8
	.byte	$B8
	.byte	$FB
	.byte	$A7
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C9
	.byte	$BE
	.byte	$BF
	.byte	$EB
	.byte	$B6
	.byte	$CC
	.byte	$CB
	.byte	$DD
	.byte	$DF
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C8
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$FB
	.byte	$B6
	.byte	$CC
	.byte	$CF
	.byte	$C6
	.byte	$8C
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$8D
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$EB
	.byte	$CA
	.byte	$C6
	.byte	$EB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$A7
	.byte	$C6
	.byte	$EA
	.byte	$B6
	.byte	$CB
	.byte	$DF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$8F
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FA
	.byte	$B8
	.byte	$DF
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$9C
	.byte	$CA
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$CA
	.byte	$C8
	.byte	$A7
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C7
	.byte	$EB
	.byte	$B9
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$8F
	.byte	$C6
	.byte	$C9
	.byte	$8E
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$ED
	.byte	$BF
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$CA
	.byte	$C6
	.byte	$C8
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$FD
	.byte	$DF
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$FB
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C8
	.byte	$C8
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$FB
	.byte	$C6
	.byte	$EB
	.byte	$A7
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$FE
	.byte	$FF
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FB
	.byte	$B6
	.byte	$BE
	.byte	$EC
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C7
	.byte	$BE
	.byte	$BF
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$DE
	.byte	$DF
	.byte	$C8
	.byte	$EB
	.byte	$B6
	.byte	$DE
	.byte	$FC
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$BE
	.byte	$BF
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$9C
	.byte	$9C
	.byte	$F8
	.byte	$F9
	.byte	$C7
	.byte	$EA
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FA
	.byte	$B6
	.byte	$B6
	.byte	$EA
	.byte	$C6
	.byte	$A7
	.byte	$A7
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$C6
	.byte	$8C
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$E8
	.byte	$E9
	.byte	$C6
	.byte	$EB
	.byte	$99
	.byte	$A7
	.byte	$FA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$EA
	.byte	$C6
	.byte	$ED
	.byte	$BC
	.byte	$DC
	.byte	$EC
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$ED
	.byte	$BC
	.byte	$DC
	.byte	$EC
	.byte	$C9
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C8
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$FB
	.byte	$C6
	.byte	$FA
	.byte	$C6
	.byte	$FD
	.byte	$BB
	.byte	$CB
	.byte	$FC
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$FD
	.byte	$BB
	.byte	$CB
	.byte	$FC
	.byte	$C6
	.byte	$FB
	.byte	$C6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$8E
	.byte	$DE
	.byte	$DF
	.byte	$8F
	.byte	$C6
	.byte	$EB
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$CA
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$EB
	.byte	$C6
	.byte	$A7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$9E
	.byte	$FB
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$CA
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$A7
	.byte	$C6
	.byte	$EE
	.byte	$EF
	.byte	$A7
	.byte	$C6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$F8
	.byte	$F9
	.byte	$BE
	.byte	$BF
	.byte	$C7
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$F8
	.byte	$F9
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$C6
	.byte	$FB
	.byte	$AB
	.byte	$B6
	.byte	$EB
	.byte	$B8
	.byte	$B8
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$FE
	.byte	$FF
	.byte	$C6
	.byte	$DE
	.byte	$DF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$BF
	.byte	$C6
	.byte	$A7
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$EB
	.byte	$A7
	.byte	$A7
	.byte	$FB
	.byte	$B8
	.byte	$B8
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$CE
	.byte	$CF
	.byte	$EE
	.byte	$EF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$BE
	.byte	$CD
	.byte	$BC
	.byte	$CF
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$B8
	.byte	$B8
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$A8
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$FE
	.byte	$FF
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$DB
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$F8
	.byte	$F9
	.byte	$AA
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$A7
	.byte	$AF
	.byte	$B6
	.byte	$A7
	.byte	$B9
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B7
	.byte	$A8
	.byte	$DE
	.byte	$DD
	.byte	$DD
	.byte	$DF
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$00
	.byte	$0C
	.byte	$0F
	.byte	$07
	.byte	$0D
	.byte	$0F
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_vines:
	.byte	$CC
	.byte	$CC
	.byte	$CB
	.byte	$DD
	.byte	$BB
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$CC
	.byte	$A6
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$AB
	.byte	$CE
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$A6
	.byte	$DC
	.byte	$CD
	.byte	$BC
	.byte	$5E
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5B
	.byte	$CC
	.byte	$CC
	.byte	$A6
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CB
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$BB
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$A5
	.byte	$D3
	.byte	$C4
	.byte	$C0
	.byte	$D4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$D3
	.byte	$C4
	.byte	$C0
	.byte	$D4
	.byte	$A5
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$E4
	.byte	$A5
	.byte	$A5
	.byte	$D3
	.byte	$D4
	.byte	$A5
	.byte	$A5
	.byte	$C0
	.byte	$A0
	.byte	$A1
	.byte	$C1
	.byte	$C4
	.byte	$A5
	.byte	$C0
	.byte	$E1
	.byte	$A0
	.byte	$A1
	.byte	$C4
	.byte	$A5
	.byte	$D3
	.byte	$D4
	.byte	$A5
	.byte	$A5
	.byte	$E4
	.byte	$00
	.byte	$00
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$C0
	.byte	$D4
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$E0
	.byte	$A5
	.byte	$D0
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$D3
	.byte	$C4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$A6
	.byte	$CF
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$C0
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$A5
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$E2
	.byte	$C1
	.byte	$C4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$CE
	.byte	$CB
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$D3
	.byte	$C1
	.byte	$C1
	.byte	$C2
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$D4
	.byte	$A5
	.byte	$D3
	.byte	$C2
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$CE
	.byte	$CF
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$E3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$E3
	.byte	$A5
	.byte	$CE
	.byte	$CF
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$D3
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C4
	.byte	$A5
	.byte	$C0
	.byte	$E2
	.byte	$C5
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C5
	.byte	$C1
	.byte	$C4
	.byte	$A5
	.byte	$C0
	.byte	$F2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$D4
	.byte	$A5
	.byte	$CE
	.byte	$CF
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$C0
	.byte	$D4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$D3
	.byte	$C4
	.byte	$D0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$CE
	.byte	$DC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$C0
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$D4
	.byte	$A5
	.byte	$D3
	.byte	$D4
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$D3
	.byte	$D4
	.byte	$A5
	.byte	$D3
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C4
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$C3
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$C0
	.byte	$C1
	.byte	$C4
	.byte	$A5
	.byte	$E3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$E3
	.byte	$A5
	.byte	$C0
	.byte	$E2
	.byte	$C4
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$E0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$E3
	.byte	$EE
	.byte	$EF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EE
	.byte	$EF
	.byte	$E3
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$CE
	.byte	$A6
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$FE
	.byte	$FF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FE
	.byte	$FF
	.byte	$D0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$E3
	.byte	$A5
	.byte	$E0
	.byte	$A5
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A5
	.byte	$E0
	.byte	$A5
	.byte	$E3
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$E0
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$A6
	.byte	$CF
	.byte	$A5
	.byte	$E0
	.byte	$A5
	.byte	$E3
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$E3
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$D0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$C0
	.byte	$C4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$C0
	.byte	$C4
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$F0
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$D3
	.byte	$C1
	.byte	$D4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$D3
	.byte	$C1
	.byte	$C4
	.byte	$A5
	.byte	$A5
	.byte	$C0
	.byte	$C1
	.byte	$D4
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$D3
	.byte	$C1
	.byte	$D4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$C1
	.byte	$C1
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$F2
	.byte	$E1
	.byte	$C1
	.byte	$D1
	.byte	$A5
	.byte	$A5
	.byte	$D2
	.byte	$C1
	.byte	$C1
	.byte	$F1
	.byte	$E1
	.byte	$C1
	.byte	$C2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$F1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D1
	.byte	$A5
	.byte	$A5
	.byte	$D2
	.byte	$E2
	.byte	$E1
	.byte	$CE
	.byte	$A6
	.byte	$CC
	.byte	$CF
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$E4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$A0
	.byte	$A1
	.byte	$F2
	.byte	$C4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$C0
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$C0
	.byte	$F2
	.byte	$A0
	.byte	$A1
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$F0
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$CE
	.byte	$CC
	.byte	$CC
	.byte	$DC
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$BC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$A6
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$A6
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$A6
	.byte	$A6
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$A6
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$A6
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$01
	.byte	$04
	.byte	$55
	.byte	$55
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$51
	.byte	$54
	.byte	$55
	.byte	$55
	.byte	$11
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_outdoors:
	.byte	$82
	.byte	$83
	.byte	$82
	.byte	$82
	.byte	$65
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$84
	.byte	$90
	.byte	$83
	.byte	$91
	.byte	$92
	.byte	$92
	.byte	$63
	.byte	$63
	.byte	$82
	.byte	$75
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$94
	.byte	$83
	.byte	$62
	.byte	$63
	.byte	$91
	.byte	$92
	.byte	$83
	.byte	$82
	.byte	$82
	.byte	$85
	.byte	$5E
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5F
	.byte	$5B
	.byte	$74
	.byte	$90
	.byte	$83
	.byte	$82
	.byte	$90
	.byte	$92
	.byte	$92
	.byte	$70
	.byte	$71
	.byte	$71
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$90
	.byte	$63
	.byte	$82
	.byte	$65
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$64
	.byte	$92
	.byte	$92
	.byte	$75
	.byte	$A5
	.byte	$78
	.byte	$67
	.byte	$67
	.byte	$77
	.byte	$A5
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$72
	.byte	$A5
	.byte	$61
	.byte	$61
	.byte	$60
	.byte	$60
	.byte	$A5
	.byte	$73
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$60
	.byte	$A5
	.byte	$78
	.byte	$68
	.byte	$68
	.byte	$77
	.byte	$A5
	.byte	$74
	.byte	$91
	.byte	$82
	.byte	$85
	.byte	$A5
	.byte	$66
	.byte	$72
	.byte	$73
	.byte	$66
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$B3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$76
	.byte	$73
	.byte	$72
	.byte	$76
	.byte	$A5
	.byte	$84
	.byte	$91
	.byte	$92
	.byte	$95
	.byte	$A5
	.byte	$76
	.byte	$62
	.byte	$62
	.byte	$66
	.byte	$A5
	.byte	$61
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$70
	.byte	$A5
	.byte	$B3
	.byte	$A5
	.byte	$A5
	.byte	$B3
	.byte	$A5
	.byte	$71
	.byte	$60
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$A5
	.byte	$66
	.byte	$62
	.byte	$63
	.byte	$66
	.byte	$A5
	.byte	$94
	.byte	$91
	.byte	$91
	.byte	$85
	.byte	$A5
	.byte	$76
	.byte	$62
	.byte	$63
	.byte	$66
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A3
	.byte	$A5
	.byte	$A5
	.byte	$A3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$76
	.byte	$63
	.byte	$63
	.byte	$66
	.byte	$A5
	.byte	$64
	.byte	$92
	.byte	$90
	.byte	$95
	.byte	$A5
	.byte	$76
	.byte	$62
	.byte	$92
	.byte	$76
	.byte	$A5
	.byte	$64
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$A5
	.byte	$A5
	.byte	$B3
	.byte	$A5
	.byte	$A5
	.byte	$B3
	.byte	$A5
	.byte	$A5
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$72
	.byte	$A5
	.byte	$66
	.byte	$62
	.byte	$92
	.byte	$76
	.byte	$A5
	.byte	$74
	.byte	$62
	.byte	$63
	.byte	$85
	.byte	$A5
	.byte	$76
	.byte	$63
	.byte	$63
	.byte	$66
	.byte	$A5
	.byte	$A3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A3
	.byte	$A5
	.byte	$66
	.byte	$63
	.byte	$62
	.byte	$66
	.byte	$A5
	.byte	$84
	.byte	$63
	.byte	$93
	.byte	$95
	.byte	$A5
	.byte	$66
	.byte	$71
	.byte	$70
	.byte	$66
	.byte	$A5
	.byte	$B3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$B3
	.byte	$00
	.byte	$00
	.byte	$B3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$B3
	.byte	$A5
	.byte	$76
	.byte	$70
	.byte	$71
	.byte	$76
	.byte	$A5
	.byte	$94
	.byte	$91
	.byte	$93
	.byte	$65
	.byte	$A5
	.byte	$78
	.byte	$67
	.byte	$67
	.byte	$77
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$60
	.byte	$70
	.byte	$61
	.byte	$60
	.byte	$70
	.byte	$61
	.byte	$60
	.byte	$60
	.byte	$61
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$78
	.byte	$67
	.byte	$67
	.byte	$77
	.byte	$A5
	.byte	$64
	.byte	$91
	.byte	$92
	.byte	$75
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$71
	.byte	$70
	.byte	$86
	.byte	$88
	.byte	$A5
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$A5
	.byte	$84
	.byte	$81
	.byte	$80
	.byte	$81
	.byte	$80
	.byte	$81
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$80
	.byte	$81
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$A5
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$A5
	.byte	$87
	.byte	$86
	.byte	$96
	.byte	$79
	.byte	$A5
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$A5
	.byte	$94
	.byte	$91
	.byte	$91
	.byte	$63
	.byte	$91
	.byte	$95
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$62
	.byte	$91
	.byte	$95
	.byte	$A5
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$A5
	.byte	$89
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$86
	.byte	$86
	.byte	$69
	.byte	$6B
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$69
	.byte	$6A
	.byte	$6A
	.byte	$6B
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$69
	.byte	$6B
	.byte	$86
	.byte	$86
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$8A
	.byte	$8A
	.byte	$69
	.byte	$6B
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$69
	.byte	$6A
	.byte	$6A
	.byte	$6B
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$69
	.byte	$6B
	.byte	$8A
	.byte	$8A
	.byte	$96
	.byte	$96
	.byte	$96
	.byte	$79
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$64
	.byte	$63
	.byte	$62
	.byte	$63
	.byte	$91
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$84
	.byte	$62
	.byte	$90
	.byte	$63
	.byte	$62
	.byte	$65
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$89
	.byte	$96
	.byte	$8A
	.byte	$98
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$74
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$95
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$94
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$85
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$97
	.byte	$8A
	.byte	$92
	.byte	$65
	.byte	$A5
	.byte	$84
	.byte	$65
	.byte	$A5
	.byte	$66
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$B3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B3
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$66
	.byte	$A5
	.byte	$84
	.byte	$85
	.byte	$A5
	.byte	$80
	.byte	$81
	.byte	$92
	.byte	$75
	.byte	$A5
	.byte	$74
	.byte	$85
	.byte	$A5
	.byte	$78
	.byte	$67
	.byte	$68
	.byte	$67
	.byte	$67
	.byte	$77
	.byte	$A5
	.byte	$70
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$71
	.byte	$A5
	.byte	$78
	.byte	$67
	.byte	$68
	.byte	$67
	.byte	$67
	.byte	$77
	.byte	$A5
	.byte	$64
	.byte	$95
	.byte	$A5
	.byte	$74
	.byte	$91
	.byte	$82
	.byte	$85
	.byte	$A5
	.byte	$84
	.byte	$95
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$66
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$66
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$94
	.byte	$85
	.byte	$A5
	.byte	$84
	.byte	$91
	.byte	$92
	.byte	$95
	.byte	$A5
	.byte	$94
	.byte	$62
	.byte	$80
	.byte	$81
	.byte	$73
	.byte	$72
	.byte	$72
	.byte	$A5
	.byte	$78
	.byte	$67
	.byte	$67
	.byte	$77
	.byte	$A5
	.byte	$A5
	.byte	$78
	.byte	$67
	.byte	$67
	.byte	$77
	.byte	$A5
	.byte	$80
	.byte	$81
	.byte	$72
	.byte	$80
	.byte	$81
	.byte	$92
	.byte	$65
	.byte	$A5
	.byte	$94
	.byte	$91
	.byte	$92
	.byte	$65
	.byte	$A5
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$71
	.byte	$71
	.byte	$71
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$A5
	.byte	$64
	.byte	$62
	.byte	$63
	.byte	$75
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$74
	.byte	$62
	.byte	$82
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$A5
	.byte	$A5
	.byte	$61
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$61
	.byte	$60
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$84
	.byte	$91
	.byte	$82
	.byte	$95
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$94
	.byte	$91
	.byte	$92
	.byte	$90
	.byte	$80
	.byte	$81
	.byte	$80
	.byte	$80
	.byte	$81
	.byte	$80
	.byte	$72
	.byte	$73
	.byte	$80
	.byte	$81
	.byte	$80
	.byte	$72
	.byte	$73
	.byte	$80
	.byte	$81
	.byte	$80
	.byte	$80
	.byte	$81
	.byte	$80
	.byte	$81
	.byte	$72
	.byte	$73
	.byte	$80
	.byte	$81
	.byte	$80
	.byte	$81
	.byte	$80
	.byte	$81
	.byte	$90
	.byte	$91
	.byte	$90
	.byte	$91
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$90
	.byte	$91
	.byte	$63
	.byte	$62
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$90
	.byte	$91
	.byte	$91
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$90
	.byte	$91
	.byte	$90
	.byte	$91
	.byte	$90
	.byte	$91
	.byte	$62
	.byte	$91
	.byte	$90
	.byte	$92
	.byte	$82
	.byte	$83
	.byte	$90
	.byte	$91
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$22
	.byte	$20
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$80
	.byte	$88
	.byte	$22
	.byte	$22
	.byte	$2A
	.byte	$88
	.byte	$22
	.byte	$8A
	.byte	$88
	.byte	$88
	.byte	$32
	.byte	$00
	.byte	$A8
	.byte	$AA
	.byte	$AA
	.byte	$A2
	.byte	$00
	.byte	$F8
	.byte	$FF
	.byte	$3C
	.byte	$AF
	.byte	$23
	.byte	$8C
	.byte	$AF
	.byte	$F3
	.byte	$FF
	.byte	$AA
	.byte	$A2
	.byte	$20
	.byte	$0A
	.byte	$0A
	.byte	$80
	.byte	$A8
	.byte	$AA
	.byte	$EA
	.byte	$AA
	.byte	$A2
	.byte	$A0
	.byte	$A0
	.byte	$A8
	.byte	$AA
	.byte	$BA
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
_settings:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$C1
	.byte	$C2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C5
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C2
	.byte	$C5
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$F2
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$B5
	.byte	$53
	.byte	$45
	.byte	$54
	.byte	$54
	.byte	$49
	.byte	$4E
	.byte	$47
	.byte	$53
	.byte	$B5
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D3
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$A0
	.byte	$A1
	.byte	$C2
	.byte	$C1
	.byte	$F2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$A0
	.byte	$A1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$0A
	.byte	$8A
	.byte	$AA
	.byte	$AA
	.byte	$29
	.byte	$0B
	.byte	$8A
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C8
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$06
	.byte	$0A
	.byte	$0A
_title:
	.byte	$BE
	.byte	$BF
	.byte	$8C
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A9
	.byte	$A7
	.byte	$BE
	.byte	$CD
	.byte	$BF
	.byte	$CE
	.byte	$CF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$BB
	.byte	$CF
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$8D
	.byte	$B6
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$A7
	.byte	$9C
	.byte	$A7
	.byte	$B6
	.byte	$BE
	.byte	$E7
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$99
	.byte	$DE
	.byte	$D8
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$8D
	.byte	$B6
	.byte	$DE
	.byte	$D8
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$DE
	.byte	$DB
	.byte	$D7
	.byte	$8D
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DD
	.byte	$D8
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$9C
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$8D
	.byte	$D9
	.byte	$DB
	.byte	$BF
	.byte	$B6
	.byte	$A7
	.byte	$9C
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$9E
	.byte	$B6
	.byte	$B6
	.byte	$9D
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$DA
	.byte	$BF
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B4
	.byte	$D9
	.byte	$DF
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$8E
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$9F
	.byte	$B6
	.byte	$B6
	.byte	$8F
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$B6
	.byte	$D2
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$D1
	.byte	$B6
	.byte	$B6
	.byte	$BA
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$AB
	.byte	$A7
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$A7
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A8
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A9
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$A9
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$99
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B9
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$EB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$DA
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$FB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$F8
	.byte	$F9
	.byte	$A7
	.byte	$B6
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$B6
	.byte	$D9
	.byte	$DF
	.byte	$A7
	.byte	$DE
	.byte	$D8
	.byte	$B6
	.byte	$B4
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A4
	.byte	$D2
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E2
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$D5
	.byte	$C1
	.byte	$C1
	.byte	$C1
	.byte	$E1
	.byte	$D1
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B8
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$99
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B5
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$53
	.byte	$B6
	.byte	$B6
	.byte	$53
	.byte	$54
	.byte	$41
	.byte	$52
	.byte	$54
	.byte	$B5
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A9
	.byte	$BE
	.byte	$D7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$3B
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$35
	.byte	$B6
	.byte	$42
	.byte	$52
	.byte	$49
	.byte	$41
	.byte	$4E
	.byte	$B6
	.byte	$3C
	.byte	$B6
	.byte	$41
	.byte	$4C
	.byte	$41
	.byte	$4E
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$CE
	.byte	$CF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$DE
	.byte	$DF
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$A7
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$BE
	.byte	$BF
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$B8
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B9
	.byte	$BF
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$AB
	.byte	$CE
	.byte	$CF
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$B6
	.byte	$B6
	.byte	$A7
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_COMBS_FLOWER_X:
	.byte	$10
	.byte	$E2
	.byte	$10
	.byte	$E2
_COMBS_FLOWER_Y:
	.byte	$20
	.byte	$20
	.byte	$D0
	.byte	$D0
_VINES_FLOWER_X:
	.byte	$10
	.byte	$E0
	.byte	$10
	.byte	$E0
_VINES_FLOWER_Y:
	.byte	$20
	.byte	$20
	.byte	$D0
	.byte	$D0
_OUTDOORS_FLOWER_X:
	.byte	$20
	.byte	$D0
	.byte	$10
	.byte	$E0
_OUTDOORS_FLOWER_Y:
	.byte	$70
	.byte	$70
	.byte	$D0
	.byte	$D0
_palette_combsnplants_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$35
	.byte	$26
	.byte	$07
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$21
	.byte	$16
	.byte	$30
_palette_outdoors_bg:
	.byte	$0F
	.byte	$30
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$35
	.byte	$26
	.byte	$07
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$21
	.byte	$11
_palette_vineswoflowers_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$1A
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$30
	.byte	$15
	.byte	$00
_palette_sp:
	.byte	$0F
	.byte	$17
	.byte	$26
	.byte	$38
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$38
	.byte	$0F
	.byte	$17
	.byte	$20
	.byte	$26
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$38
_brian_pallete_sp:
	.byte	$0F
	.byte	$38
	.byte	$30
	.byte	$15
	.byte	$0F
	.byte	$2C
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$2B
	.byte	$30
	.byte	$38
	.byte	$0F
	.byte	$16
	.byte	$28
	.byte	$1A
_palette_title_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$07
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$21
	.byte	$11
_palette_options_bg:
	.byte	$0F
	.byte	$30
	.byte	$27
	.byte	$07
	.byte	$0F
	.byte	$24
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$30
	.byte	$2A
	.byte	$1B
	.byte	$0F
	.byte	$27
	.byte	$2A
	.byte	$1B
_metatiles1:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_pellet_tiles:
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$A5
_blank_tiles:
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$00
	.byte	$69
	.byte	$6A
	.byte	$6B
L2539:
	.byte	$54,$45,$41,$4D,$20,$31,$20,$57,$49,$4E,$53,$20,$54,$48,$45,$20
	.byte	$4D,$41,$54,$43,$48,$21,$00
L2546:
	.byte	$54,$45,$41,$4D,$20,$32,$20,$57,$49,$4E,$53,$20,$54,$48,$45,$20
	.byte	$4D,$41,$54,$43,$48,$21,$00
L24FE:
	.byte	$46,$52,$49,$45,$4E,$44,$4C,$59,$20,$42,$45,$45,$20,$45,$41,$54
	.byte	$45,$4E,$00
L24F1:
	.byte	$43,$4F,$4C,$4C,$45,$43,$54,$45,$44,$20,$31,$30,$30,$20,$44,$4F
	.byte	$54,$53,$00
L2518:
	.byte	$42,$49,$47,$42,$45,$45,$20,$41,$54,$45,$20,$44,$55,$43,$4B,$21
	.byte	$00
L250B:
	.byte	$45,$4E,$45,$4D,$59,$20,$42,$45,$45,$20,$45,$41,$54,$45,$4E,$00
L24D8:
	.byte	$54,$45,$41,$4D,$20,$31,$20,$57,$49,$4E,$53,$21,$00
L24E5:
	.byte	$54,$45,$41,$4D,$20,$32,$20,$57,$49,$4E,$53,$21,$00
L2550:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00
L2476:
	.byte	$56,$49,$4E,$45,$53,$20,$20,$20,$00
L2469:
	.byte	$43,$4F,$4D,$42,$53,$20,$20,$20,$00
L245C:
	.byte	$4F,$55,$54,$44,$4F,$4F,$52,$53,$00
L244F:
	.byte	$52,$41,$4E,$44,$4F,$4D,$20,$20,$00
L2523:
	.byte	$54,$49,$4D,$45,$20,$55,$50,$21,$00
L2439:
	.byte	$46,$41,$53,$54,$20,$20,$20,$00
L242E:
	.byte	$52,$45,$47,$55,$4C,$41,$52,$00
L2420:
	.byte	$53,$4C,$4F,$57,$20,$20,$20,$00
L2413:
	.byte	$53,$50,$45,$45,$44,$3A,$00
L2480:
	.byte	$4D,$55,$53,$49,$43,$3A,$00
L2499:
	.byte	$4C,$41,$4B,$45,$20,$00
L24A6:
	.byte	$48,$4F,$4E,$45,$59,$00
L248C:
	.byte	$42,$45,$45,$20,$00
L2443:
	.byte	$4D,$41,$50,$3A,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_doublepad:
	.res	2,$00
_generic_pad:
	.res	1,$00
_turbo_p1:
	.res	1,$00
_turbo_p2:
	.res	1,$00
_turbo_p3:
	.res	1,$00
_turbo_p4:
	.res	1,$00
_prev_pad1:
	.res	1,$00
_prev_pad2:
	.res	1,$00
_prev_pad3:
	.res	1,$00
_prev_pad4:
	.res	1,$00
_pad1:
	.res	1,$00
_pad2:
	.res	1,$00
_pad3:
	.res	1,$00
_pad4:
	.res	1,$00
_game_mode:
	.res	1,$00
_winner:
	.res	1,$00
_game_frame_timer:
	.res	1,$00
_game_timer:
	.res	1,$00
_speed_option:
	.res	2,$00
_current_speed:
	.res	2,$00
_force_redraw:
	.res	1,$00
_use_turbo:
	.res	1,$00
_turbo_amount:
	.res	1,$00
_ducks_go_faster_over_time:
	.res	1,$00
_map_positions:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_tempint:
	.res	2,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_hero_velocity_x:
	.res	2,$00
_hero_velocity_y:
	.res	2,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp_x2:
	.res	1,$00
_temp_y2:
	.res	1,$00
_largeindex:
	.res	2,$00
_song:
	.res	1,$00
_current_settings_choice:
	.res	1,$00
_settings_map:
	.res	1,$00
_settings_speed:
	.res	1,$00
_settings_song:
	.res	1,$00
_map_ptr:
	.res	2,$00
_bit_index:
	.res	1,$00
_bit_offset:
	.res	1,$00
_frame_counter:
	.res	1,$00
_ai_counter:
	.res	1,$00
_current_player:
	.res	1,$00
_team1_score:
	.res	1,$00
_team2_score:
	.res	1,$00
_team1_wins:
	.res	1,$00
_team2_wins:
	.res	1,$00
_win_reason:
	.res	1,$00
_powerup1:
	.res	1,$00
_powerup2:
	.res	1,$00
_powerup3:
	.res	1,$00
_powerup4:
	.res	1,$00
_bee1_bigbee_timer:
	.res	1,$00
_bee3_bigbee_timer:
	.res	1,$00
_sprite_rotation:
	.res	1,$00
_anim_frame_1:
	.res	1,$00
_anim_frame_2:
	.res	1,$00
_anim_frame_3:
	.res	1,$00
_anim_frame_4:
	.res	1,$00
.segment	"BSS"
_consumed_dots:
	.res	128,$00
_start_hold_timer:
	.res	1,$00
_start_held:
	.res	1,$00
_Generic:
	.res	4,$00
_quack2:
	.res	6,$00
_quack4:
	.res	6,$00
_quack2_cooldown:
	.res	1,$00
_quack4_cooldown:
	.res	1,$00
_stun_p1:
	.res	1,$00
_stun_p2:
	.res	1,$00
_stun_p3:
	.res	1,$00
_stun_p4:
	.res	1,$00
_GenericBoxGuy:
	.res	6,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	lda     #$00
	sta     _largeindex
	sta     _largeindex+1
L19CF:	ldx     _largeindex+1
	cpx     #$04
	bcs     L19D0
;
; if(game_mode == MODE_TITLE){
;
	lda     _game_mode
	bne     L25E5
;
; vram_put(title[largeindex]);
;
	lda     #<(_title)
	sta     ptr1
	lda     #>(_title)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
;
; } else if (game_mode == MODE_OPTIONS){
;
	jmp     L25E6
L25E5:	lda     _game_mode
	cmp     #$01
	bne     L19DE
;
; vram_put(settings[largeindex]);
;
	lda     #<(_settings)
	sta     ptr1
	lda     #>(_settings)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
;
; } else{
;
	jmp     L25E6
;
; vram_put(map_ptr[largeindex]);
;
L19DE:	lda     _map_ptr
	clc
	adc     _largeindex
	sta     ptr1
	lda     _map_ptr+1
	adc     _largeindex+1
	sta     ptr1+1
	ldy     #$00
L25E6:	lda     (ptr1),y
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (largeindex = 0; largeindex < 1024; ++largeindex)
;
	inc     _largeindex
	bne     L19CF
	inc     _largeindex+1
	jmp     L19CF
;
; ppu_on_all();
;
L19D0:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; if(powerup1 == 1)
;
	lda     _powerup1
	cmp     #$01
	bne     L25EF
;
; if(map == MAP_COMBS){
;
	lda     _map
	bne     L25ED
;
; oam_meta_spr(COMBS_FLOWER_X[0], COMBS_FLOWER_Y[0], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _COMBS_FLOWER_X
	ldy     #$01
	sta     (sp),y
	lda     _COMBS_FLOWER_Y
;
; } else if(map== MAP_VINES){
;
	jmp     L260B
L25ED:	lda     _map
	cmp     #$02
	bne     L25EE
;
; oam_meta_spr(VINES_FLOWER_X[0], VINES_FLOWER_Y[0], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _VINES_FLOWER_X
	ldy     #$01
	sta     (sp),y
	lda     _VINES_FLOWER_Y
;
; } else if(map == MAP_OUTDOORS){
;
	jmp     L260B
L25EE:	lda     _map
	cmp     #$01
	bne     L25EF
;
; oam_meta_spr(OUTDOORS_FLOWER_X[0], OUTDOORS_FLOWER_Y[0], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _OUTDOORS_FLOWER_X
	ldy     #$01
	sta     (sp),y
	lda     _OUTDOORS_FLOWER_Y
L260B:	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup2 == 1)
;
L25EF:	lda     _powerup2
	cmp     #$01
	bne     L25F2
;
; if(map == MAP_COMBS){
;
	lda     _map
	bne     L25F0
;
; oam_meta_spr(COMBS_FLOWER_X[1], COMBS_FLOWER_Y[1], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _COMBS_FLOWER_X+1
	ldy     #$01
	sta     (sp),y
	lda     _COMBS_FLOWER_Y+1
;
; } else if(map== MAP_VINES){
;
	jmp     L260C
L25F0:	lda     _map
	cmp     #$02
	bne     L25F1
;
; oam_meta_spr(VINES_FLOWER_X[1], VINES_FLOWER_Y[1], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _VINES_FLOWER_X+1
	ldy     #$01
	sta     (sp),y
	lda     _VINES_FLOWER_Y+1
;
; } else if(map == MAP_OUTDOORS){
;
	jmp     L260C
L25F1:	lda     _map
	cmp     #$01
	bne     L25F2
;
; oam_meta_spr(OUTDOORS_FLOWER_X[1], OUTDOORS_FLOWER_Y[1], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _OUTDOORS_FLOWER_X+1
	ldy     #$01
	sta     (sp),y
	lda     _OUTDOORS_FLOWER_Y+1
L260C:	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup3 == 1)
;
L25F2:	lda     _powerup3
	cmp     #$01
	bne     L25F5
;
; if(map == MAP_COMBS){
;
	lda     _map
	bne     L25F3
;
; oam_meta_spr(COMBS_FLOWER_X[2], COMBS_FLOWER_Y[2], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _COMBS_FLOWER_X+2
	ldy     #$01
	sta     (sp),y
	lda     _COMBS_FLOWER_Y+2
;
; } else if(map== MAP_VINES){
;
	jmp     L260D
L25F3:	lda     _map
	cmp     #$02
	bne     L25F4
;
; oam_meta_spr(VINES_FLOWER_X[2], VINES_FLOWER_Y[2], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _VINES_FLOWER_X+2
	ldy     #$01
	sta     (sp),y
	lda     _VINES_FLOWER_Y+2
;
; } else if(map == MAP_OUTDOORS){
;
	jmp     L260D
L25F4:	lda     _map
	cmp     #$01
	bne     L25F5
;
; oam_meta_spr(OUTDOORS_FLOWER_X[2], OUTDOORS_FLOWER_Y[2], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _OUTDOORS_FLOWER_X+2
	ldy     #$01
	sta     (sp),y
	lda     _OUTDOORS_FLOWER_Y+2
L260D:	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(powerup4 == 1)
;
L25F5:	lda     _powerup4
	cmp     #$01
	bne     L1A53
;
; if(map == MAP_COMBS){
;
	lda     _map
	bne     L25F6
;
; oam_meta_spr(COMBS_FLOWER_X[3], COMBS_FLOWER_Y[3], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _COMBS_FLOWER_X+3
	ldy     #$01
	sta     (sp),y
	lda     _COMBS_FLOWER_Y+3
;
; } else if(map== MAP_VINES){
;
	jmp     L260E
L25F6:	lda     _map
	cmp     #$02
	bne     L25F7
;
; oam_meta_spr(VINES_FLOWER_X[3], VINES_FLOWER_Y[3], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _VINES_FLOWER_X+3
	ldy     #$01
	sta     (sp),y
	lda     _VINES_FLOWER_Y+3
;
; } else if(map == MAP_OUTDOORS){
;
	jmp     L260E
L25F7:	lda     _map
	cmp     #$01
	bne     L1A53
;
; oam_meta_spr(OUTDOORS_FLOWER_X[3], OUTDOORS_FLOWER_Y[3], gamesprites_powerup_data);
;
	jsr     decsp2
	lda     _OUTDOORS_FLOWER_X+3
	ldy     #$01
	sta     (sp),y
	lda     _OUTDOORS_FLOWER_Y+3
L260E:	dey
	sta     (sp),y
	lda     #<(_gamesprites_powerup_data)
	ldx     #>(_gamesprites_powerup_data)
	jsr     _oam_meta_spr
;
; if(quack2.moving){
;
L1A53:	lda     _quack2+5
	jeq     L1A76
;
; temp_x = quack2.x >> 8;
;
	lda     _quack2+1
	sta     _temp_x
;
; temp_y = quack2.y >> 8;
;
	lda     _quack2+3
	sta     _temp_y
;
; if(quack2.direction == DIR_LEFT){
;
	lda     _quack2+4
	cmp     #$02
	bne     L25F8
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackleft_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackleft_data)
	ldx     #>(_gamesprites_quackleft_data)
;
; } else if(quack2.direction == DIR_RIGHT){
;
	jmp     L25EB
L25F8:	lda     _quack2+4
	cmp     #$03
	bne     L25F9
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackright_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackright_data)
	ldx     #>(_gamesprites_quackright_data)
;
; } else if(quack2.direction == DIR_DOWN){
;
	jmp     L25EB
L25F9:	lda     _quack2+4
	cmp     #$01
	bne     L25FA
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackdown_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackdown_data)
	ldx     #>(_gamesprites_quackdown_data)
;
; } else if(quack2.direction == DIR_UP){
;
	jmp     L25EB
L25FA:	lda     _quack2+4
	bne     L1A76
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackup_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackup_data)
	ldx     #>(_gamesprites_quackup_data)
L25EB:	jsr     _oam_meta_spr
;
; if(quack4.moving){
;
L1A76:	lda     _quack4+5
	jeq     L25FE
;
; temp_x = quack4.x >> 8;
;
	lda     _quack4+1
	sta     _temp_x
;
; temp_y = quack4.y >> 8;
;
	lda     _quack4+3
	sta     _temp_y
;
; if(quack4.direction == DIR_LEFT){
;
	lda     _quack4+4
	cmp     #$02
	bne     L25FB
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackleft_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackleft_data)
	ldx     #>(_gamesprites_quackleft_data)
;
; } else if(quack4.direction == DIR_RIGHT){
;
	jmp     L25EC
L25FB:	lda     _quack4+4
	cmp     #$03
	bne     L25FC
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackright_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackright_data)
	ldx     #>(_gamesprites_quackright_data)
;
; } else if(quack4.direction == DIR_DOWN){
;
	jmp     L25EC
L25FC:	lda     _quack4+4
	cmp     #$01
	bne     L25FD
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackdown_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackdown_data)
	ldx     #>(_gamesprites_quackdown_data)
;
; } else if(quack4.direction == DIR_UP){
;
	jmp     L25EC
L25FD:	lda     _quack4+4
	bne     L25FE
;
; oam_meta_spr(temp_x, temp_y, gamesprites_quackup_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_quackup_data)
	ldx     #>(_gamesprites_quackup_data)
L25EC:	jsr     _oam_meta_spr
;
; switch(sprite_rotation & 0x03) { // Use only bottom 2 bits for 4 different orders
;
L25FE:	lda     _sprite_rotation
	and     #$03
;
; }
;
	beq     L1AA1
	cmp     #$01
	beq     L1AA7
	cmp     #$02
	beq     L1AAD
	cmp     #$03
	beq     L1AB3
	rts
;
; draw_player_1();
;
L1AA1:	jsr     _draw_player_1
;
; draw_player_2();
;
	jsr     _draw_player_2
;
; draw_player_3();
;
	jsr     _draw_player_3
;
; draw_player_4();
;
	jmp     _draw_player_4
;
; draw_player_2();
;
L1AA7:	jsr     _draw_player_2
;
; draw_player_1();
;
	jsr     _draw_player_1
;
; draw_player_4();
;
	jsr     _draw_player_4
;
; draw_player_3();
;
	jmp     _draw_player_3
;
; draw_player_3();
;
L1AAD:	jsr     _draw_player_3
;
; draw_player_4();
;
	jsr     _draw_player_4
;
; draw_player_1();
;
	jsr     _draw_player_1
;
; draw_player_2();
;
	jmp     _draw_player_2
;
; draw_player_4();
;
L1AB3:	jsr     _draw_player_4
;
; draw_player_3();
;
	jsr     _draw_player_3
;
; draw_player_2();
;
	jsr     _draw_player_2
;
; draw_player_1();
;
	jmp     _draw_player_1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_1 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_1: near

.segment	"CODE"

;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if(stun_p1 > 0 && frame_counter %2 == 0){
;
	lda     _stun_p1
	beq     L2613
	lda     _frame_counter
	and     #$01
	bne     L2613
;
; return; //flash when stunned
;
	rts
;
; if ((frame_counter % 10) == 0) {
;
L2613:	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L1AC8
	cmp     #$00
	bne     L1AC8
;
; anim_frame_1 = (anim_frame_1 + 1) % 3;
;
	lda     _anim_frame_1
	clc
	adc     #$01
	bcc     L1ACF
	inx
L1ACF:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_1
;
; if (bee1_bigbee_timer > 0) {
;
L1AC8:	lda     _bee1_bigbee_timer
	jeq     L2617
;
; if(bee1_bigbee_timer < 5){
;
	cmp     #$05
	bcs     L2614
;
; if ((frame_counter % 4) < 2) {
;
	lda     _frame_counter
	and     #$03
	cmp     #$02
;
; return; // Skip drawing this frame
;
	bcs     L2614
;
; }
;
	rts
;
; if (BoxGuy1.direction == DIR_LEFT) {
;
L2614:	lda     _BoxGuy1+4
	cmp     #$02
	bne     L2615
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L1ADE
	cmp     #$01
	beq     L1AE4
	cmp     #$02
	beq     L1AEA
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft0_data); break;
;
L1ADE:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft0_data)
	ldx     #>(_gamesprites_bigbeeleft0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft1_data); break;
;
L1AE4:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft1_data)
	ldx     #>(_gamesprites_bigbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft2_data); break;
;
L1AEA:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft2_data)
	ldx     #>(_gamesprites_bigbeeleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy1.direction == DIR_RIGHT) {
;
L2615:	lda     _BoxGuy1+4
	cmp     #$03
	bne     L2616
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L1AF6
	cmp     #$01
	beq     L1AFC
	cmp     #$02
	beq     L1B02
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright0_data); break;
;
L1AF6:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright0_data)
	ldx     #>(_gamesprites_bigbeeright0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright1_data); break;
;
L1AFC:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright1_data)
	ldx     #>(_gamesprites_bigbeeright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeright2_data); break;
;
L1B02:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeright2_data)
	ldx     #>(_gamesprites_bigbeeright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_1) {
;
L2616:	lda     _anim_frame_1
;
; }
;
	beq     L1B0C
	cmp     #$01
	beq     L1B12
	cmp     #$02
	beq     L1B18
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft0_data); break;
;
L1B0C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft0_data)
	ldx     #>(_gamesprites_bigbeeleft0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft1_data); break;
;
L1B12:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft1_data)
	ldx     #>(_gamesprites_bigbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbeeleft2_data); break;
;
L1B18:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbeeleft2_data)
	ldx     #>(_gamesprites_bigbeeleft2_data)
	jmp     _oam_meta_spr
;
; if (BoxGuy1.direction == DIR_LEFT) {
;
L2617:	lda     _BoxGuy1+4
	cmp     #$02
	bne     L2618
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L1B24
	cmp     #$01
	beq     L1B2A
	cmp     #$02
	beq     L1B30
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee1left0_data); break;
;
L1B24:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee1left0_data)
	ldx     #>(_gamesprites_smallbee1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft1_data); break;
;
L1B2A:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft1_data)
	ldx     #>(_gamesprites_smallbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft2_data); break;
;
L1B30:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft2_data)
	ldx     #>(_gamesprites_smallbeeleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy1.direction == DIR_RIGHT) {
;
L2618:	lda     _BoxGuy1+4
	cmp     #$03
	bne     L2619
;
; switch(anim_frame_1) {
;
	lda     _anim_frame_1
;
; }
;
	beq     L1B3C
	cmp     #$01
	beq     L1B42
	cmp     #$02
	beq     L1B48
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright0_data); break;
;
L1B3C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright0_data)
	ldx     #>(_gamesprites_smallbeeright0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright1_data); break;
;
L1B42:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright1_data)
	ldx     #>(_gamesprites_smallbeeright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright2_data); break;
;
L1B48:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright2_data)
	ldx     #>(_gamesprites_smallbeeright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_1) {
;
L2619:	lda     _anim_frame_1
;
; }
;
	beq     L1B52
	cmp     #$01
	beq     L1B58
	cmp     #$02
	beq     L1B5E
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee1left0_data); break;
;
L1B52:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee1left0_data)
	ldx     #>(_gamesprites_smallbee1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft1_data); break;
;
L1B58:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft1_data)
	ldx     #>(_gamesprites_smallbeeleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeleft2_data); break;
;
L1B5E:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeleft2_data)
	ldx     #>(_gamesprites_smallbeeleft2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_2: near

.segment	"CODE"

;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if(stun_p2 > 0 && frame_counter %2 == 0){
;
	lda     _stun_p2
	beq     L261E
	lda     _frame_counter
	and     #$01
	bne     L261E
;
; return; //flash when stunned
;
	rts
;
; if ((frame_counter % 10) == 0 && BoxGuy2.moving) {
;
L261E:	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L261F
	cmp     #$00
	bne     L261F
	lda     _BoxGuy2+5
	beq     L261F
;
; anim_frame_2 = (anim_frame_2 + 1) % 3;
;
	lda     _anim_frame_2
	clc
	adc     #$01
	bcc     L1B7C
	inx
L1B7C:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_2
;
; if (BoxGuy2.direction == DIR_LEFT) {
;
L261F:	lda     _BoxGuy2+4
	cmp     #$02
	bne     L2620
;
; switch(anim_frame_2) { 
;
	lda     _anim_frame_2
;
; }
;
	beq     L1B83
	cmp     #$01
	beq     L1B89
	cmp     #$02
	beq     L1B8F
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1left0_data); break;
;
L1B83:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1left0_data)
	ldx     #>(_gamesprites_smallduck1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft1_data); break;
;
L1B89:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft1_data)
	ldx     #>(_gamesprites_smallduckleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft2_data); break;
;
L1B8F:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft2_data)
	ldx     #>(_gamesprites_smallduckleft2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy2.direction == DIR_RIGHT) {
;
L2620:	lda     _BoxGuy2+4
	cmp     #$03
	bne     L2621
;
; switch(anim_frame_2) {
;
	lda     _anim_frame_2
;
; }
;
	beq     L1B9B
	cmp     #$01
	beq     L1BA1
	cmp     #$02
	beq     L1BA7
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1right0_data); break;
;
L1B9B:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1right0_data)
	ldx     #>(_gamesprites_smallduck1right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckright1_data); break;
;
L1BA1:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckright1_data)
	ldx     #>(_gamesprites_smallduckright1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckright2_data); break;
;
L1BA7:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckright2_data)
	ldx     #>(_gamesprites_smallduckright2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_2) {
;
L2621:	lda     _anim_frame_2
;
; }
;
	beq     L1BB1
	cmp     #$01
	beq     L1BB7
	cmp     #$02
	beq     L1BBD
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck1left0_data); break;
;
L1BB1:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck1left0_data)
	ldx     #>(_gamesprites_smallduck1left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft1_data); break;
;
L1BB7:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft1_data)
	ldx     #>(_gamesprites_smallduckleft1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduckleft2_data); break;
;
L1BBD:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduckleft2_data)
	ldx     #>(_gamesprites_smallduckleft2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_3 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_3: near

.segment	"CODE"

;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if(stun_p3 > 0 && frame_counter %2 == 0){
;
	lda     _stun_p3
	beq     L2626
	lda     _frame_counter
	and     #$01
	bne     L2626
;
; return; //flash when stunned
;
	rts
;
; if ((frame_counter % 10) == 0) {
;
L2626:	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L1BD2
	cmp     #$00
	bne     L1BD2
;
; anim_frame_3 = (anim_frame_3 + 1) % 3;
;
	lda     _anim_frame_3
	clc
	adc     #$01
	bcc     L1BD9
	inx
L1BD9:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_3
;
; if (bee3_bigbee_timer > 0) {
;
L1BD2:	lda     _bee3_bigbee_timer
	jeq     L262A
;
; if(bee3_bigbee_timer < 5){
;
	cmp     #$05
	bcs     L2627
;
; if ((frame_counter % 4) < 2) {
;
	lda     _frame_counter
	and     #$03
	cmp     #$02
;
; return; // Skip drawing this frame
;
	bcs     L2627
;
; }
;
	rts
;
; if (BoxGuy3.direction == DIR_LEFT) {
;
L2627:	lda     _BoxGuy3+4
	cmp     #$02
	bne     L2628
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L1BE8
	cmp     #$01
	beq     L1BEE
	cmp     #$02
	beq     L1BF4
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left0_data); break;
;
L1BE8:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left0_data)
	ldx     #>(_gamesprites_bigbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left1_data); break;
;
L1BEE:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left1_data)
	ldx     #>(_gamesprites_bigbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left2_data); break;
;
L1BF4:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left2_data)
	ldx     #>(_gamesprites_bigbee2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy3.direction == DIR_RIGHT) {
;
L2628:	lda     _BoxGuy3+4
	cmp     #$03
	bne     L2629
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L1C00
	cmp     #$01
	beq     L1C06
	cmp     #$02
	beq     L1C0C
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right0_data); break;
;
L1C00:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right0_data)
	ldx     #>(_gamesprites_bigbee2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right1_data); break;
;
L1C06:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right1_data)
	ldx     #>(_gamesprites_bigbee2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2right2_data); break;
;
L1C0C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2right2_data)
	ldx     #>(_gamesprites_bigbee2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_3) {
;
L2629:	lda     _anim_frame_3
;
; }
;
	beq     L1C16
	cmp     #$01
	beq     L1C1C
	cmp     #$02
	beq     L1C22
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left0_data); break;
;
L1C16:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left0_data)
	ldx     #>(_gamesprites_bigbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left1_data); break;
;
L1C1C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left1_data)
	ldx     #>(_gamesprites_bigbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_bigbee2left2_data); break;
;
L1C22:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_bigbee2left2_data)
	ldx     #>(_gamesprites_bigbee2left2_data)
	jmp     _oam_meta_spr
;
; if (BoxGuy3.direction == DIR_LEFT) {
;
L262A:	lda     _BoxGuy3+4
	cmp     #$02
	bne     L262B
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L1C2E
	cmp     #$01
	beq     L1C34
	cmp     #$02
	beq     L1C3A
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left0_data); break;
;
L1C2E:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left0_data)
	ldx     #>(_gamesprites_smallbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left1_data); break;
;
L1C34:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left1_data)
	ldx     #>(_gamesprites_smallbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left2_data); break;
;
L1C3A:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left2_data)
	ldx     #>(_gamesprites_smallbee2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy3.direction == DIR_RIGHT) {
;
L262B:	lda     _BoxGuy3+4
	cmp     #$03
	bne     L262C
;
; switch(anim_frame_3) {
;
	lda     _anim_frame_3
;
; }
;
	beq     L1C46
	cmp     #$01
	beq     L1C4C
	cmp     #$02
	beq     L1C52
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right0_data); break;
;
L1C46:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right0_data)
	ldx     #>(_gamesprites_smallbee2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right1_data); break;
;
L1C4C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right1_data)
	ldx     #>(_gamesprites_smallbee2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2right2_data); break;
;
L1C52:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2right2_data)
	ldx     #>(_gamesprites_smallbee2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_3) {
;
L262C:	lda     _anim_frame_3
;
; }
;
	beq     L1C5C
	cmp     #$01
	beq     L1C62
	cmp     #$02
	beq     L1C68
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left0_data); break;
;
L1C5C:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left0_data)
	ldx     #>(_gamesprites_smallbee2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left1_data); break;
;
L1C62:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left1_data)
	ldx     #>(_gamesprites_smallbee2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbee2left2_data); break;
;
L1C68:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbee2left2_data)
	ldx     #>(_gamesprites_smallbee2left2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_4 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_4: near

.segment	"CODE"

;
; temp_x = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if(stun_p4 > 0 && frame_counter %2 == 0){
;
	lda     _stun_p4
	beq     L2631
	lda     _frame_counter
	and     #$01
	bne     L2631
;
; return; //flash when stunned
;
	rts
;
; if ((frame_counter % 10) == 0 && BoxGuy4.moving) {
;
L2631:	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L2632
	cmp     #$00
	bne     L2632
	lda     _BoxGuy4+5
	beq     L2632
;
; anim_frame_4 = (anim_frame_4 + 1) % 3;
;
	lda     _anim_frame_4
	clc
	adc     #$01
	bcc     L1C86
	inx
L1C86:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_4
;
; if (BoxGuy4.direction == DIR_LEFT) {
;
L2632:	lda     _BoxGuy4+4
	cmp     #$02
	bne     L2633
;
; switch(anim_frame_4) {
;
	lda     _anim_frame_4
;
; }
;
	beq     L1C8D
	cmp     #$01
	beq     L1C93
	cmp     #$02
	beq     L1C99
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left0_data); break;
;
L1C8D:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left0_data)
	ldx     #>(_gamesprites_smallduck2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left1_data); break;
;
L1C93:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left1_data)
	ldx     #>(_gamesprites_smallduck2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left2_data); break;
;
L1C99:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left2_data)
	ldx     #>(_gamesprites_smallduck2left2_data)
	jmp     _oam_meta_spr
;
; } else if (BoxGuy4.direction == DIR_RIGHT) {
;
L2633:	lda     _BoxGuy4+4
	cmp     #$03
	bne     L2634
;
; switch(anim_frame_4) {
;
	lda     _anim_frame_4
;
; }
;
	beq     L1CA5
	cmp     #$01
	beq     L1CAB
	cmp     #$02
	beq     L1CB1
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right0_data); break;
;
L1CA5:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right0_data)
	ldx     #>(_gamesprites_smallduck2right0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right1_data); break;
;
L1CAB:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right1_data)
	ldx     #>(_gamesprites_smallduck2right1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2right2_data); break;
;
L1CB1:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2right2_data)
	ldx     #>(_gamesprites_smallduck2right2_data)
	jmp     _oam_meta_spr
;
; switch(anim_frame_4) {
;
L2634:	lda     _anim_frame_4
;
; }
;
	beq     L1CBB
	cmp     #$01
	beq     L1CC1
	cmp     #$02
	beq     L1CC7
	rts
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left0_data); break;
;
L1CBB:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left0_data)
	ldx     #>(_gamesprites_smallduck2left0_data)
	jmp     _oam_meta_spr
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left1_data); break;
;
L1CC1:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left1_data)
	ldx     #>(_gamesprites_smallduck2left1_data)
	jmp     _oam_meta_spr
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallduck2left2_data); break;
;
L1CC7:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallduck2left2_data)
	ldx     #>(_gamesprites_smallduck2left2_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if ((current_player == 1 && stun_p1 > 0) ||
;
	lda     _current_player
	cmp     #$01
	bne     L2647
	lda     _stun_p1
	bne     L2653
;
; (current_player == 2 && stun_p2 > 0) ||
;
L2647:	lda     _current_player
	cmp     #$02
	bne     L264A
	lda     _stun_p2
	bne     L2653
;
; (current_player == 3 && stun_p3 > 0) ||
;
L264A:	lda     _current_player
	cmp     #$03
	bne     L264D
	lda     _stun_p3
	bne     L2653
;
; (current_player == 4 && stun_p4 > 0)) {
;
L264D:	lda     _current_player
	cmp     #$04
	bne     L1EB1
	lda     _stun_p4
	beq     L1EB1
;
; return;
;
L2653:	rts
;
; old_x = GenericBoxGuy.x;
;
L1EB1:	lda     _GenericBoxGuy+1
	sta     _old_x+1
	lda     _GenericBoxGuy
	sta     _old_x
;
; if (generic_pad & PAD_B) { 
;
	lda     _generic_pad
	and     #$40
	jeq     L2660
;
; if (current_player == 2 && quack2.moving == 0 && quack2_cooldown == 0) { 
;
	lda     _current_player
	cmp     #$02
	jne     L265A
	lda     _quack2+5
	jne     L265A
	lda     _quack2_cooldown
	jne     L265A
;
; quack2.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _quack2+1
	lda     _GenericBoxGuy
	sta     _quack2
;
; quack2.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _quack2+2+1
	lda     _GenericBoxGuy+2
	sta     _quack2+2
;
; quack2.direction = GenericBoxGuy.direction;
;
	lda     _GenericBoxGuy+4
	sta     _quack2+4
;
; quack2_cooldown = QUACK_COOLDOWN;
;
	lda     #$0A
	sta     _quack2_cooldown
;
; if(quack2.direction == DIR_LEFT){
;
	lda     _quack2+4
	cmp     #$02
	bne     L2656
;
; quack2.x -= 0x0800; //move it 1 block to the left;
;
	lda     _quack2
	sec
	sbc     #$00
	sta     _quack2
	lda     _quack2+1
	sbc     #$08
	sta     _quack2+1
;
; } else if (quack2.direction == DIR_RIGHT){
;
	jmp     L2659
L2656:	lda     _quack2+4
	cmp     #$03
	bne     L2657
;
; quack2.x += 0x0800; 
;
	lda     #$00
	clc
	adc     _quack2
	sta     _quack2
	lda     #$08
	adc     _quack2+1
	sta     _quack2+1
;
; } else if (quack2.direction == DIR_UP){
;
	jmp     L2659
L2657:	lda     _quack2+4
	bne     L2658
;
; quack2.y -= 0x0800; 
;
	lda     _quack2+2
	sec
	sbc     #$00
	sta     _quack2+2
	lda     _quack2+2+1
	sbc     #$08
;
; } else if (quack2.direction == DIR_DOWN){
;
	jmp     L2695
L2658:	lda     _quack2+4
	cmp     #$01
	bne     L2659
;
; quack2.y += 0x0800; 
;
	lda     #$00
	clc
	adc     _quack2+2
	sta     _quack2+2
	lda     #$08
	adc     _quack2+2+1
L2695:	sta     _quack2+2+1
;
; quack2.moving = 1; 
;
L2659:	lda     #$01
	sta     _quack2+5
;
; if (current_player == 4 && quack4.moving == 0 && quack4_cooldown == 0) { 
;
L265A:	lda     _current_player
	cmp     #$04
	jne     L2660
	lda     _quack4+5
	jne     L2660
	lda     _quack4_cooldown
	jne     L2660
;
; quack4.x = GenericBoxGuy.x;
;
	lda     _GenericBoxGuy+1
	sta     _quack4+1
	lda     _GenericBoxGuy
	sta     _quack4
;
; quack4.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _quack4+2+1
	lda     _GenericBoxGuy+2
	sta     _quack4+2
;
; quack4.direction = GenericBoxGuy.direction;
;
	lda     _GenericBoxGuy+4
	sta     _quack4+4
;
; quack4.moving = 1;
;
	lda     #$01
	sta     _quack4+5
;
; quack4_cooldown = QUACK_COOLDOWN;
;
	lda     #$0A
	sta     _quack4_cooldown
;
; if(quack4.direction == DIR_LEFT){
;
	lda     _quack4+4
	cmp     #$02
	bne     L265D
;
; quack4.x -= 0x0800; //move it 1 block to the left;
;
	lda     _quack4
	sec
	sbc     #$00
	sta     _quack4
	lda     _quack4+1
	sbc     #$08
	sta     _quack4+1
;
; } else if (quack4.direction == DIR_RIGHT){
;
	jmp     L2660
L265D:	lda     _quack4+4
	cmp     #$03
	bne     L265E
;
; quack4.x += 0x0800; 
;
	lda     #$00
	clc
	adc     _quack4
	sta     _quack4
	lda     #$08
	adc     _quack4+1
	sta     _quack4+1
;
; } else if (quack4.direction == DIR_UP){
;
	jmp     L2660
L265E:	lda     _quack4+4
	bne     L265F
;
; quack4.y -= 0x0800; 
;
	lda     _quack4+2
	sec
	sbc     #$00
	sta     _quack4+2
	lda     _quack4+2+1
	sbc     #$08
;
; } else if (quack4.direction == DIR_DOWN){
;
	jmp     L2696
L265F:	lda     _quack4+4
	cmp     #$01
	bne     L2660
;
; quack4.y += 0x0800; 
;
	lda     #$00
	clc
	adc     _quack4+2
	sta     _quack4+2
	lda     #$08
	adc     _quack4+2+1
L2696:	sta     _quack4+2+1
;
; if (generic_pad & PAD_A) {
;
L2660:	lda     _generic_pad
	and     #$80
	beq     L1F1B
;
; if ((current_player == 1 && turbo_p1 > 0 && bee1_bigbee_timer == 0) ||
;
	lda     _current_player
	cmp     #$01
	bne     L2664
	lda     _turbo_p1
	beq     L2664
	lda     _bee1_bigbee_timer
	beq     L269E
;
; (current_player == 2 && turbo_p2 > 0) ||
;
L2664:	lda     _current_player
	cmp     #$02
	bne     L2667
	lda     _turbo_p2
	bne     L269E
;
; (current_player == 3 && turbo_p3 > 0 && bee3_bigbee_timer == 0) ||
;
L2667:	lda     _current_player
	cmp     #$03
	bne     L266B
	lda     _turbo_p3
	beq     L266B
	lda     _bee3_bigbee_timer
	beq     L269E
;
; (current_player == 4 && turbo_p4 > 0)) {
;
L266B:	lda     _current_player
	cmp     #$04
	bne     L1F1B
	lda     _turbo_p4
	beq     L1F1B
L269E:	lda     #$01
;
; use_turbo = 1;
;
	sta     _use_turbo
;
; switch(current_player) {
;
	lda     _current_player
;
; }
;
	cmp     #$01
	beq     L2674
	cmp     #$02
	beq     L2675
	cmp     #$03
	beq     L2676
	cmp     #$04
	beq     L2677
	jmp     L1F1B
;
; case 1: turbo_p1--; break;
;
L2674:	dec     _turbo_p1
	jmp     L1F1B
;
; case 2: turbo_p2--; break;
;
L2675:	dec     _turbo_p2
	jmp     L1F1B
;
; case 3: turbo_p3--; break;
;
L2676:	dec     _turbo_p3
	jmp     L1F1B
;
; case 4: turbo_p4--; break;
;
L2677:	dec     _turbo_p4
;
; if(ducks_go_faster_over_time){
;
L1F1B:	lda     _ducks_go_faster_over_time
	beq     L1F28
;
; if (current_player == 2 || current_player == 4) {
;
	lda     _current_player
	cmp     #$02
	beq     L2678
	cmp     #$04
	bne     L1F28
;
; current_speed = speed_option;
;
L2678:	lda     _speed_option+1
	sta     _current_speed+1
	lda     _speed_option
	sta     _current_speed
;
; if(game_timer > 80) {
;
	lda     _game_timer
	cmp     #$51
	bcc     L2679
;
; current_speed -= DUCK_SPEED_LOW;
;
	lda     _current_speed
	sec
	sbc     #$14
	sta     _current_speed
	bcs     L1F48
	dec     _current_speed+1
;
; } else if (game_timer > 20) {
;
	jmp     L1F48
L2679:	lda     _game_timer
	cmp     #$15
;
; } else if (game_timer > 10) {
;
	bcs     L1F28
	cmp     #$0B
	bcc     L267B
;
; current_speed += DUCK_SPEED_HIGH;
;
	lda     #$14
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L1F48
	inc     _current_speed+1
;
; } else if (game_timer > 0) {
;
	jmp     L1F48
L267B:	lda     _game_timer
	beq     L1F48
;
; current_speed += DUCK_SPEED_MAX;
;
	lda     #$28
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L1F48
	inc     _current_speed+1
;
; } else {
;
	jmp     L1F48
;
; current_speed = speed_option; // feature disabled, all normal speed
;
L1F28:	lda     _speed_option+1
	sta     _current_speed+1
	lda     _speed_option
	sta     _current_speed
;
; if(bee1_bigbee_timer > 0 && current_player == 1){
;
L1F48:	lda     _bee1_bigbee_timer
	beq     L2680
	lda     _current_player
	cmp     #$01
	bne     L2680
;
; current_speed += SPEED_BIGBEE_BOOST; //big bee boost
;
	lda     #$60
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L2680
	inc     _current_speed+1
;
; if(bee3_bigbee_timer > 0 && current_player == 3){
;
L2680:	lda     _bee3_bigbee_timer
	beq     L2684
	lda     _current_player
	cmp     #$03
	bne     L2684
;
; current_speed += SPEED_BIGBEE_BOOST; //big bee boost
;
	lda     #$60
	clc
	adc     _current_speed
	sta     _current_speed
	bcc     L2684
	inc     _current_speed+1
;
; if (generic_pad & PAD_LEFT)
;
L2684:	lda     _generic_pad
	and     #$02
	beq     L2686
;
; hero_velocity_x = -current_speed;
;
	lda     _current_speed
	ldx     _current_speed+1
	jsr     negax
	sta     _hero_velocity_x
	stx     _hero_velocity_x+1
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L2685
;
; hero_velocity_x -= SPEED_TURBO_BOOST; // add turbo boost
;
	lda     _hero_velocity_x
	sec
	sbc     #$60
	sta     _hero_velocity_x
	bcs     L1F61
	dec     _hero_velocity_x+1
;
; use_turbo = 0; // reset turbo flag
;
L1F61:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_LEFT;
;
L2685:	lda     #$02
	sta     _GenericBoxGuy+4
;
; else if (generic_pad & PAD_RIGHT)
;
	jmp     L1F74
L2686:	lda     _generic_pad
	and     #$01
	beq     L2689
;
; hero_velocity_x = current_speed;
;
	lda     _current_speed+1
	sta     _hero_velocity_x+1
	lda     _current_speed
	sta     _hero_velocity_x
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L2687
;
; hero_velocity_x += SPEED_TURBO_BOOST; // add turbo boost
;
	lda     #$60
	clc
	adc     _hero_velocity_x
	sta     _hero_velocity_x
	bcc     L1F6F
	inc     _hero_velocity_x+1
;
; use_turbo = 0; // reset turbo flag
;
L1F6F:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_RIGHT;
;
L2687:	lda     #$03
	sta     _GenericBoxGuy+4
;
; else
;
	jmp     L1F74
;
; hero_velocity_x = 0;
;
L2689:	sta     _hero_velocity_x
	sta     _hero_velocity_x+1
;
; GenericBoxGuy.x += hero_velocity_x;
;
L1F74:	lda     _hero_velocity_x
	clc
	adc     _GenericBoxGuy
	sta     _GenericBoxGuy
	lda     _hero_velocity_x+1
	adc     _GenericBoxGuy+1
	sta     _GenericBoxGuy+1
;
; if (GenericBoxGuy.x > 0xf000)
;
	lda     _GenericBoxGuy
	cmp     #$01
	lda     _GenericBoxGuy+1
	sbc     #$F0
	bcc     L268C
;
; if (old_x >= 0x8000)
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L268B
;
; GenericBoxGuy.x = 0xf000; // max right
;
	ldx     #$F0
;
; GenericBoxGuy.x = 0x0000; // max left
;
L268B:	sta     _GenericBoxGuy
	stx     _GenericBoxGuy+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L268C:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$06
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; if (hero_velocity_x < 0)
;
	ldx     _hero_velocity_x+1
	cpx     #$80
	bcc     L1F8A
;
; if (bg_coll_L())
;
	jsr     _bg_coll_L
;
; else if (hero_velocity_x > 0)
;
	jmp     L26A5
L1F8A:	lda     _hero_velocity_x
	cmp     #$01
	lda     _hero_velocity_x+1
	sbc     #$00
	bvs     L1F93
	eor     #$80
L1F93:	bpl     L1F94
;
; if (bg_coll_R())
;
	jsr     _bg_coll_R
L26A5:	tax
	beq     L1F94
;
; GenericBoxGuy.x = old_x; // revert to old position
;
	lda     _old_x+1
	sta     _GenericBoxGuy+1
	lda     _old_x
	sta     _GenericBoxGuy
;
; old_y = GenericBoxGuy.y;
;
L1F94:	lda     _GenericBoxGuy+2+1
	sta     _old_y+1
	lda     _GenericBoxGuy+2
	sta     _old_y
;
; if (generic_pad & PAD_UP)
;
	lda     _generic_pad
	and     #$08
	beq     L268E
;
; hero_velocity_y = -current_speed;
;
	lda     _current_speed
	ldx     _current_speed+1
	jsr     negax
	sta     _hero_velocity_y
	stx     _hero_velocity_y+1
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L268D
;
; hero_velocity_y -= SPEED_TURBO_BOOST; // add turbo boost
;
	lda     _hero_velocity_y
	sec
	sbc     #$60
	sta     _hero_velocity_y
	bcs     L1FA2
	dec     _hero_velocity_y+1
;
; use_turbo = 0; // reset turbo flag
;
L1FA2:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_UP; //entually we'll set up and down but not now.
;
L268D:	lda     #$00
	sta     _GenericBoxGuy+4
;
; else if (generic_pad & PAD_DOWN)
;
	jmp     L1FB5
L268E:	lda     _generic_pad
	and     #$04
	beq     L2691
;
; hero_velocity_y = current_speed;
;
	lda     _current_speed+1
	sta     _hero_velocity_y+1
	lda     _current_speed
	sta     _hero_velocity_y
;
; if(use_turbo == 1){
;
	lda     _use_turbo
	cmp     #$01
	bne     L268F
;
; hero_velocity_y += SPEED_TURBO_BOOST; // add turbo boost
;
	lda     #$60
	clc
	adc     _hero_velocity_y
	sta     _hero_velocity_y
	bcc     L1FB0
	inc     _hero_velocity_y+1
;
; use_turbo = 0; // reset turbo flag
;
L1FB0:	lda     #$00
	sta     _use_turbo
;
; GenericBoxGuy.direction = DIR_DOWN;
;
L268F:	lda     #$01
	sta     _GenericBoxGuy+4
;
; else
;
	jmp     L1FB5
;
; hero_velocity_y = 0;
;
L2691:	sta     _hero_velocity_y
	sta     _hero_velocity_y+1
;
; GenericBoxGuy.y += hero_velocity_y;
;
L1FB5:	lda     _hero_velocity_y
	clc
	adc     _GenericBoxGuy+2
	sta     _GenericBoxGuy+2
	lda     _hero_velocity_y+1
	adc     _GenericBoxGuy+2+1
	sta     _GenericBoxGuy+2+1
;
; if (GenericBoxGuy.y > 0xe000)
;
	lda     _GenericBoxGuy+2
	cmp     #$01
	lda     _GenericBoxGuy+2+1
	sbc     #$E0
	bcc     L2694
;
; if (old_y >= 0x8000)
;
	lda     _old_y
	cmp     #$00
	lda     _old_y+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L2693
;
; GenericBoxGuy.y = 0xe000; // max down
;
	ldx     #$E0
;
; GenericBoxGuy.y = 0x0000; // max up
;
L2693:	sta     _GenericBoxGuy+2
	stx     _GenericBoxGuy+2+1
;
; Generic.x = GenericBoxGuy.x >> 8; // the collision routine needs an 8 bit value
;
L2694:	lda     _GenericBoxGuy+1
	sta     _Generic
;
; Generic.y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _Generic+1
;
; if (hero_velocity_y < 0)
;
	ldx     _hero_velocity_y+1
	cpx     #$80
	bcc     L1FC7
;
; if (bg_coll_U())
;
	jsr     _bg_coll_U
;
; else if (hero_velocity_y > 0)
;
	jmp     L26A6
L1FC7:	lda     _hero_velocity_y
	cmp     #$01
	lda     _hero_velocity_y+1
	sbc     #$00
	bvs     L1FD0
	eor     #$80
L1FD0:	bpl     L1FD1
;
; if (bg_coll_D())
;
	jsr     _bg_coll_D
L26A6:	tax
	beq     L1FD1
;
; GenericBoxGuy.y = old_y; // revert to old position
;
	lda     _old_y+1
	sta     _GenericBoxGuy+2+1
	lda     _old_y
	sta     _GenericBoxGuy+2
;
; check_tile_and_collect();
;
L1FD1:	jmp     _check_tile_and_collect

.endproc

; ---------------------------------------------------------------
; void __near__ check_tile_and_collect (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_tile_and_collect: near

.segment	"CODE"

;
; if (current_player != 1 && current_player != 3)
;
	ldx     #$00
	lda     _current_player
	cmp     #$01
	beq     L26AC
	cmp     #$03
	beq     L26AC
;
; return; // Chasers cannot collect dots
;
	rts
;
; temp_x = (Generic.x + 4) >> 3; // get this between 0-30
;
L26AC:	lda     _Generic
	clc
	adc     #$04
	bcc     L2061
	inx
L2061:	jsr     shrax3
	sta     _temp_x
;
; temp_y = (Generic.y + 2) >> 3; // get this between 0-32
;
	ldx     #$00
	lda     _Generic+1
	clc
	adc     #$02
	bcc     L2065
	inx
L2065:	jsr     shrax3
	sta     _temp_y
;
; largeindex = (temp_y << 5) + temp_x;
;
	ldx     #$00
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_x
	bcc     L26A7
	inx
L26A7:	sta     _largeindex
	stx     _largeindex+1
;
; temp = map_ptr[largeindex];
;
	lda     _map_ptr
	clc
	adc     _largeindex
	sta     ptr1
	lda     _map_ptr+1
	adc     _largeindex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _temp
;
; for (index = 0; index < sizeof(pellet_tiles); index++)
;
	sty     _index
L26AD:	lda     _index
	cmp     #$06
	bcc     L26AF
;
; }
;
	rts
;
; if (temp == pellet_tiles[index])
;
L26AF:	ldy     _index
	lda     _pellet_tiles,y
	cmp     _temp
	jne     L2075
;
; if (!is_dot_consumed(largeindex))
;
	lda     _largeindex
	ldx     _largeindex+1
	jsr     _is_dot_consumed
	tax
	beq     L26B0
;
; }
;
	rts
;
; mark_dot_consumed(largeindex);
;
L26B0:	lda     _largeindex
	ldx     _largeindex+1
	jsr     _mark_dot_consumed
;
; one_vram_buffer(0x00, NTADR_A(temp_x, temp_y)); //TODO: this is just a blank tile, not as fun as the updated backgrounds
;
	lda     #$00
	jsr     pusha
	tax
	lda     _temp_y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _temp_x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; if (current_player == 1)
;
	lda     _current_player
	cmp     #$01
	bne     L26AE
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; team1_score++;
;
	inc     _team1_score
;
; if (team1_score >= 100)
;
	lda     _team1_score
	cmp     #$64
	bcc     L209D
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_DOTS;
;
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; else if (current_player == 3)
;
L26AE:	lda     _current_player
	cmp     #$03
	bne     L206D
;
; sfx_play(SFX_TEAM2_DOT_COLLECT, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; team2_score++;
;
	inc     _team2_score
;
; if (team2_score >= 100)
;
	lda     _team2_score
	cmp     #$64
	bcc     L206D
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_DOTS;
;
	lda     #$00
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; break;
;
L209D:	rts
;
; else if (temp == blank_tiles[index])
;
L2075:	ldy     _index
	lda     _blank_tiles,y
	cmp     _temp
;
; break;
;
	beq     L206D
;
; for (index = 0; index < sizeof(pellet_tiles); index++)
;
	inc     _index
	jmp     L26AD
;
; }
;
L206D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ debug_extras (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug_extras: near

.segment	"CODE"

;
; temp1 = (team1_score / 10) + 0x30;
;
	lda     _team1_score
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(6, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$26
	jsr     _one_vram_buffer
;
; temp1 = (team1_score % 10) + 0x30;
;
	lda     _team1_score
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(7, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$27
	jsr     _one_vram_buffer
;
; temp1 = (game_timer / 10) + 0x30;
;
	lda     _game_timer
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(15, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$2F
	jsr     _one_vram_buffer
;
; temp1 = (game_timer % 10) + 0x30;
;
	lda     _game_timer
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(16, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$30
	jsr     _one_vram_buffer
;
; temp1 = (team2_score / 10) + 0x30;
;
	lda     _team2_score
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(23, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$37
	jsr     _one_vram_buffer
;
; temp1 = (team2_score % 10) + 0x30;
;
	lda     _team2_score
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(24, 1));
;
	jsr     pusha
	ldx     #$20
	lda     #$38
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ read_controllers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_controllers: near

.segment	"CODE"

;
; doublepad = pad_poll_4score_1_3();
;
	jsr     _pad_poll_4score_1_3
	sta     _doublepad
	stx     _doublepad+1
;
; pad1 = high_byte(doublepad); // the high byte is the first controller's input
;
	lda     _doublepad+1
	sta     _pad1
;
; pad3 = low_byte(doublepad);  // low byte is the third controller's input
;
	lda     _doublepad
	sta     _pad3
;
; doublepad = pad_poll_4score_2_4();
;
	jsr     _pad_poll_4score_2_4
	sta     _doublepad
	stx     _doublepad+1
;
; pad2 = high_byte(doublepad);
;
	lda     _doublepad+1
	sta     _pad2
;
; pad4 = low_byte(doublepad);
;
	lda     _doublepad
	sta     _pad4
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ seeker_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_seeker_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ chaser_ai (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_chaser_ai: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; debug_extras();
;
	jsr     _debug_extras
;
; game_counters();
;
	jsr     _game_counters
;
; read_controllers();
;
	jsr     _read_controllers
;
; quack_movement();
;
	jsr     _quack_movement
;
; current_player = 1;
;
	lda     #$01
	sta     _current_player
;
; GenericBoxGuy = BoxGuy1;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy1)
	ldx     #>(_BoxGuy1)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad1;
;
	lda     _pad1
	sta     _generic_pad
;
; movement(); // this assigns old_x and old_y
;
	jsr     _movement
;
; BoxGuy1.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy1+4
;
; temp_x = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x
;
; temp_y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision()) // 1 and 3, both seekers
;
	jsr     _sprite_collision
	tax
	beq     L2139
;
; BoxGuy1.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy1+1
	lda     _old_x
	sta     _BoxGuy1
;
; BoxGuy1.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy1+2+1
	lda     _old_y
;
; else
;
	jmp     L26B1
;
; BoxGuy1.x = GenericBoxGuy.x;
;
L2139:	lda     _GenericBoxGuy+1
	sta     _BoxGuy1+1
	lda     _GenericBoxGuy
	sta     _BoxGuy1
;
; BoxGuy1.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy1+2+1
	lda     _GenericBoxGuy+2
L26B1:	sta     _BoxGuy1+2
;
; current_player = 2;
;
	lda     #$02
	sta     _current_player
;
; GenericBoxGuy = BoxGuy2;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy2)
	ldx     #>(_BoxGuy2)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad2;
;
	lda     _pad2
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy2.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy2+4
;
; if (!(pad2 & (PAD_LEFT | PAD_RIGHT | PAD_UP | PAD_DOWN))) {
;
	lda     _pad2
	and     #$0F
;
; } else {
;
	beq     L26B2
;
; BoxGuy2.moving = 1;
;
	lda     #$01
L26B2:	sta     _BoxGuy2+5
;
; temp_x = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x
;
; temp_y = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) // player 2 blocks player 4 (chasers)
;
	jsr     _sprite_collision
	tax
	beq     L215E
;
; BoxGuy2.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy2+1
	lda     _old_x
	sta     _BoxGuy2
;
; BoxGuy2.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy2+2+1
	lda     _old_y
;
; else
;
	jmp     L26B3
;
; BoxGuy2.x = GenericBoxGuy.x;
;
L215E:	lda     _GenericBoxGuy+1
	sta     _BoxGuy2+1
	lda     _GenericBoxGuy
	sta     _BoxGuy2
;
; BoxGuy2.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy2+2+1
	lda     _GenericBoxGuy+2
L26B3:	sta     _BoxGuy2+2
;
; current_player = 3;
;
	lda     #$03
	sta     _current_player
;
; GenericBoxGuy = BoxGuy3;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy3)
	ldx     #>(_BoxGuy3)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad3;
;
	lda     _pad3
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy3.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy3+4
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x2
;
; temp_y2 = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y2
;
; if (sprite_collision()) // 1 blocks 3 (seekers)
;
	jsr     _sprite_collision
	tax
	beq     L217A
;
; BoxGuy3.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy3+1
	lda     _old_x
	sta     _BoxGuy3
;
; BoxGuy3.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy3+2+1
	lda     _old_y
;
; else
;
	jmp     L26B4
;
; BoxGuy3.x = GenericBoxGuy.x;
;
L217A:	lda     _GenericBoxGuy+1
	sta     _BoxGuy3+1
	lda     _GenericBoxGuy
	sta     _BoxGuy3
;
; BoxGuy3.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy3+2+1
	lda     _GenericBoxGuy+2
L26B4:	sta     _BoxGuy3+2
;
; current_player = 4;
;
	lda     #$04
	sta     _current_player
;
; GenericBoxGuy = BoxGuy4;
;
	lda     #<(_GenericBoxGuy)
	ldx     #>(_GenericBoxGuy)
	jsr     pushax
	lda     #<(_BoxGuy4)
	ldx     #>(_BoxGuy4)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _memcpy
;
; generic_pad = pad4;
;
	lda     _pad4
	sta     _generic_pad
;
; movement();
;
	jsr     _movement
;
; BoxGuy4.direction = GenericBoxGuy.direction; // keep direction updated for animation
;
	lda     _GenericBoxGuy+4
	sta     _BoxGuy4+4
;
; if (!(pad4 & (PAD_LEFT | PAD_RIGHT | PAD_UP | PAD_DOWN))) {
;
	lda     _pad4
	and     #$0F
;
; } else {
;
	beq     L26B5
;
; BoxGuy4.moving = 1;
;
	lda     #$01
L26B5:	sta     _BoxGuy4+5
;
; temp_x = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = GenericBoxGuy.x >> 8;
;
	lda     _GenericBoxGuy+1
	sta     _temp_x2
;
; temp_y2 = GenericBoxGuy.y >> 8;
;
	lda     _GenericBoxGuy+3
	sta     _temp_y2
;
; if (sprite_collision()) // 2 blocks 4 (seekers)
;
	jsr     _sprite_collision
	tax
	beq     L219F
;
; BoxGuy4.x = old_x;
;
	lda     _old_x+1
	sta     _BoxGuy4+1
	lda     _old_x
	sta     _BoxGuy4
;
; BoxGuy4.y = old_y;
;
	lda     _old_y+1
	sta     _BoxGuy4+2+1
	lda     _old_y
;
; else
;
	jmp     L26B6
;
; BoxGuy4.x = GenericBoxGuy.x;
;
L219F:	lda     _GenericBoxGuy+1
	sta     _BoxGuy4+1
	lda     _GenericBoxGuy
	sta     _BoxGuy4
;
; BoxGuy4.y = GenericBoxGuy.y;
;
	lda     _GenericBoxGuy+2+1
	sta     _BoxGuy4+2+1
	lda     _GenericBoxGuy+2
L26B6:	sta     _BoxGuy4+2
;
; if (bee1_bigbee_timer == 0) { // Only check if not already transformed
;
	lda     _bee1_bigbee_timer
	bne     L26B9
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp = 1; //which bee are we checking
;
	lda     #$01
	sta     _temp
;
; check_powerup();
;
	jsr     _check_powerup
;
; if (bee3_bigbee_timer == 0) { // Only check if not already transformed
;
L26B9:	lda     _bee3_bigbee_timer
	bne     L26BA
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; temp = 3;
;
	lda     #$03
	sta     _temp
;
; check_powerup();
;
	jsr     _check_powerup
;
; if (bee1_bigbee_timer > 0) {
;
L26BA:	lda     _bee1_bigbee_timer
	beq     L26BC
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L26BB
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x2 = BoxGuy4.x >> 8;
;
L26BB:	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L26BC
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; if (bee3_bigbee_timer > 0) {
;
L26BC:	lda     _bee3_bigbee_timer
	beq     L26BE
;
; temp_x = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L26BD
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x2 = BoxGuy2.x >> 8;
;
L26BD:	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision()) {
;
	jsr     _sprite_collision
	tax
	beq     L26BE
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_BIGBEE_EAT_DUCK;
;
	lda     #$04
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy1.x >> 8;
;
L26BE:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy2.x >> 8;
;
	lda     _BoxGuy2+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L26BF
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_FRIENDLY_FIRE;
;
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy3.x >> 8;
;
L26BF:	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L26C0
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_FRIENDLY_FIRE;
;
	lda     #$01
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy1.x >> 8;
;
L26C0:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = BoxGuy4.x >> 8;
;
	lda     _BoxGuy4+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L26C1
;
; sfx_play(SFX_TEAM2_WIN, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_ENEMY_KILL;
;
	lda     #$02
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; temp_x = BoxGuy2.x >> 8;
;
L26C1:	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; temp_x2 = BoxGuy3.x >> 8;
;
	lda     _BoxGuy3+1
	sta     _temp_x2
;
; temp_y2 = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y2
;
; if (sprite_collision())
;
	jsr     _sprite_collision
	tax
	beq     L223E
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_ENEMY_KILL;
;
	lda     #$02
	sta     _win_reason
;
; init_roundover();
;
	jmp     _init_roundover
;
; draw_sprites();
;
L223E:	jmp     _draw_sprites

.endproc

; ---------------------------------------------------------------
; void __near__ title_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title_loop: near

.segment	"CODE"

;
; frame_counter++;
;
L26C2:	inc     _frame_counter
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_controllers();
;
	jsr     _read_controllers
;
; if (pad1 & PAD_UP)
;
	lda     _pad1
	and     #$08
	beq     L26C3
;
; if ((BoxGuy1.y >> 8) > 160)
;
	lda     _BoxGuy1+3
	cmp     #$A1
	bcc     L26C3
;
; BoxGuy1.y -= 0x0400; // Move up 4 pixels (0x0400 = 1024 sub-pixels)
;
	lda     _BoxGuy1+2
	sec
	sbc     #$00
	sta     _BoxGuy1+2
	lda     _BoxGuy1+2+1
	sbc     #$04
	sta     _BoxGuy1+2+1
;
; if (pad2 & PAD_UP)
;
L26C3:	lda     _pad2
	and     #$08
	beq     L26C4
;
; if ((BoxGuy2.y >> 8) > 160)
;
	lda     _BoxGuy2+3
	cmp     #$A1
	bcc     L26C4
;
; BoxGuy2.y -= 0x0400;
;
	lda     _BoxGuy2+2
	sec
	sbc     #$00
	sta     _BoxGuy2+2
	lda     _BoxGuy2+2+1
	sbc     #$04
	sta     _BoxGuy2+2+1
;
; if (pad3 & PAD_UP)
;
L26C4:	lda     _pad3
	and     #$08
	beq     L26C5
;
; if ((BoxGuy3.y >> 8) > 160)
;
	lda     _BoxGuy3+3
	cmp     #$A1
	bcc     L26C5
;
; BoxGuy3.y -= 0x0400;
;
	lda     _BoxGuy3+2
	sec
	sbc     #$00
	sta     _BoxGuy3+2
	lda     _BoxGuy3+2+1
	sbc     #$04
	sta     _BoxGuy3+2+1
;
; if (pad4 & PAD_UP)
;
L26C5:	lda     _pad4
	and     #$08
	beq     L26C6
;
; if ((BoxGuy4.y >> 8) > 160)
;
	lda     _BoxGuy4+3
	cmp     #$A1
	bcc     L26C6
;
; BoxGuy4.y -= 0x0400;
;
	lda     _BoxGuy4+2
	sec
	sbc     #$00
	sta     _BoxGuy4+2
	lda     _BoxGuy4+2+1
	sbc     #$04
	sta     _BoxGuy4+2+1
;
; if (pad1 & PAD_START || pad2 & PAD_START || pad3 & PAD_START || pad4 & PAD_START)
;
L26C6:	lda     _pad1
	and     #$10
	bne     L26C7
	lda     _pad2
	and     #$10
	bne     L26C7
	lda     _pad3
	and     #$10
	bne     L26C7
	lda     _pad4
	and     #$10
	beq     L26CA
;
; if (!start_held)
;
L26C7:	lda     _start_held
	bne     L26C8
;
; start_held = 1;
;
	lda     #$01
	sta     _start_held
;
; start_hold_timer = 0;
;
	lda     #$00
	sta     _start_hold_timer
;
; start_hold_timer++;
;
L26C8:	inc     _start_hold_timer
;
; if (start_hold_timer >= 3)
;
	lda     _start_hold_timer
	cmp     #$03
	jcc     L26C2
;
; init_options_loop();
;
	jmp     _init_options_loop
;
; start_held = 0;
;
L26CA:	sta     _start_held
;
; start_hold_timer = 0;
;
	sta     _start_hold_timer
;
; while (1)
;
	jmp     L26C2

.endproc

; ---------------------------------------------------------------
; void __near__ options_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_options_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L2280:	jsr     _ppu_wait_nmi
;
; frame_counter++;
;
	inc     _frame_counter
;
; oam_clear();
;
	jsr     _oam_clear
;
; if ((frame_counter % 10) == 0) {
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L2287
	cmp     #$00
	bne     L2287
;
; anim_frame_1 = (anim_frame_1 + 1) % 3;
;
	lda     _anim_frame_1
	clc
	adc     #$01
	bcc     L228E
	inx
L228E:	jsr     pushax
	lda     #$03
	jsr     tosumoda0
	sta     _anim_frame_1
;
; switch(anim_frame_1) {
;
L2287:	lda     _anim_frame_1
;
; }
;
	beq     L2293
	cmp     #$01
	beq     L2299
	cmp     #$02
	beq     L229F
	jmp     L2291
;
; case 0: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright0_data); break;
;
L2293:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright0_data)
	ldx     #>(_gamesprites_smallbeeright0_data)
	jmp     L26CB
;
; case 1: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright1_data); break;
;
L2299:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright1_data)
	ldx     #>(_gamesprites_smallbeeright1_data)
	jmp     L26CB
;
; case 2: oam_meta_spr(temp_x, temp_y, gamesprites_smallbeeright2_data); break;
;
L229F:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_gamesprites_smallbeeright2_data)
	ldx     #>(_gamesprites_smallbeeright2_data)
L26CB:	jsr     _oam_meta_spr
;
; read_controllers();
;
L2291:	jsr     _read_controllers
;
; if(pad1 & PAD_DOWN){
;
	lda     _pad1
	and     #$04
	beq     L26CC
;
; if(current_settings_choice < SETTING_SONG){
;
	lda     _current_settings_choice
	cmp     #$02
	bcs     L26CC
;
; current_settings_choice++;
;
	inc     _current_settings_choice
;
; update_options_screen();
;
	jsr     _update_options_screen
;
; if(pad1 & PAD_UP){
;
L26CC:	lda     _pad1
	and     #$08
	beq     L26CD
;
; if(current_settings_choice > 0){
;
	lda     _current_settings_choice
	beq     L26CD
;
; current_settings_choice--;
;
	dec     _current_settings_choice
;
; update_options_screen();
;
	jsr     _update_options_screen
;
; if (pad1 & PAD_START || pad2 & PAD_START || pad3 & PAD_START || pad4 & PAD_START)
;
L26CD:	lda     _pad1
	and     #$10
	bne     L26CE
	lda     _pad2
	and     #$10
	bne     L26CE
	lda     _pad3
	and     #$10
	bne     L26CE
	lda     _pad4
	and     #$10
	jeq     L2280
;
; sfx_play(SFX_START, 0);
;
L26CE:	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; init_game_loop();
;
	jsr     _init_game_loop
;
; prev_pad1 = pad1;
;
	lda     _pad1
	sta     _prev_pad1
;
; prev_pad2 = pad2;
;
	lda     _pad2
	sta     _prev_pad2
;
; prev_pad3 = pad3;
;
	lda     _pad3
	sta     _prev_pad3
;
; prev_pad4 = pad4;
;
	lda     _pad4
	sta     _prev_pad4
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ gameover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gameover_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L22C1:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_START || pad2 & PAD_START || pad3 & PAD_START || pad4 & PAD_START)
;
	and     #$10
	bne     L26CF
	lda     _pad2
	and     #$10
	bne     L26CF
	lda     _pad3
	and     #$10
	bne     L26CF
	lda     _pad4
	and     #$10
	beq     L22C1
;
; init_title_loop();
;
L26CF:	jmp     _init_title_loop

.endproc

; ---------------------------------------------------------------
; void __near__ init_game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_game_loop: near

.segment	"CODE"

;
; clear_background();
;
	jsr     _clear_background
;
; game_mode = MODE_GAME;
;
	lda     #$02
	sta     _game_mode
;
; team1_wins = 0;
;
	lda     #$00
	sta     _team1_wins
;
; team2_wins = 0;
;
	sta     _team2_wins
;
; if(settings_map == MAP_COMBS){
;
	lda     _settings_map
	bne     L26D1
;
; map_ptr = combs;
;
	lda     #>(_combs)
	sta     _map_ptr+1
	lda     #<(_combs)
	sta     _map_ptr
;
; map = MAP_COMBS;
;
	lda     #$00
;
; } else if (settings_map == MAP_VINES){
;
	jmp     L26D0
L26D1:	lda     _settings_map
	cmp     #$02
	bne     L26D2
;
; map_ptr = vines;
;
	lda     #>(_vines)
	sta     _map_ptr+1
	lda     #<(_vines)
	sta     _map_ptr
;
; map = MAP_VINES;
;
	lda     #$02
;
; } else if(settings_map == MAP_OUTDOORS){
;
	jmp     L26D0
L26D2:	lda     _settings_map
	cmp     #$01
	bne     L23C4
;
; map_ptr = outdoors;
;
	lda     #>(_outdoors)
	sta     _map_ptr+1
	lda     #<(_outdoors)
	sta     _map_ptr
;
; map = MAP_OUTDOORS;
;
	lda     #$01
L26D0:	sta     _map
;
; load_bg_palette();
;
L23C4:	jsr     _load_bg_palette
;
; pal_spr(palette_sp); 
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; start_round();
;
	jmp     _start_round

.endproc

; ---------------------------------------------------------------
; void __near__ init_options_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_options_loop: near

.segment	"CODE"

;
; delay(30);
;
	lda     #$1E
	jsr     _delay
;
; prev_pad1 = 0;
;
	lda     #$00
	sta     _prev_pad1
;
; prev_pad2 = 0;
;
	sta     _prev_pad2
;
; prev_pad3 = 0;
;
	sta     _prev_pad3
;
; prev_pad4 = 0;
;
	sta     _prev_pad4
;
; clear_background();  
;
	jsr     _clear_background
;
; game_mode = MODE_OPTIONS;
;
	lda     #$01
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; load_room(); // loads the options screen
;
	jsr     _load_room
;
; pal_bg(palette_options_bg);
;
	lda     #<(_palette_options_bg)
	ldx     #>(_palette_options_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; update_options_screen();
;
	jsr     _update_options_screen
;
; start_hold_timer = 0;
;
	lda     #$00
	sta     _start_hold_timer
;
; start_held = 0;
;
	sta     _start_held
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_gameover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_gameover_loop: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; clear_background();
;
	jsr     _clear_background
;
; music_stop();
;
	jsr     _music_stop
;
; game_mode = MODE_GAMEOVER;
;
	lda     #$03
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; if(team1_wins >= 3){
;
	lda     _team1_wins
	cmp     #$03
	bcc     L26D4
;
; multi_vram_buffer_horz("TEAM 1 WINS THE MATCH!", 21, NTADR_A(4, 12));
;
	jsr     decsp3
	lda     #<(L2539)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2539)
;
; } else if(team2_wins >= 3){
;
	jmp     L26DA
L26D4:	lda     _team2_wins
	cmp     #$03
	bcc     L2543
;
; multi_vram_buffer_horz("TEAM 2 WINS THE MATCH!", 21, NTADR_A(4, 12));
;
	jsr     decsp3
	lda     #<(L2546)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2546)
L26DA:	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$84
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("PRESS START", 11, NTADR_A(10, 24));
;
L2543:	jsr     decsp3
	lda     #<(L2550)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2550)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$23
	lda     #$0A
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; delay(10);
;
	lda     #$0A
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ init_title_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_title_loop: near

.segment	"CODE"

;
; delay(30);
;
	lda     #$1E
	jsr     _delay
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_title_bg);
;
	lda     #<(_palette_title_bg)
	ldx     #>(_palette_title_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; load_room(); //loads the title screen;
;
	jsr     _load_room
;
; BoxGuy1.x = 0x2800; // x = 40 (0x28)
;
	ldx     #$28
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy1.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy1+4
;
; BoxGuy2.x = 0x7800; // x = 120 (0x78)
;
	ldx     #$78
	lda     #$00
	sta     _BoxGuy2
	stx     _BoxGuy2+1
;
; BoxGuy2.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy2.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy2+4
;
; BoxGuy3.x = 0xC800; // x = 200 (0xC8)
;
	lda     #$00
	sta     _BoxGuy3
	stx     _BoxGuy3+1
;
; BoxGuy3.y = 0xC800; // y = 200 (0xC8)
;
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy3.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy3+4
;
; BoxGuy4.x = 0x1801; // x = 280 (0x118)
;
	ldx     #$18
	lda     #$01
	sta     _BoxGuy4
	stx     _BoxGuy4+1
;
; BoxGuy4.y = 0xC800; // y = 200 (0xC8)
;
	ldx     #$C8
	lda     #$00
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy4.direction = DIR_NONE;
;
	lda     #$04
	sta     _BoxGuy4+4
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ init_system (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_system: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); // shift the bg down one pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; settings_speed = GAME_REGULAR;
;
	lda     #$01
	sta     _settings_speed
;
; settings_map = MAP_COMBS;
;
	lda     #$00
	sta     _settings_map
;
; settings_song = SONG_HIVE;
;
	sta     _settings_song
;
; speed_option = SPEED_REGULAR;
;
	tax
	lda     #$A0
	sta     _speed_option
	stx     _speed_option+1
;
; turbo_amount = TURBO_MEDIUM;
;
	lda     #$80
	sta     _turbo_amount
;
; ducks_go_faster_over_time=1;
;
	lda     #$01
	sta     _ducks_go_faster_over_time
;
; sprite_rotation = 0;
;
	txa
	sta     _sprite_rotation
;
; anim_frame_1 = 0;
;
	sta     _anim_frame_1
;
; anim_frame_2 = 0;
;
	sta     _anim_frame_2
;
; anim_frame_3 = 0;
;
	sta     _anim_frame_3
;
; anim_frame_4 = 0;
;
	sta     _anim_frame_4
;
; bee1_bigbee_timer = 0;
;
	sta     _bee1_bigbee_timer
;
; bee3_bigbee_timer = 0;
;
	sta     _bee3_bigbee_timer
;
; ppu_on_all(); // turn on screenxw
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ clear_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_background: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (tempint = 0; tempint < 1024; ++tempint)
;
	lda     #$00
	sta     _tempint
	sta     _tempint+1
L2583:	ldx     _tempint+1
	cpx     #$04
	bcs     L2584
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for (tempint = 0; tempint < 1024; ++tempint)
;
	inc     _tempint
	bne     L2583
	inc     _tempint+1
	jmp     L2583
;
; ppu_on_all(); // turn on screen
;
L2584:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ update_hud (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_hud: near

.segment	"CODE"

;
; if(team1_wins > 0){
;
	lda     _team1_wins
	beq     L1CCD
;
; one_vram_buffer(0xc8, NTADR_A(13, 1)); //full
;
	lda     #$C8
;
; }else {
;
	jmp     L26EA
;
; one_vram_buffer(0xb7, NTADR_A(13, 1)); //empty
;
L1CCD:	lda     #$B7
L26EA:	jsr     pusha
	ldx     #$20
	lda     #$2D
	jsr     _one_vram_buffer
;
; if(team1_wins > 1){
;
	lda     _team1_wins
	cmp     #$02
	bcc     L1CE0
;
; one_vram_buffer(0xc9, NTADR_A(12, 1)); //full
;
	lda     #$C9
;
; } else {
;
	jmp     L26EB
;
; one_vram_buffer(0xb8, NTADR_A(12, 1)); //empty
;
L1CE0:	lda     #$B8
L26EB:	jsr     pusha
	ldx     #$20
	lda     #$2C
	jsr     _one_vram_buffer
;
; if(team1_wins > 2){
;
	lda     _team1_wins
	cmp     #$03
	bcc     L1CF3
;
; one_vram_buffer(0xca, NTADR_A(11, 1)); //full
;
	lda     #$CA
;
; } else {
;
	jmp     L26EC
;
; one_vram_buffer(0xb9, NTADR_A(11, 1)); //empty
;
L1CF3:	lda     #$B9
L26EC:	jsr     pusha
	ldx     #$20
	lda     #$2B
	jsr     _one_vram_buffer
;
; if(team2_wins > 0){
;
	lda     _team2_wins
	beq     L1D06
;
; one_vram_buffer(0xc8, NTADR_A(18, 1)); //full
;
	lda     #$C8
;
; } else {
;
	jmp     L26ED
;
; one_vram_buffer(0xb7, NTADR_A(18, 1)); //empty
;
L1D06:	lda     #$B7
L26ED:	jsr     pusha
	ldx     #$20
	lda     #$32
	jsr     _one_vram_buffer
;
; if(team2_wins > 1){
;
	lda     _team2_wins
	cmp     #$02
	bcc     L1D19
;
; one_vram_buffer(0xc9, NTADR_A(19, 1)); //full
;
	lda     #$C9
;
; } else {
;
	jmp     L26EE
;
; one_vram_buffer(0xb8, NTADR_A(19, 1)); //empty
;
L1D19:	lda     #$B8
L26EE:	jsr     pusha
	ldx     #$20
	lda     #$33
	jsr     _one_vram_buffer
;
; if(team2_wins > 2){
;
	lda     _team2_wins
	cmp     #$03
	bcc     L1D2C
;
; one_vram_buffer(0xca, NTADR_A(20, 1 )); //full
;
	lda     #$CA
	jsr     pusha
	ldx     #$20
	lda     #$34
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xb9, NTADR_A(20, 1)); //empty
;
L1D2C:	lda     #$B9
	jsr     pusha
	ldx     #$20
	lda     #$34
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ init_roundover (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_roundover: near

.segment	"CODE"

;
; game_mode = MODE_ROUNDOVER;
;
	lda     #$04
	sta     _game_mode
;
; music_stop();
;
	jsr     _music_stop
;
; if (winner == ONETWO_WINNER)
;
	lda     _winner
	bne     L26F0
;
; team1_wins++;
;
	inc     _team1_wins
;
; else if (winner == THREEFOUR_WINNER)
;
	jmp     L24D1
L26F0:	lda     _winner
	cmp     #$01
	bne     L24D1
;
; team2_wins++;
;
	inc     _team2_wins
;
; update_hud();
;
L24D1:	jsr     _update_hud
;
; if (winner == ONETWO_WINNER)
;
	lda     _winner
	bne     L26F1
;
; multi_vram_buffer_horz("TEAM 1 WINS!", 12, NTADR_A(9, 12));
;
	jsr     decsp3
	lda     #<(L24D8)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L24D8)
;
; else if (winner == THREEFOUR_WINNER)
;
	jmp     L26FB
L26F1:	lda     _winner
	cmp     #$01
	bne     L26F2
;
; multi_vram_buffer_horz("TEAM 2 WINS!", 12, NTADR_A(9, 12));
;
	jsr     decsp3
	lda     #<(L24E5)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L24E5)
L26FB:	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$89
	jsr     _multi_vram_buffer_horz
;
; if (win_reason == WIN_DOTS)
;
L26F2:	lda     _win_reason
	bne     L26F3
;
; multi_vram_buffer_horz("COLLECTED 100 DOTS", 18, NTADR_A(6, 13));
;
	jsr     decsp3
	lda     #<(L24F1)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L24F1)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_FRIENDLY_FIRE)
;
L26F3:	lda     _win_reason
	cmp     #$01
	bne     L26F4
;
; multi_vram_buffer_horz("FRIENDLY BEE EATEN", 18, NTADR_A(6, 13));
;
	jsr     decsp3
	lda     #<(L24FE)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L24FE)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A6
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_ENEMY_KILL)
;
L26F4:	lda     _win_reason
	cmp     #$02
	bne     L26F5
;
; multi_vram_buffer_horz("ENEMY BEE EATEN", 15, NTADR_A(7, 13));
;
	jsr     decsp3
	lda     #<(L250B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L250B)
	sta     (sp),y
	lda     #$0F
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A7
	jmp     _multi_vram_buffer_horz
;
; else if (win_reason == WIN_BIGBEE_EAT_DUCK)
;
L26F5:	lda     _win_reason
	cmp     #$04
	bne     L2515
;
; multi_vram_buffer_horz("BIGBEE ATE DUCK!", 16, NTADR_A(7, 13));
;
	jsr     decsp3
	lda     #<(L2518)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2518)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$A7
	jmp     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("TIME UP!", 8, NTADR_A(11, 13));
;
L2515:	jsr     decsp3
	lda     #<(L2523)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2523)
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$AB
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ start_round (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_round: near

.segment	"CODE"

;
; if(settings_map == MAP_RANDOM){
;
	lda     _settings_map
	cmp     #$03
	bne     L22CE
;
; if(frame_counter % 3 == 0){
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	bne     L2703
	cmp     #$00
	bne     L2703
;
; map_ptr = combs;
;
	lda     #>(_combs)
	sta     _map_ptr+1
	lda     #<(_combs)
	sta     _map_ptr
;
; map = MAP_COMBS;
;
	txa
;
; } else if (frame_counter % 3 == 1){
;
	jmp     L26FC
L2703:	lda     _frame_counter
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	bne     L22D8
	cmp     #$01
	bne     L22D8
;
; map_ptr = combs; //todo: fix bug here
;
	lda     #>(_combs)
	sta     _map_ptr+1
	lda     #<(_combs)
	sta     _map_ptr
;
; map = MAP_VINES;
;
	lda     #$02
;
; } else {
;
	jmp     L26FC
;
; map_ptr = outdoors;
;
L22D8:	lda     #>(_outdoors)
	sta     _map_ptr+1
	lda     #<(_outdoors)
	sta     _map_ptr
;
; map= MAP_OUTDOORS;
;
	lda     #$01
L26FC:	sta     _map
;
; load_bg_palette();
;
	jsr     _load_bg_palette
;
; load_room();
;
L22CE:	jsr     _load_room
;
; update_hud();
;
	jsr     _update_hud
;
; for (index = 0; index < 128; index++)
;
	lda     #$00
	sta     _index
	tax
L26FD:	lda     _index
	cmp     #$80
	bcs     L26FE
;
; consumed_dots[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _consumed_dots,y
;
; for (index = 0; index < 128; index++)
;
	inc     _index
	jmp     L26FD
;
; map_positions = (frame_counter) % 5; //this could be round based.
;
L26FE:	lda     _frame_counter
	jsr     pushax
	lda     #$05
	jsr     tosumodax
	sta     _map_positions
;
; if (map_positions == START_POS_WIDE) {
;
	cmp     #$01
	bne     L26FF
;
; BoxGuy1.x = 0x3800; BoxGuy1.y = 0xA800;
;
	ldx     #$38
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$A8
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x5000; BoxGuy2.y = 0x2800;
;
	ldx     #$50
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xC000; BoxGuy3.y = 0xA800;
;
	ldx     #$C0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$A8
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0xA000; BoxGuy4.y = 0x2800;
;
	ldx     #$A0
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_CLOSE) {
;
	jmp     L2704
L26FF:	lda     _map_positions
	cmp     #$02
	bne     L2700
;
; BoxGuy1.x = 0x5800; BoxGuy1.y = 0x3800;
;
	ldx     #$58
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$38
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7000; BoxGuy2.y = 0x3000;
;
	ldx     #$70
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$30
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xA000; BoxGuy3.y = 0x3800;
;
	ldx     #$A0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$38
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8800; BoxGuy4.y = 0x3000;
;
	ldx     #$88
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$30
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_CORNERS) {
;
	jmp     L2704
L2700:	lda     _map_positions
	cmp     #$03
	bne     L2701
;
; BoxGuy1.x = 0x2800; BoxGuy1.y = 0x2000;
;
	ldx     #$28
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$20
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x2800; BoxGuy2.y = 0xd800;
;
	ldx     #$28
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$D8
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xD800; BoxGuy3.y = 0x2000;
;
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$20
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0xD800; BoxGuy4.y = 0xD800;
;
	ldx     #$D8
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; } else if (map_positions == START_POS_MIDDLE) {
;
	jmp     L2704
L2701:	lda     _map_positions
	cmp     #$04
	bne     L232F
;
; BoxGuy1.x = 0x7800; BoxGuy1.y = 0x8000;
;
	ldx     #$78
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$80
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7800; BoxGuy2.y = 0x2800;
;
	ldx     #$78
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0x8000; BoxGuy3.y = 0x8000;
;
	ldx     #$80
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8000; BoxGuy4.y = 0x2800;
;
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy3.direction = DIR_RIGHT;
;
	lda     #$03
	sta     _BoxGuy3+4
;
; BoxGuy4.direction = DIR_RIGHT;
;
	sta     _BoxGuy4+4
;
; } else {  // START_POS_DEFAULT
;
	jmp     L2702
;
; BoxGuy1.x = 0x4800; BoxGuy1.y = 0x4000;
;
L232F:	ldx     #$48
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
	ldx     #$40
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy2.x = 0x7000; BoxGuy2.y = 0x2800;
;
	ldx     #$70
	sta     _BoxGuy2
	stx     _BoxGuy2+1
	ldx     #$28
	sta     _BoxGuy2+2
	stx     _BoxGuy2+2+1
;
; BoxGuy3.x = 0xB000; BoxGuy3.y = 0x4000;
;
	ldx     #$B0
	sta     _BoxGuy3
	stx     _BoxGuy3+1
	ldx     #$40
	sta     _BoxGuy3+2
	stx     _BoxGuy3+2+1
;
; BoxGuy4.x = 0x8800; BoxGuy4.y = 0x2800;
;
	ldx     #$88
	sta     _BoxGuy4
	stx     _BoxGuy4+1
	ldx     #$28
	sta     _BoxGuy4+2
	stx     _BoxGuy4+2+1
;
; BoxGuy4.direction = DIR_RIGHT;
;
	lda     #$03
	sta     _BoxGuy4+4
;
; BoxGuy1.direction = DIR_RIGHT;
;
	sta     _BoxGuy1+4
;
; team1_score=0;
;
L2702:	lda     #$00
L2704:	sta     _team1_score
;
; team2_score=0;
;
	sta     _team2_score
;
; powerup1 =1;
;
	lda     #$01
	sta     _powerup1
;
; powerup2 =1;
;
	sta     _powerup2
;
; powerup3 =1;
;
	sta     _powerup3
;
; powerup4 =1;
;
	sta     _powerup4
;
; game_timer = GAME_LENGTH;
;
	lda     #$63
	sta     _game_timer
;
; win_reason = WIN_DOTS; // default
;
	lda     #$00
	sta     _win_reason
;
; turbo_p1 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p1
;
; turbo_p2 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p2
;
; turbo_p3 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p3
;
; turbo_p4 = turbo_amount;
;
	lda     _turbo_amount
	sta     _turbo_p4
;
; quack2.moving = 0;
;
	lda     #$00
	sta     _quack2+5
;
; quack4.moving = 0;
;
	sta     _quack4+5
;
; quack2_cooldown = 0;
;
	sta     _quack2_cooldown
;
; quack4_cooldown = 0;
;
	sta     _quack4_cooldown
;
; bee1_bigbee_timer = 0;
;
	sta     _bee1_bigbee_timer
;
; bee3_bigbee_timer = 0;
;
	sta     _bee3_bigbee_timer
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(116, 100, gamesprites_big3_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big3_data)
	ldx     #>(_gamesprites_big3_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_meta_spr(116, 100, gamesprites_big2_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big2_data)
	ldx     #>(_gamesprites_big2_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_meta_spr(116, 100, gamesprites_big1_data);
;
	jsr     decsp2
	lda     #$74
	ldy     #$01
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     #<(_gamesprites_big1_data)
	ldx     #>(_gamesprites_big1_data)
	jsr     _oam_meta_spr
;
; sfx_play(SFX_TEAM1_DOT_COLLECT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; delay(40);
;
	lda     #$28
	jsr     _delay
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; sfx_play(SFX_START, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; delay(10);
;
	lda     #$0A
	jsr     _delay
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; game_mode = MODE_GAME;
;
	lda     #$02
	sta     _game_mode
;
; song = SONG_HIVE;
;
	lda     #$00
	sta     _song
;
; music_play(song);
;
	jmp     _music_play

.endproc

; ---------------------------------------------------------------
; void __near__ roundover_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_roundover_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L2591:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; if (pad1 & PAD_START || pad2 & PAD_START || pad3 & PAD_START || pad4 & PAD_START)
;
	and     #$10
	bne     L2705
	lda     _pad2
	and     #$10
	bne     L2705
	lda     _pad3
	and     #$10
	bne     L2705
	lda     _pad4
	and     #$10
	beq     L2591
;
; if (team1_wins >= 3)
;
L2705:	lda     _team1_wins
	cmp     #$03
;
; init_gameover_loop();
;
	jcs     _init_gameover_loop
;
; else if (team2_wins >= 3)
;
	lda     _team2_wins
	cmp     #$03
;
; init_gameover_loop();
;
	jcs     _init_gameover_loop
;
; start_round();
;
	jmp     _start_round

.endproc

; ---------------------------------------------------------------
; void __near__ game_counters (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_counters: near

.segment	"CODE"

;
; frame_counter++;
;
	inc     _frame_counter
;
; game_frame_timer++;
;
	inc     _game_frame_timer
;
; sprite_rotation++;
;
	inc     _sprite_rotation
;
; ai_counter++;
;
	inc     _ai_counter
;
; if (game_frame_timer >= TIMER_TICK_FREQUENCY) // Tick down every ~24.24 frames (40s/99)
;
	lda     _game_frame_timer
	cmp     #$18
	bcs     L2714
;
; }
;
	rts
;
; game_frame_timer = 0; // reset the frame timer
;
L2714:	lda     #$00
	sta     _game_frame_timer
;
; game_timer--;
;
	dec     _game_timer
;
; if (game_timer == 0)
;
	bne     L270A
;
; if (team1_score > team2_score)
;
	lda     _team1_score
	sec
	sbc     _team2_score
	bcc     L2708
	beq     L2708
;
; winner = ONETWO_WINNER;
;
	lda     #$00
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; sfx_play(SFX_TEAM1_WIN, 0);
;
	lda     #$02
;
; else if (team2_score > team1_score)
;
	jmp     L2713
L2708:	lda     _team2_score
	sec
	sbc     _team1_score
	bcc     L2709
	beq     L2709
;
; winner = THREEFOUR_WINNER;
;
	lda     #$01
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; else
;
	jmp     L2713
;
; winner = TIE_WINNER;
;
L2709:	lda     #$02
	sta     _winner
;
; win_reason = WIN_TIME_UP;
;
	lda     #$03
	sta     _win_reason
;
; sfx_play(SFX_DRAW_GAME, 0);
;
	lda     #$04
L2713:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; init_roundover();
;
	jsr     _init_roundover
;
; if (quack2_cooldown > 0) {
;
L270A:	lda     _quack2_cooldown
	beq     L270B
;
; quack2_cooldown--;
;
	dec     _quack2_cooldown
;
; if (quack4_cooldown > 0) {
;
L270B:	lda     _quack4_cooldown
	beq     L270C
;
; quack4_cooldown--;
;
	dec     _quack4_cooldown
;
; if(stun_p1 > 0){
;
L270C:	lda     _stun_p1
	beq     L270D
;
; stun_p1--;
;
	dec     _stun_p1
;
; if(stun_p2 > 0){
;
L270D:	lda     _stun_p2
	beq     L270E
;
; stun_p2--; 
;
	dec     _stun_p2
;
; if(stun_p3 > 0){
;
L270E:	lda     _stun_p3
	beq     L270F
;
; stun_p3--; 
;
	dec     _stun_p3
;
; if(stun_p4 > 0){
;
L270F:	lda     _stun_p4
	beq     L2710
;
; stun_p4--;
;
	dec     _stun_p4
;
; if (bee1_bigbee_timer > 0 ) {
;
L2710:	lda     _bee1_bigbee_timer
	beq     L2711
;
; bee1_bigbee_timer--;
;
	dec     _bee1_bigbee_timer
;
; if (bee3_bigbee_timer > 0 ) { 
;
L2711:	lda     _bee3_bigbee_timer
	beq     L25E1
;
; bee3_bigbee_timer--;
;
	dec     _bee3_bigbee_timer
;
; }
;
L25E1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ quack_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_quack_movement: near

.segment	"CODE"

;
; if(quack2.moving){
;
	lda     _quack2+5
	jeq     L1DA4
;
; if(quack2.direction == DIR_LEFT){
;
	lda     _quack2+4
	cmp     #$02
	bne     L271B
;
; quack2.x -= (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1D5C
	inx
L1D5C:	eor     #$FF
	sec
	adc     _quack2
	sta     _quack2
	txa
	eor     #$FF
	adc     _quack2+1
	sta     _quack2+1
;
; } else if (quack2.direction == DIR_RIGHT){
;
	jmp     L271E
L271B:	lda     _quack2+4
	cmp     #$03
	bne     L271C
;
; quack2.x += (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L2717
	inx
	clc
L2717:	adc     _quack2
	sta     _quack2
	txa
	adc     _quack2+1
	sta     _quack2+1
;
; } else if (quack2.direction == DIR_UP){
;
	jmp     L271E
L271C:	lda     _quack2+4
	bne     L271D
;
; quack2.y -= (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1D6A
	inx
L1D6A:	eor     #$FF
	sec
	adc     _quack2+2
	sta     _quack2+2
	txa
	eor     #$FF
;
; } else if (quack2.direction == DIR_DOWN){
;
	jmp     L2731
L271D:	lda     _quack2+4
	cmp     #$01
	bne     L271E
;
; quack2.y += (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L2718
	inx
	clc
L2718:	adc     _quack2+2
	sta     _quack2+2
	txa
L2731:	adc     _quack2+2+1
	sta     _quack2+2+1
;
; temp_x2 = quack2.x >> 8;
;
L271E:	lda     _quack2+1
	sta     _temp_x2
;
; temp_y2 = quack2.y >> 8;
;
	lda     _quack2+3
	sta     _temp_y2
;
; if (quack_tile_solid()){
;
	jsr     _quack_tile_solid
	tax
	beq     L271F
;
; quack2.moving = 0;
;
	lda     #$00
	sta     _quack2+5
;
; temp_x = BoxGuy1.x >> 8;
;
L271F:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = quack2.x >> 8;
;
	lda     _quack2+1
	sta     _temp_x2
;
; temp_y2 = quack2.y >> 8;
;
	lda     _quack2+3
	sta     _temp_y2
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L2721
;
; if(bee1_bigbee_timer == 0){
;
	lda     _bee1_bigbee_timer
	bne     L2720
;
; stun_p1 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p1
;
; quack2.moving = 0;
;
L2720:	lda     #$00
	sta     _quack2+5
;
; temp_x = BoxGuy2.x >> 8;
;
L2721:	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L2722
;
; stun_p2 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p2
;
; quack2.moving = 0;
;
	lda     #$00
	sta     _quack2+5
;
; temp_x = BoxGuy3.x >> 8;
;
L2722:	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L2724
;
; if(bee3_bigbee_timer == 0){
;
	lda     _bee3_bigbee_timer
	bne     L2723
;
; stun_p3 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p3
;
; quack2.moving = 0;
;
L2723:	lda     #$00
	sta     _quack2+5
;
; temp_x = BoxGuy4.x >> 8;
;
L2724:	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L1DA4
;
; stun_p4 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p4
;
; quack2.moving = 0;
;
	lda     #$00
	sta     _quack2+5
;
; if(quack4.moving){
;
L1DA4:	lda     _quack4+5
	bne     L2733
;
; }
;
	rts
;
; if(quack4.direction == DIR_LEFT){
;
L2733:	lda     _quack4+4
	cmp     #$02
	bne     L2725
;
; quack4.x -= (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1DB1
	inx
L1DB1:	eor     #$FF
	sec
	adc     _quack4
	sta     _quack4
	txa
	eor     #$FF
	adc     _quack4+1
	sta     _quack4+1
;
; } else if (quack4.direction == DIR_RIGHT){
;
	jmp     L2728
L2725:	lda     _quack4+4
	cmp     #$03
	bne     L2726
;
; quack4.x += (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L2719
	inx
	clc
L2719:	adc     _quack4
	sta     _quack4
	txa
	adc     _quack4+1
	sta     _quack4+1
;
; } else if (quack4.direction == DIR_UP){
;
	jmp     L2728
L2726:	lda     _quack4+4
	bne     L2727
;
; quack4.y -= (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L1DBF
	inx
L1DBF:	eor     #$FF
	sec
	adc     _quack4+2
	sta     _quack4+2
	txa
	eor     #$FF
;
; } else if (quack4.direction == DIR_DOWN){
;
	jmp     L2732
L2727:	lda     _quack4+4
	cmp     #$01
	bne     L2728
;
; quack4.y += (speed_option + SPEED_QUACK);
;
	lda     _speed_option
	ldx     _speed_option+1
	clc
	adc     #$60
	bcc     L271A
	inx
	clc
L271A:	adc     _quack4+2
	sta     _quack4+2
	txa
L2732:	adc     _quack4+2+1
	sta     _quack4+2+1
;
; temp_x2 = quack4.x >> 8;
;
L2728:	lda     _quack4+1
	sta     _temp_x2
;
; temp_y2 = quack4.y >> 8;
;
	lda     _quack4+3
	sta     _temp_y2
;
; if (quack_tile_solid()){
;
	jsr     _quack_tile_solid
	tax
	beq     L2729
;
; quack4.moving = 0;
;
	lda     #$00
	sta     _quack4+5
;
; temp_x = BoxGuy1.x >> 8;
;
L2729:	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; temp_x2 = quack4.x >> 8;
;
	lda     _quack4+1
	sta     _temp_x2
;
; temp_y2 = quack4.y >> 8;
;
	lda     _quack4+3
	sta     _temp_y2
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L272B
;
; if(bee1_bigbee_timer == 0){
;
	lda     _bee1_bigbee_timer
	bne     L272A
;
; stun_p1 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p1
;
; quack4.moving = 0;
;
L272A:	lda     #$00
	sta     _quack4+5
;
; temp_x = BoxGuy2.x >> 8;
;
L272B:	lda     _BoxGuy2+1
	sta     _temp_x
;
; temp_y = BoxGuy2.y >> 8;
;
	lda     _BoxGuy2+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L272C
;
; stun_p2 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p2
;
; quack4.moving = 0;
;
	lda     #$00
	sta     _quack4+5
;
; temp_x = BoxGuy3.x >> 8;
;
L272C:	lda     _BoxGuy3+1
	sta     _temp_x
;
; temp_y = BoxGuy3.y >> 8;
;
	lda     _BoxGuy3+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L272E
;
; if(bee3_bigbee_timer == 0){
;
	lda     _bee3_bigbee_timer
	bne     L272D
;
; stun_p3 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p3
;
; quack4.moving = 0;
;
L272D:	lda     #$00
	sta     _quack4+5
;
; temp_x = BoxGuy4.x >> 8;
;
L272E:	lda     _BoxGuy4+1
	sta     _temp_x
;
; temp_y = BoxGuy4.y >> 8;
;
	lda     _BoxGuy4+3
	sta     _temp_y
;
; if(sprite_collision()){
;
	jsr     _sprite_collision
	tax
	beq     L1DF9
;
; stun_p4 = STUN_DURATION;
;
	lda     #$03
	sta     _stun_p4
;
; quack4.moving = 0;
;
	lda     #$00
	sta     _quack4+5
;
; }
;
L1DF9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_bg_palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_bg_palette: near

.segment	"CODE"

;
; if(map == MAP_OUTDOORS){
;
	lda     _map
	cmp     #$01
	bne     L2734
;
; pal_bg(palette_outdoors_bg);
;
	lda     #<(_palette_outdoors_bg)
	ldx     #>(_palette_outdoors_bg)
	jmp     _pal_bg
;
; } else if (map == MAP_COMBS) {
;
L2734:	lda     _map
	bne     L2735
;
; pal_bg(palette_combsnplants_bg);
;
	lda     #<(_palette_combsnplants_bg)
	ldx     #>(_palette_combsnplants_bg)
	jmp     _pal_bg
;
; } else if (map == MAP_VINES) {
;
L2735:	lda     _map
	cmp     #$02
	bne     L23D9
;
; pal_bg(palette_vineswoflowers_bg);
;
	lda     #<(_palette_vineswoflowers_bg)
	ldx     #>(_palette_vineswoflowers_bg)
	jmp     _pal_bg
;
; }
;
L23D9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_options_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_options_screen: near

.segment	"CODE"

;
; temp_x = 64;
;
	lda     #$40
	sta     _temp_x
;
; if(current_settings_choice == SETTING_SPEED){
;
	lda     _current_settings_choice
	bne     L2739
;
; temp_y = 96;
;
	lda     #$60
;
; } else if (current_settings_choice == SETTING_MAP){
;
	jmp     L2736
L2739:	lda     _current_settings_choice
	cmp     #$01
	bne     L273A
;
; temp_y = 128;
;
	lda     #$80
;
; } else if (current_settings_choice == SETTING_SONG){
;
	jmp     L2736
L273A:	lda     _current_settings_choice
	cmp     #$02
	bne     L240E
;
; temp_y = 160;
;
	lda     #$A0
L2736:	sta     _temp_y
;
; multi_vram_buffer_horz("SPEED:", 7, NTADR_A(8, 10));
;
L240E:	jsr     decsp3
	lda     #<(L2413)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2413)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$48
	jsr     _multi_vram_buffer_horz
;
; if (speed_option == SPEED_SLOW)
;
	lda     _speed_option+1
	bne     L241C
	lda     _speed_option
	cmp     #$60
	bne     L241C
;
; multi_vram_buffer_horz("SLOW   ", 7, NTADR_A(11, 12));
;
	jsr     decsp3
	lda     #<(L2420)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2420)
;
; else if (speed_option == SPEED_REGULAR)
;
	jmp     L274A
L241C:	lda     _speed_option+1
	bne     L242A
	lda     _speed_option
	cmp     #$A0
	bne     L242A
;
; multi_vram_buffer_horz("REGULAR", 7, NTADR_A(11, 12));
;
	jsr     decsp3
	lda     #<(L242E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L242E)
;
; else
;
	jmp     L274A
;
; multi_vram_buffer_horz("FAST   ", 7, NTADR_A(11, 12));
;
L242A:	jsr     decsp3
	lda     #<(L2439)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2439)
L274A:	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$8B
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("MAP:", 4, NTADR_A(8, 14));
;
	jsr     decsp3
	lda     #<(L2443)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2443)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$C8
	jsr     _multi_vram_buffer_horz
;
; if(settings_map == MAP_RANDOM){
;
	lda     _settings_map
	cmp     #$03
	bne     L273B
;
; multi_vram_buffer_horz("RANDOM  ", 8, NTADR_A(11, 16));
;
	jsr     decsp3
	lda     #<(L244F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L244F)
;
; } else if (settings_map == MAP_OUTDOORS){
;
	jmp     L274B
L273B:	lda     _settings_map
	cmp     #$01
	bne     L273C
;
; multi_vram_buffer_horz("OUTDOORS", 8, NTADR_A(11, 16));
;
	jsr     decsp3
	lda     #<(L245C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L245C)
;
; } else if (settings_map == MAP_COMBS){
;
	jmp     L274B
L273C:	lda     _settings_map
	bne     L273D
;
; multi_vram_buffer_horz("COMBS   ", 8, NTADR_A(11, 16));
;
	jsr     decsp3
	lda     #<(L2469)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2469)
;
; } else if (settings_map == MAP_VINES){
;
	jmp     L274B
L273D:	lda     _settings_map
	cmp     #$02
	bne     L2473
;
; multi_vram_buffer_horz("VINES   ", 8, NTADR_A(11, 16));
;
	jsr     decsp3
	lda     #<(L2476)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2476)
L274B:	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$0B
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("MUSIC:", 6, NTADR_A(8, 18));
;
L2473:	jsr     decsp3
	lda     #<(L2480)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2480)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$48
	jsr     _multi_vram_buffer_horz
;
; if(settings_song == SONG_BEE){
;
	lda     _settings_song
	bne     L273E
;
; multi_vram_buffer_horz("BEE ", 5, NTADR_A(11, 20));
;
	jsr     decsp3
	lda     #<(L248C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L248C)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$8B
	jmp     _multi_vram_buffer_horz
;
; } else if (settings_song == SONG_LAKE){
;
L273E:	lda     _settings_song
	cmp     #$01
	bne     L273F
;
; multi_vram_buffer_horz("LAKE ", 5, NTADR_A(11, 20));
;
	jsr     decsp3
	lda     #<(L2499)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L2499)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$8B
	jmp     _multi_vram_buffer_horz
;
; } else if (settings_song == SONG_HONEY){
;
L273F:	lda     _settings_song
	cmp     #$02
	bne     L24A3
;
; multi_vram_buffer_horz("HONEY", 5, NTADR_A(11, 20));
;
	jsr     decsp3
	lda     #<(L24A6)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L24A6)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$8B
	jmp     _multi_vram_buffer_horz
;
; }
;
L24A3:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if (temp_y >= 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L274C
;
; return 0;
;
	txa
	rts
;
; temp = map_ptr[((temp_y >> 3) << 5) + (temp_x >> 3)];
;
L274C:	lda     _temp_y
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	pha
	lda     #$00
	adc     ptr1+1
	tax
	pla
	clc
	adc     _map_ptr
	sta     ptr1
	txa
	adc     _map_ptr+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _temp
;
; if (temp == 0xc6 || temp == 0xc7 || temp == 0xc8 || temp == 0xc9 || temp == 0xca || temp == 0xa5)
;
	cmp     #$C6
	beq     L274D
	lda     _temp
	cmp     #$C7
	beq     L274D
	cmp     #$C8
	beq     L274D
	cmp     #$C9
	beq     L274D
	cmp     #$CA
	beq     L274D
	cmp     #$A5
	bne     L274E
;
; return 0;
;
L274D:	ldx     #$00
	txa
	rts
;
; else if (temp == 0xb6 || temp == 0xb7 || temp == 0xb8 || temp == 0xb9 || temp == 0xba || temp == 0x00 || temp == 0x69 || temp == 0x6a || temp == 0x6b)
;
L274E:	lda     _temp
	cmp     #$B6
	beq     L274F
	cmp     #$B7
	beq     L274F
	cmp     #$B8
	beq     L274F
	cmp     #$B9
	beq     L274F
	cmp     #$BA
	beq     L274F
	lda     _temp
	beq     L274F
	cmp     #$69
	beq     L274F
	cmp     #$6A
	beq     L274F
	cmp     #$6B
	beq     L274F
	ldx     #$00
	jmp     L2750
;
; return 0;
;
L274F:	ldx     #$00
	txa
	rts
;
; return 1;
;
L2750:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp_x = Generic.x;
;
	lda     _Generic
	sta     _temp_x
;
; eject_L = temp_x & 0x07; // distance to next tile boundary
;
	and     #$07
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L2752
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L2752:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L2754
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L2754:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp_x = Generic.x + Generic.width; 
;
	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; eject_R = 8 - (temp_x & 0x07); // distance to next tile boundary
;
	lda     #$08
	jsr     pusha0
	lda     _temp_x
	and     #$07
	jsr     tossuba0
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L2757
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L2757:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L2759
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L2759:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y & 0x07; // distance to next tile boundary
;
	and     #$07
	sta     _eject_U
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L275B
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L275B:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L275D
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L275D:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp_x = Generic.x + 2;
;
	lda     _Generic
	clc
	adc     #$02
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; eject_D = 8 - (temp_y & 0x07); // distance to next tile boundary
;
	lda     #$08
	jsr     pusha0
	lda     _temp_y
	and     #$07
	jsr     tossuba0
	sta     _eject_D
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L2760
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_x = Generic.x + Generic.width;
;
L2760:	lda     _Generic
	clc
	adc     _Generic+2
	sta     _temp_x
;
; temp_x -= 2;
;
	sec
	sbc     #$02
	sta     _temp_x
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L2762
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L2762:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ sprite_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collision: near

.segment	"CODE"

;
; if (temp_x < temp_x2 + 8 && temp_x + 8 > temp_x2 &&
;
	lda     _temp_x
	jsr     pusha0
	lda     _temp_x2
	clc
	adc     #$08
	bcc     L20B0
	ldx     #$01
L20B0:	jsr     tosicmp
	bcs     L20B1
	ldx     #$00
	lda     _temp_x
	clc
	adc     #$08
	bcc     L20B2
	inx
L20B2:	sec
	sbc     _temp_x2
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L20B1
	beq     L20B1
;
; temp_y < temp_y2 + 8 && temp_y + 8 > temp_y2)
;
	lda     _temp_y
	jsr     pusha0
	lda     _temp_y2
	clc
	adc     #$08
	bcc     L20B3
	ldx     #$01
L20B3:	jsr     tosicmp
	bcs     L20B1
	ldx     #$00
	lda     _temp_y
	clc
	adc     #$08
	bcc     L20B4
	inx
L20B4:	sec
	sbc     _temp_y2
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	beq     L20B1
	bcs     L20AF
L20B1:	ldx     #$00
	txa
	rts
;
; return 1;
;
L20AF:	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_powerup_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_powerup_collision: near

.segment	"CODE"

;
; if (temp_x + 4 >= temp_x2 && temp_x + 4 < temp_x2 + 16 &&
;
	ldx     #$00
	lda     _temp_x
	clc
	adc     #$04
	bcc     L20BC
	inx
L20BC:	cmp     _temp_x2
	txa
	sbc     #$00
	lda     #$00
	tax
	bcc     L2768
	lda     _temp_x
	clc
	adc     #$04
	bcc     L20BE
	inx
L20BE:	jsr     pushax
	ldx     #$00
	lda     _temp_x2
	clc
	adc     #$10
	bcc     L20BF
	inx
L20BF:	jsr     tosicmp
	bcs     L20BD
;
; temp_y + 4 >= temp_y2 && temp_y + 4 < temp_y2 + 16)
;
	ldx     #$00
	lda     _temp_y
	clc
	adc     #$04
	bcc     L20C0
	inx
L20C0:	cmp     _temp_y2
	txa
	sbc     #$00
	lda     #$00
	tax
	bcc     L2768
	lda     _temp_y
	clc
	adc     #$04
	bcc     L20C1
	inx
L20C1:	jsr     pushax
	ldx     #$00
	lda     _temp_y2
	clc
	adc     #$10
	bcc     L20C2
	inx
L20C2:	jsr     tosicmp
	bcc     L20BB
L20BD:	ldx     #$00
	txa
	rts
;
; return 1;
;
L20BB:	ldx     #$00
	lda     #$01
	rts
;
; }
;
L2768:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init_system();
;
	jsr     _init_system
;
; init_title_loop();
;
	jsr     _init_title_loop
;
; if (game_mode == MODE_TITLE)
;
L2769:	lda     _game_mode
	bne     L276A
;
; title_loop();
;
	jsr     _title_loop
;
; if (game_mode == MODE_OPTIONS)
;
L276A:	lda     _game_mode
	cmp     #$01
	bne     L276B
;
; options_loop();
;
	jsr     _options_loop
;
; if (game_mode == MODE_GAME)
;
L276B:	lda     _game_mode
	cmp     #$02
	bne     L276C
;
; game_loop();
;
	jsr     _game_loop
;
; if (game_mode == MODE_GAMEOVER)
;
L276C:	lda     _game_mode
	cmp     #$03
	bne     L276D
;
; gameover_loop();
;
	jsr     _gameover_loop
;
; if(game_mode== MODE_ROUNDOVER){
;
L276D:	lda     _game_mode
	cmp     #$04
	bne     L2769
;
; roundover_loop();
;
	jsr     _roundover_loop
;
; while (1)
;
	jmp     L2769

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ quack_tile_solid (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_quack_tile_solid: near

.segment	"CODE"

;
; if (temp_y2 >= 0xf0) return 0;
;
	lda     _temp_y2
	cmp     #$F0
	ldx     #$00
	bcc     L276E
	txa
	rts
;
; largeindex = ((temp_y2 >> 3) << 5) + (temp_x2 >> 3);
;
L276E:	lda     _temp_y2
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x2
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _largeindex
	lda     #$00
	adc     ptr1+1
	sta     _largeindex+1
;
; temp = map_ptr[largeindex];
;
	lda     _map_ptr
	clc
	adc     _largeindex
	sta     ptr1
	lda     _map_ptr+1
	adc     _largeindex+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     _temp
;
; if (temp == 0xc6 || temp == 0xc7 || temp == 0xc8 || temp == 0xc9 || temp == 0xca) return 0;
;
	cmp     #$C6
	beq     L276F
	lda     _temp
	cmp     #$C7
	beq     L276F
	cmp     #$C8
	beq     L276F
	cmp     #$C9
	beq     L276F
	cmp     #$CA
	bne     L2770
L276F:	ldx     #$00
	txa
	rts
;
; if (temp == 0xb6 || temp == 0xb7 || temp == 0xb8 || temp == 0xb9 || temp == 0xba) return 0;
;
L2770:	lda     _temp
	cmp     #$B6
	beq     L2771
	cmp     #$B7
	beq     L2771
	cmp     #$B8
	beq     L2771
	cmp     #$B9
	beq     L2771
	cmp     #$BA
	beq     L2771
	ldx     #$00
	jmp     L2772
L2771:	ldx     #$00
	txa
	rts
;
; return 1;
;
L2772:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_powerup (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_powerup: near

.segment	"CODE"

;
; if (powerup1 == 1){
;
	lda     _powerup1
	cmp     #$01
	bne     L277A
;
; if(map==MAP_COMBS){
;
	lda     _map
	bne     L2777
;
; temp_x2 = COMBS_FLOWER_X[0];
;
	lda     _COMBS_FLOWER_X
	sta     _temp_x2
;
; temp_y2 = COMBS_FLOWER_Y[0];
;
	lda     _COMBS_FLOWER_Y
;
; else if(map==MAP_VINES){
;
	jmp     L2773
L2777:	lda     _map
	cmp     #$02
	bne     L2778
;
; temp_x2 = VINES_FLOWER_X[0];
;
	lda     _VINES_FLOWER_X
	sta     _temp_x2
;
; temp_y2 = VINES_FLOWER_Y[0];
;
	lda     _VINES_FLOWER_Y
;
; else if(map==MAP_OUTDOORS){
;
	jmp     L2773
L2778:	lda     _map
	cmp     #$01
	bne     L1E14
;
; temp_x2 = OUTDOORS_FLOWER_X[0];
;
	lda     _OUTDOORS_FLOWER_X
	sta     _temp_x2
;
; temp_y2 = OUTDOORS_FLOWER_Y[0];
;
	lda     _OUTDOORS_FLOWER_Y
L2773:	sta     _temp_y2
;
; if(check_powerup_collision()) {
;
L1E14:	jsr     _check_powerup_collision
	tax
	beq     L277A
;
; powerup1 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup1
;
; if(temp == 1){
;
	lda     _temp
	cmp     #$01
	bne     L2779
;
; bee1_bigbee_timer = POWERUP_TIMER;  
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; } else if (temp == 3) {
;
	jmp     L1E25
L2779:	lda     _temp
	cmp     #$03
	bne     L1E25
;
; bee3_bigbee_timer = POWERUP_TIMER;  
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
L1E25:	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup2 == 1){
;
L277A:	lda     _powerup2
	cmp     #$01
	bne     L277E
;
; if(map==MAP_COMBS){
;
	lda     _map
	bne     L277B
;
; temp_x2 = COMBS_FLOWER_X[1];
;
	lda     _COMBS_FLOWER_X+1
	sta     _temp_x2
;
; temp_y2 = COMBS_FLOWER_Y[1];
;
	lda     _COMBS_FLOWER_Y+1
;
; else if(map==MAP_VINES){
;
	jmp     L2774
L277B:	lda     _map
	cmp     #$02
	bne     L277C
;
; temp_x2 = VINES_FLOWER_X[1];
;
	lda     _VINES_FLOWER_X+1
	sta     _temp_x2
;
; temp_y2 = VINES_FLOWER_Y[1];
;
	lda     _VINES_FLOWER_Y+1
;
; else if(map==MAP_OUTDOORS){
;
	jmp     L2774
L277C:	lda     _map
	cmp     #$01
	bne     L1E40
;
; temp_x2 = OUTDOORS_FLOWER_X[1];
;
	lda     _OUTDOORS_FLOWER_X+1
	sta     _temp_x2
;
; temp_y2 = OUTDOORS_FLOWER_Y[1];
;
	lda     _OUTDOORS_FLOWER_Y+1
L2774:	sta     _temp_y2
;
; if(check_powerup_collision()) {
;
L1E40:	jsr     _check_powerup_collision
	tax
	beq     L277E
;
; powerup2 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup2
;
; if(temp == 1){
;
	lda     _temp
	cmp     #$01
	bne     L277D
;
; bee1_bigbee_timer = POWERUP_TIMER;  
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; } else if (temp == 3) {
;
	jmp     L1E51
L277D:	lda     _temp
	cmp     #$03
	bne     L1E51
;
; bee3_bigbee_timer = POWERUP_TIMER;  
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
L1E51:	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup3 == 1){
;
L277E:	lda     _powerup3
	cmp     #$01
	bne     L2782
;
; if(map==MAP_COMBS){
;
	lda     _map
	bne     L277F
;
; temp_x2 = COMBS_FLOWER_X[2];
;
	lda     _COMBS_FLOWER_X+2
	sta     _temp_x2
;
; temp_y2 = COMBS_FLOWER_Y[2];
;
	lda     _COMBS_FLOWER_Y+2
;
; else if(map==MAP_VINES){
;
	jmp     L2775
L277F:	lda     _map
	cmp     #$02
	bne     L2780
;
; temp_x2 = VINES_FLOWER_X[2];
;
	lda     _VINES_FLOWER_X+2
	sta     _temp_x2
;
; temp_y2 = VINES_FLOWER_Y[2];
;
	lda     _VINES_FLOWER_Y+2
;
; else if(map==MAP_OUTDOORS){
;
	jmp     L2775
L2780:	lda     _map
	cmp     #$01
	bne     L1E6C
;
; temp_x2 = OUTDOORS_FLOWER_X[2];
;
	lda     _OUTDOORS_FLOWER_X+2
	sta     _temp_x2
;
; temp_y2 = OUTDOORS_FLOWER_Y[2];
;
	lda     _OUTDOORS_FLOWER_Y+2
L2775:	sta     _temp_y2
;
; if(check_powerup_collision()) {
;
L1E6C:	jsr     _check_powerup_collision
	tax
	beq     L2782
;
; powerup3 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup3
;
; if(temp == 1){
;
	lda     _temp
	cmp     #$01
	bne     L2781
;
; bee1_bigbee_timer = POWERUP_TIMER;  
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; } else if (temp == 3) {
;
	jmp     L1E7D
L2781:	lda     _temp
	cmp     #$03
	bne     L1E7D
;
; bee3_bigbee_timer = POWERUP_TIMER;  
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
L1E7D:	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (powerup4 == 1){
;
L2782:	lda     _powerup4
	cmp     #$01
	bne     L1EA0
;
; if(map==MAP_COMBS){
;
	lda     _map
	bne     L2783
;
; temp_x2 = COMBS_FLOWER_X[3];
;
	lda     _COMBS_FLOWER_X+3
	sta     _temp_x2
;
; temp_y2 = COMBS_FLOWER_Y[3];
;
	lda     _COMBS_FLOWER_Y+3
;
; else if(map==MAP_VINES){
;
	jmp     L2776
L2783:	lda     _map
	cmp     #$02
	bne     L2784
;
; temp_x2 = VINES_FLOWER_X[3];
;
	lda     _VINES_FLOWER_X+3
	sta     _temp_x2
;
; temp_y2 = VINES_FLOWER_Y[3];
;
	lda     _VINES_FLOWER_Y+3
;
; else if(map==MAP_OUTDOORS){
;
	jmp     L2776
L2784:	lda     _map
	cmp     #$01
	bne     L1E98
;
; temp_x2 = OUTDOORS_FLOWER_X[3];
;
	lda     _OUTDOORS_FLOWER_X+3
	sta     _temp_x2
;
; temp_y2 = OUTDOORS_FLOWER_Y[3];
;
	lda     _OUTDOORS_FLOWER_Y+3
L2776:	sta     _temp_y2
;
; if(check_powerup_collision()) {
;
L1E98:	jsr     _check_powerup_collision
	tax
	beq     L1EA0
;
; powerup4 = 0; // Remove powerup
;
	lda     #$00
	sta     _powerup4
;
; if(temp == 1){
;
	lda     _temp
	cmp     #$01
	bne     L2785
;
; bee1_bigbee_timer = POWERUP_TIMER;  
;
	lda     #$0A
	sta     _bee1_bigbee_timer
;
; } else if (temp == 3) {
;
	jmp     L1EA9
L2785:	lda     _temp
	cmp     #$03
	bne     L1EA9
;
; bee3_bigbee_timer = POWERUP_TIMER;  
;
	lda     #$0A
	sta     _bee3_bigbee_timer
;
; sfx_play(SFX_POWERUP, 0);
;
L1EA9:	lda     #$06
	jsr     pusha
	lda     #$00
	jmp     _sfx_play
;
; }
;
L1EA0:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ is_dot_consumed (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_dot_consumed: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char byte_index = map_index >> 3; // divide by 8
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shrax3
	jsr     pusha
;
; unsigned char bit_index = map_index & 0x07; // modulo 8
;
	ldy     #$01
	lda     (sp),y
	and     #$07
	jsr     pusha
;
; return (consumed_dots[byte_index] >> bit_index) & 0x01;
;
	ldy     #$01
	lda     (sp),y
	tay
	lda     _consumed_dots,y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	tay
	lda     ptr1
L2786:	lsr     a
	dey
	bpl     L2786
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ mark_dot_consumed (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mark_dot_consumed: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char byte_index = map_index >> 3; // divide by 8
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shrax3
	jsr     pusha
;
; unsigned char bit_index = map_index & 0x07; // modulo 8
;
	ldy     #$01
	lda     (sp),y
	and     #$07
	jsr     pusha
;
; consumed_dots[byte_index] |= (0x01 << bit_index);
;
	lda     #<(_consumed_dots)
	ldx     #>(_consumed_dots)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L2056
	inx
L2056:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$01
L2787:	asl     a
	dey
	bpl     L2787
	ror     a
	ora     ptr1
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp4

.endproc

